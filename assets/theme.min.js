/*
@license
  Impulse by Archetype Themes (https://archetypethemes.co)
  Access unminified JS in assets/theme.js

  Use this event listener to run your own JS outside of this file.
  Documentation - https://archetypethemes.co/blogs/impulse/javascript-events-for-developers

  document.addEventListener('page:loaded', function() {
    // Page has loaded and theme assets are ready
  });
*/
//window.theme=window.theme||{},window.Shopify=window.Shopify||{},theme.config={bpSmall:!1,hasSessionStorage:!0,hasLocalStorage:!0,mediaQuerySmall:"screen and (max-width: 769px)",youTubeReady:!1,vimeoReady:!1,vimeoLoading:!1,isTouch:!!("ontouchstart"in window||window.DocumentTouch&&window.document instanceof DocumentTouch||window.navigator.maxTouchPoints||window.navigator.msMaxTouchPoints),stickyHeader:!1,rtl:"rtl"==document.documentElement.getAttribute("dir")},theme.config.isTouch&&(document.documentElement.className+=" supports-touch"),console&&console.log&&console.log("Impulse theme ("+theme.settings.themeVersion+") by ARCHÎžTYPE | Learn more at https://archetypethemes.co"),theme.recentlyViewed={recent:{},productInfo:{}},window.lazySizesConfig=window.lazySizesConfig||{},lazySizesConfig.expFactor=4,function(){"use strict";var e,t,i,n,s,o,a,r;theme.delegate={on:function(e,t,i){return this.namespaces||(this.namespaces={}),this.namespaces[e]=t,i=i||!1,this.addEventListener(e.split(".")[0],t,i),this},off:function(e){if(this.namespaces)return this.removeEventListener(e.split(".")[0],this.namespaces[e]),delete this.namespaces[e],this}},window.on=Element.prototype.on=theme.delegate.on,window.off=Element.prototype.off=theme.delegate.off,theme.utils={defaultTo:function(e,t){return null==e||e!=e?t:e},wrap:function(e,t){e.parentNode.insertBefore(t,e),t.appendChild(e)},debounce:function(e,t,i){var n;return function(){var s=this,o=arguments,a=function(){n=null,i||t.apply(s,o)},r=i&&!n;clearTimeout(n),n=setTimeout(a,e),r&&t.apply(s,o)}},throttle:function(e,t){var i=!1;return function(){i||(t.apply(this,arguments),i=!0,setTimeout((function(){i=!1}),e))}},prepareTransition:function(e,t){e.addEventListener("transitionend",(function t(i){e.classList.remove("is-transitioning"),e.removeEventListener("transitionend",t)})),e.classList.add("is-transitioning"),e.offsetWidth,"function"==typeof t&&t()},compact:function(e){for(var t=-1,i=null==e?0:e.length,n=0,s=[];++t<i;){var o=e[t];o&&(s[n++]=o)}return s},serialize:function(e){var t=[];return Array.prototype.slice.call(e.elements).forEach((function(e){!e.name||e.disabled||["file","reset","submit","button"].indexOf(e.type)>-1||("select-multiple"!==e.type?["checkbox","radio"].indexOf(e.type)>-1&&!e.checked||t.push(encodeURIComponent(e.name)+"="+encodeURIComponent(e.value)):Array.prototype.slice.call(e.options).forEach((function(i){i.selected&&t.push(encodeURIComponent(e.name)+"="+encodeURIComponent(i.value))})))})),t.join("&")}},theme.a11y={trapFocus:function(e){var t={focusin:e.namespace?"focusin."+e.namespace:"focusin",focusout:e.namespace?"focusout."+e.namespace:"focusout",keydown:e.namespace?"keydown."+e.namespace:"keydown.handleFocus"},i=e.container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])'),n=[].slice.call(i).filter(e=>null!==e.offsetParent),s=n[0],o=n[n.length-1];e.elementToFocus||(e.elementToFocus=e.container),e.container.setAttribute("tabindex","-1"),e.elementToFocus.focus(),document.documentElement.off("focusin"),document.documentElement.on(t.focusout,(function(){document.documentElement.off(t.keydown)})),document.documentElement.on(t.focusin,(function(e){e.target!==o&&e.target!==s||document.documentElement.on(t.keydown,(function(e){!function(e){if(9!==e.keyCode)return;e.target===s&&e.shiftKey&&(e.preventDefault(),o.focus())}(e)}))}))},removeTrapFocus:function(e){var t=e.namespace?"focusin."+e.namespace:"focusin";e.container&&e.container.removeAttribute("tabindex"),document.documentElement.off(t)},lockMobileScrolling:function(e,t){var i=t||document.documentElement;document.documentElement.classList.add("lock-scroll"),i.on("touchmove"+e,(function(){return!0}))},unlockMobileScrolling:function(e,t){document.documentElement.classList.remove("lock-scroll"),(t||document.documentElement).off("touchmove"+e)}},document.documentElement.on("keyup.tab",(function(e){9===e.keyCode&&(document.documentElement.classList.add("tab-outline"),document.documentElement.off("keyup.tab"))})),theme.Currency=(e=theme&&theme.settings&&theme.settings.superScriptPrice,{formatMoney:function(t,i){i||(i=theme.settings.moneyFormat),"string"==typeof t&&(t=t.replace(".",""));var n="",s=/\{\{\s*(\w+)\s*\}\}/,o=i||"${{amount}}";function a(e,t,i,n){if(t=theme.utils.defaultTo(t,2),i=theme.utils.defaultTo(i,","),n=theme.utils.defaultTo(n,"."),isNaN(e)||null==e)return 0;var s=(e=(e/100).toFixed(t)).split(".");return s[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+i)+(s[1]?n+s[1]:"")}switch(o.match(s)[1]){case"amount":n=a(t,2),e&&n&&n.includes(".")&&(n=n.replace(".","<sup>")+"</sup>");break;case"amount_no_decimals":n=a(t,0);break;case"amount_with_comma_separator":n=a(t,2,".",","),e&&n&&n.includes(".")&&(n=n.replace(",","<sup>")+"</sup>");break;case"amount_no_decimals_with_comma_separator":n=a(t,0,".",",");break;case"amount_no_decimals_with_space_separator":n=a(t,0," ")}return o.replace(s,n)},getBaseUnit:function(e){if(e&&e.unit_price_measurement&&e.unit_price_measurement.reference_value)return 1===e.unit_price_measurement.reference_value?e.unit_price_measurement.reference_unit:e.unit_price_measurement.reference_value+e.unit_price_measurement.reference_unit}}),theme.Images={imageSize:function(e){if(!e)return"620x";var t=e.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);return null!==t?t[1]:null},getSizedImageUrl:function(e,t){if(!e)return e;if(null==t)return e;if("master"===t)return this.removeProtocol(e);var i=e.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);if(null!=i){var n=e.split(i[0]),s=i[0];return this.removeProtocol(n[0]+"_"+t+s)}return null},removeProtocol:function(e){return e.replace(/http(s)?:/,"")},lazyloadImagePath:function(e){var t;return null!==e&&(t=e.replace(/(\.[^.]*)$/,"_{width}x$1")),t}},theme.loadImageSection=function(e){function t(){e.classList.remove("loading","loading--delayed"),e.classList.add("loaded")}function i(){return e.querySelector(".lazyloaded")}if(e.querySelector("svg"))t();else if(i())t();else var n=setInterval((function(){i()&&(clearInterval(n),t())}),80)},theme.initWhenVisible=function(e){var t=e.threshold?e.threshold:0;new IntersectionObserver((t,i)=>{t.forEach(t=>{t.isIntersecting&&"function"==typeof e.callback&&(e.callback(),i.unobserve(t.target))})},{rootMargin:"0px 0px "+t+"px 0px"}).observe(e.element)},theme.LibraryLoader=(n="requested",s="loaded",a={youtubeSdk:{tagId:"youtube-sdk",src:"https://www.youtube.com/iframe_api",type:i="script"},vimeo:{tagId:"vimeo-api",src:"https://player.vimeo.com/api/player.js",type:i},shopifyXr:{tagId:"shopify-model-viewer-xr",src:(o="https://cdn.shopify.com/shopifycloud/")+"shopify-xr-js/assets/v1.0/shopify-xr.en.js",type:i},modelViewerUi:{tagId:"shopify-model-viewer-ui",src:o+"model-viewer-ui/assets/v1.0/model-viewer-ui.en.js",type:i},modelViewerUiStyles:{tagId:"shopify-model-viewer-ui-styles",src:o+"model-viewer-ui/assets/v1.0/model-viewer-ui.css",type:t="link"}},{load:function(e,o){var r=a[e];if(r&&r.status!==n)if(o=o||function(){},r.status!==s){var c;switch(r.status=n,r.type){case i:c=function(e,t){var i=document.createElement("script");return i.src=e.src,i.addEventListener("load",(function(){e.status=s,t()})),i}(r,o);break;case t:c=function(e,t){var i=document.createElement("link");return i.href=e.src,i.rel="stylesheet",i.type="text/css",i.addEventListener("load",(function(){e.status=s,t()})),i}(r,o)}c.id=r.tagId,r.element=c;var d=document.getElementsByTagName(r.type)[0];d.parentNode.insertBefore(c,d)}else o()}}),theme.rteInit=function(){function e(e){e.src=e.src;var t=document.createElement("div");t.classList.add("video-wrapper"),theme.utils.wrap(e,t)}document.querySelectorAll(".rte table").forEach(e=>{var t=document.createElement("div");t.classList.add("table-wrapper"),theme.utils.wrap(e,t)}),document.querySelectorAll('.rte iframe[src*="youtube.com/embed"]').forEach(t=>{e(t)}),document.querySelectorAll('.rte iframe[src*="player.vimeo"]').forEach(t=>{e(t)}),document.querySelectorAll(".rte a img").forEach(e=>{e.parentNode.classList.add("rte__image")})},theme.Sections=function(){this.constructors={},this.instances=[],document.addEventListener("shopify:section:load",this._onSectionLoad.bind(this)),document.addEventListener("shopify:section:unload",this._onSectionUnload.bind(this)),document.addEventListener("shopify:section:select",this._onSelect.bind(this)),document.addEventListener("shopify:section:deselect",this._onDeselect.bind(this)),document.addEventListener("shopify:block:select",this._onBlockSelect.bind(this)),document.addEventListener("shopify:block:deselect",this._onBlockDeselect.bind(this))},theme.Sections.prototype=Object.assign({},theme.Sections.prototype,{_createInstance:function(e,t,i){var n=e.getAttribute("data-section-id"),s=e.getAttribute("data-section-type");if(void 0!==(t=t||this.constructors[s])){if(i)this._findInstance(n)&&this._removeInstance(n);var o=Object.assign(new t(e),{id:n,type:s,container:e});this.instances.push(o)}},_findInstance:function(e){for(var t=0;t<this.instances.length;t++)if(this.instances[t].id===e)return this.instances[t]},_removeInstance:function(e){for(var t,i=this.instances.length;i--;)if(this.instances[i].id===e){t=this.instances[i],this.instances.splice(i,1);break}return t},_onSectionLoad:function(e,t,i){window.AOS&&AOS.refreshHard(),theme&&theme.initGlobals&&theme.initGlobals();var n=t||e.target,s=t||e.target.querySelector("[data-section-id]");if(s){this._createInstance(s);var o=t?i:this._findInstance(e.detail.sectionId);n.querySelectorAll("[data-subsection]").length&&this.loadSubSections(n),o&&"function"==typeof o.onLoad&&o.onLoad(e),setTimeout((function(){window.dispatchEvent(new Event("scroll"))}),200)}},_onSectionUnload:function(e){this.instances=this.instances.filter((function(t){var i=t.id===e.detail.sectionId;return i&&"function"==typeof t.onUnload&&t.onUnload(e),!i}))},loadSubSections:function(e){(e?e.querySelectorAll("[data-subsection]"):document.querySelectorAll("[data-subsection]")).forEach(e=>{this._onSectionLoad(null,e,e.dataset.sectionId)}),window.AOS&&AOS.refreshHard()},_onSelect:function(e){var t=this._findInstance(e.detail.sectionId);void 0!==t&&"function"==typeof t.onSelect&&t.onSelect(e)},_onDeselect:function(e){var t=this._findInstance(e.detail.sectionId);void 0!==t&&"function"==typeof t.onDeselect&&t.onDeselect(e)},_onBlockSelect:function(e){var t=this._findInstance(e.detail.sectionId);void 0!==t&&"function"==typeof t.onBlockSelect&&t.onBlockSelect(e)},_onBlockDeselect:function(e){var t=this._findInstance(e.detail.sectionId);void 0!==t&&"function"==typeof t.onBlockDeselect&&t.onBlockDeselect(e)},register:function(e,t,i){this.constructors[e]=t;var n=document.querySelectorAll('[data-section-type="'+e+'"]');i&&(n=i.querySelectorAll('[data-section-type="'+e+'"]')),n.forEach(function(e){this._createInstance(e,t,i)}.bind(this))},reinit:function(e){for(var t=0;t<this.instances.length;t++){var i=this.instances[t];i.type===e&&"function"==typeof i.forceReload&&i.forceReload()}}}),theme.Variants=function(){function e(e){this.container=e.container,this.variants=e.variants,this.singleOptionSelector=e.singleOptionSelector,this.originalSelectorId=e.originalSelectorId,this.enableHistoryState=e.enableHistoryState,this.currentVariant=this._getVariantFromOptions(),this.container.querySelectorAll(this.singleOptionSelector).forEach(e=>{e.addEventListener("change",this._onSelectChange.bind(this))})}return e.prototype=Object.assign({},e.prototype,{_getCurrentOptions:function(){var e=[];return this.container.querySelectorAll(this.singleOptionSelector).forEach(t=>{var i=t.getAttribute("type");"radio"===i||"checkbox"===i?t.checked&&e.push({value:t.value,index:t.dataset.index}):e.push({value:t.value,index:t.dataset.index})}),e=theme.utils.compact(e)},_getVariantFromOptions:function(){var e=this._getCurrentOptions(),t=this.variants,i=!1;return t.forEach((function(t){var n=!0;t.options;e.forEach((function(e){n&&(n=t[e.index]===e.value)})),n&&(i=t)})),i||null},_onSelectChange:function(){var e=this._getVariantFromOptions();this.container.dispatchEvent(new CustomEvent("variantChange",{detail:{variant:e}})),document.dispatchEvent(new CustomEvent("variant:change",{detail:{variant:e}})),e&&(this._updateMasterSelect(e),this._updateImages(e),this._updatePrice(e),this._updateUnitPrice(e),this._updateSKU(e),this.currentVariant=e,this.enableHistoryState&&this._updateHistoryState(e))},_updateImages:function(e){var t=e.featured_image||{},i=this.currentVariant.featured_image||{};e.featured_image&&t.src!==i.src&&this.container.dispatchEvent(new CustomEvent("variantImageChange",{detail:{variant:e}}))},_updatePrice:function(e){e.price===this.currentVariant.price&&e.compare_at_price===this.currentVariant.compare_at_price||this.container.dispatchEvent(new CustomEvent("variantPriceChange",{detail:{variant:e}}))},_updateUnitPrice:function(e){e.unit_price!==this.currentVariant.unit_price&&this.container.dispatchEvent(new CustomEvent("variantUnitPriceChange",{detail:{variant:e}}))},_updateSKU:function(e){e.sku!==this.currentVariant.sku&&this.container.dispatchEvent(new CustomEvent("variantSKUChange",{detail:{variant:e}}))},_updateHistoryState:function(e){if(history.replaceState&&e){var t=window.location.protocol+"//"+window.location.host+window.location.pathname+"?variant="+e.id;window.history.replaceState({path:t},"",t)}},_updateMasterSelect:function(e){this.container.querySelector(this.originalSelectorId).value=e.id}}),e}(),window.vimeoApiReady=function(){var e,t;theme.config.vimeoLoading=!0,new Promise((i,n)=>{e=setInterval((function(){Vimeo&&(clearInterval(e),clearTimeout(t),i())}),500),t=setTimeout((function(){clearInterval(e),n()}),4e3)}).then((function(){theme.config.vimeoReady=!0,theme.config.vimeoLoading=!1,document.dispatchEvent(new CustomEvent("vimeoReady"))}))},theme.VimeoPlayer=function(){var e="loading",t="loaded",i="video-interactable",n={background:!0,byline:!1,controls:!1,loop:!0,muted:!0,playsinline:!0,portrait:!1,title:!1};function s(e,t,i){this.divId=e,this.el=document.getElementById(e),this.videoId=t,this.iframe=null,this.options=i,this.options&&this.options.videoParent&&(this.parent=this.el.closest(this.options.videoParent)),this.setAsLoading(),theme.config.vimeoReady?this.init():(theme.LibraryLoader.load("vimeo",window.vimeoApiReady),document.addEventListener("vimeoReady",this.init.bind(this)))}return s.prototype=Object.assign({},s.prototype,{init:function(){var e=n;e.id=this.videoId,this.videoPlayer=new Vimeo.Player(this.el,e),this.videoPlayer.ready().then(this.playerReady.bind(this))},playerReady:function(){this.iframe=this.el.querySelector("iframe"),this.iframe.setAttribute("tabindex","-1"),this.videoPlayer.setMuted(!0),this.setAsLoaded(),new IntersectionObserver((e,t)=>{e.forEach(e=>{e.isIntersecting?this.play():this.pause()})},{rootMargin:"0px 0px 50px 0px"}).observe(this.iframe)},setAsLoading:function(){this.parent&&this.parent.classList.add(e)},setAsLoaded:function(){this.parent&&(this.parent.classList.remove(e),this.parent.classList.add(t),Shopify&&Shopify.designMode&&window.AOS&&AOS.refreshHard())},enableInteraction:function(){this.parent&&this.parent.classList.add(i)},play:function(){this.videoPlayer&&"function"==typeof this.videoPlayer.play&&this.videoPlayer.play()},pause:function(){this.videoPlayer&&"function"==typeof this.videoPlayer.pause&&this.videoPlayer.pause()},destroy:function(){this.videoPlayer&&"function"==typeof this.videoPlayer.destroy&&this.videoPlayer.destroy()}}),s}(),window.onYouTubeIframeAPIReady=function(){theme.config.youTubeReady=!0,document.dispatchEvent(new CustomEvent("youTubeReady"))},theme.YouTube=function(){var e="loading",t="loaded",i="video-interactable",n={width:1280,height:720,playerVars:{autohide:0,autoplay:1,cc_load_policy:0,controls:0,fs:0,iv_load_policy:3,modestbranding:1,playsinline:1,rel:0}};function s(e,t){this.divId=e,this.iframe=null,this.attemptedToPlay=!1,n.events={onReady:this.onVideoPlayerReady.bind(this),onStateChange:this.onVideoStateChange.bind(this)},this.options=Object.assign({},n,t),this.options&&(this.options.videoParent&&(this.parent=document.getElementById(this.divId).closest(this.options.videoParent)),this.options.autoplay||(this.options.playerVars.autoplay=this.options.autoplay),"sound"===this.options.style&&(this.options.playerVars.controls=1,this.options.playerVars.autoplay=0)),this.setAsLoading(),theme.config.youTubeReady?this.init():(theme.LibraryLoader.load("youtubeSdk"),document.addEventListener("youTubeReady",this.init.bind(this)))}return s.prototype=Object.assign({},s.prototype,{init:function(){this.videoPlayer=new YT.Player(this.divId,this.options)},onVideoPlayerReady:function(e){this.iframe=document.getElementById(this.divId),this.iframe.setAttribute("tabindex","-1"),"sound"!==this.options.style&&e.target.mute(),new IntersectionObserver((e,t)=>{e.forEach(e=>{e.isIntersecting?this.play():this.pause()})},{rootMargin:"0px 0px 50px 0px"}).observe(this.iframe)},onVideoStateChange:function(e){switch(e.data){case-1:this.attemptedToPlay&&(this.setAsLoaded(),this.enableInteraction());break;case 0:this.play(e);break;case 1:this.setAsLoaded();break;case 3:this.attemptedToPlay=!0}},setAsLoading:function(){this.parent&&this.parent.classList.add(e)},setAsLoaded:function(){this.parent&&(this.parent.classList.remove(e),this.parent.classList.add(t),Shopify&&Shopify.designMode&&window.AOS&&AOS.refreshHard())},enableInteraction:function(){this.parent&&this.parent.classList.add(i)},play:function(){this.videoPlayer&&"function"==typeof this.videoPlayer.playVideo&&this.videoPlayer.playVideo()},pause:function(){this.videoPlayer&&"function"==typeof this.videoPlayer.pauseVideo&&this.videoPlayer.pauseVideo()},destroy:function(){this.videoPlayer&&"function"==typeof this.videoPlayer.destroy&&this.videoPlayer.destroy()}}),s}(),theme.cart={getCart:function(){var e="".concat(theme.routes.cart,"?t=").concat(Date.now());return fetch(e,{credentials:"same-origin",method:"GET"}).then(e=>e.json())},getCartProductMarkup:function(){var e="".concat(theme.routes.cartPage,"?t=").concat(Date.now());return e=-1===e.indexOf("?")?e+"?view=ajax":e+"&view=ajax",fetch(e,{credentials:"same-origin",method:"GET"}).then((function(e){return e.text()}))},changeItem:function(e,t){return this._updateCart({url:"".concat(theme.routes.cartChange,"?t=").concat(Date.now()),data:JSON.stringify({id:e,quantity:t})})},_updateCart:function(e){return fetch(e.url,{method:"POST",body:e.data,credentials:"same-origin",headers:{"Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"}}).then(e=>e.json()).then((function(e){return e}))},updateAttribute:function(e,t){return this._updateCart({url:"/cart/update.js",data:JSON.stringify({attributes:{[e]:theme.cart.attributeToString(t)}})})},updateNote:function(e){return this._updateCart({url:"/cart/update.js",data:JSON.stringify({note:theme.cart.attributeToString(e)})})},attributeToString:function(e){return"string"!=typeof e&&"undefined"===(e+="")&&(e=""),e.trim()}},theme.CartForm=function(){var e="[data-products]",t=".js-qty__wrapper",i="[data-discounts]",n="[data-savings]",s="[data-subtotal]",o="#CartBubble",a='[name="note"]',r=".cart__terms-checkbox",c=".cart__checkout",d="btn--loading",l={requiresTerms:!1};function u(t){t&&(this.form=t,this.wrapper=t.parentNode,this.location=t.dataset.location,this.namespace=".cart-"+this.location,this.products=t.querySelector(e),this.submitBtn=t.querySelector(c),this.discounts=t.querySelector(i),this.savings=t.querySelector(n),this.subtotal=t.querySelector(s),this.termsCheckbox=t.querySelector(r),this.noteInput=t.querySelector(a),this.termsCheckbox&&(l.requiresTerms=!0),this.init())}return u.prototype=Object.assign({},u.prototype,{init:function(){this.initQtySelectors(),document.addEventListener("cart:quantity"+this.namespace,this.quantityChanged.bind(this)),this.form.on("submit"+this.namespace,this.onSubmit.bind(this)),this.noteInput&&this.noteInput.addEventListener("change",(function(){var e=this.value;theme.cart.updateNote(e)})),document.addEventListener("cart:build",function(){this.buildCart()}.bind(this))},reInit:function(){this.initQtySelectors()},onSubmit:function(e){if(this.submitBtn.classList.add(d),l.requiresTerms&&!this.termsCheckbox.checked)return alert(theme.strings.cartTermsConfirmation),this.submitBtn.classList.remove(d),e.preventDefault(),!1},_parseProductHTML:function(e){var t=(new DOMParser).parseFromString(e,"text/html");return{items:t.querySelector(".cart__items"),discounts:t.querySelector(".cart__discounts")}},buildCart:function(){theme.cart.getCartProductMarkup().then(this.cartMarkup.bind(this))},cartMarkup:function(e){var t=this._parseProductHTML(e),i=t.items,n=parseInt(i.dataset.count),s=i.dataset.cartSubtotal,o=i.dataset.cartSavings;this.updateCartDiscounts(t.discounts),this.updateSavings(o),n>0?this.wrapper.classList.remove("is-empty"):this.wrapper.classList.add("is-empty"),this.updateCount(n),this.products.innerHTML="",this.products.append(i),this.subtotal.innerHTML=theme.Currency.formatMoney(s,theme.settings.moneyFormat),this.reInit(),window.AOS&&AOS.refreshHard(),Shopify&&Shopify.StorefrontExpressButtons&&Shopify.StorefrontExpressButtons.initialize()},updateCartDiscounts:function(e){this.discounts&&(this.discounts.innerHTML="",this.discounts.append(e))},initQtySelectors:function(){this.form.querySelectorAll(t).forEach(e=>{new theme.QtySelector(e,{namespace:this.namespace,isCart:!0})})},quantityChanged:function(e){var t=e.detail[0],i=e.detail[1],n=e.detail[2];t&&i&&(n&&n.classList.add("is-loading"),theme.cart.changeItem(t,i).then(function(e){e.item_count>0?this.wrapper.classList.remove("is-empty"):this.wrapper.classList.add("is-empty"),this.buildCart(),document.dispatchEvent(new CustomEvent("cart:updated",{detail:{cart:e}}))}.bind(this)).catch((function(e){})))},updateSubtotal:function(e){this.form.querySelector(s).innerHTML=theme.Currency.formatMoney(e,theme.settings.moneyFormat)},updateSavings:function(e){if(this.savings)if(e>0){var t=theme.Currency.formatMoney(e,theme.settings.moneyFormat);this.savings.classList.remove("hide"),this.savings.innerHTML=theme.strings.cartSavings.replace("[savings]",t)}else this.savings.classList.add("hide")},updateCount:function(e){var t=document.querySelector(".cart-link__bubble-num");t&&(t.innerText=e),e>0?document.querySelector(o).classList.add("cart-link__bubble--visible"):document.querySelector(o).classList.remove("cart-link__bubble--visible")}}),u}(),theme.collapsibles=function(){var e=".collapsible-trigger",t=".collapsible-content",i=".collapsible-content__inner",n="hide",s="is-open",o="collapsible--auto-height",a=!1;function r(e){if(!a){a=!0;var n=e.currentTarget,r=n.classList.contains(s),d=n.getAttribute("aria-controls"),l=document.getElementById(d);if(d||(d=n.dataset.controls),d){if(!l)document.querySelectorAll('[data-id="'+d+'"]').length>0&&(l=n.parentNode.querySelector('[data-id="'+d+'"]'));if(l){var u=l.querySelector(i).offsetHeight,h=l.classList.contains(o),m=l.parentNode.closest(t),p=u;if(r&&h&&setTimeout((function(){c(l,u=0,r,h)}),0),r&&!h&&(u=0),n.setAttribute("aria-expanded",!r),r?n.classList.remove(s):n.classList.add(s),c(l,u,r,h),m)c(m,r?m.offsetHeight-p:u+m.offsetHeight,!1,!1);if(window.SPR){var f=l.querySelector(".spr-summary-actions-newreview");if(!f)return;f.off("click.collapsible"),f.on("click.collapsible",(function(){u=l.querySelector(i).offsetHeight,c(l,u,r,h)}))}}else a=!1}}}function c(e,t,i,o){if(e.classList.remove(n),theme.utils.prepareTransition(e,(function(){e.style.height=t+"px",i?e.classList.remove(s):e.classList.add(s)})),!i&&o){var r=e;window.setTimeout((function(){r.css("height","auto"),a=!1}),500)}else a=!1}return{init:function(t){(t||document).querySelectorAll(e).forEach(e=>{var t=e.classList.contains(s);e.setAttribute("aria-expanded",t),e.off("click.collapsible"),e.on("click.collapsible",r)})}}}(),theme.Disclosure=function(){var e="[data-disclosure-form]",t="[data-disclosure-list]",i="[data-disclosure-toggle]",n="[data-disclosure-input]",s="[data-disclosure-option]",o="disclosure-list--visible";function a(e){this.container=e,this._cacheSelectors(),this._setupListeners()}return a.prototype=Object.assign({},a.prototype,{_cacheSelectors:function(){this.cache={disclosureForm:this.container.closest(e),disclosureList:this.container.querySelector(t),disclosureToggle:this.container.querySelector(i),disclosureInput:this.container.querySelector(n),disclosureOptions:this.container.querySelectorAll(s)}},_setupListeners:function(){this.eventHandlers=this._setupEventHandlers(),this.cache.disclosureToggle.addEventListener("click",this.eventHandlers.toggleList),this.cache.disclosureOptions.forEach((function(e){e.addEventListener("click",this.eventHandlers.connectOptions)}),this),this.container.addEventListener("keyup",this.eventHandlers.onDisclosureKeyUp),this.cache.disclosureList.addEventListener("focusout",this.eventHandlers.onDisclosureListFocusOut),this.cache.disclosureToggle.addEventListener("focusout",this.eventHandlers.onDisclosureToggleFocusOut),document.body.addEventListener("click",this.eventHandlers.onBodyClick)},_setupEventHandlers:function(){return{connectOptions:this._connectOptions.bind(this),toggleList:this._toggleList.bind(this),onBodyClick:this._onBodyClick.bind(this),onDisclosureKeyUp:this._onDisclosureKeyUp.bind(this),onDisclosureListFocusOut:this._onDisclosureListFocusOut.bind(this),onDisclosureToggleFocusOut:this._onDisclosureToggleFocusOut.bind(this)}},_connectOptions:function(e){e.preventDefault(),this._submitForm(e.currentTarget.dataset.value)},_onDisclosureToggleFocusOut:function(e){!1===this.container.contains(e.relatedTarget)&&this._hideList()},_onDisclosureListFocusOut:function(e){var t=e.currentTarget.contains(e.relatedTarget);this.cache.disclosureList.classList.contains(o)&&!t&&this._hideList()},_onDisclosureKeyUp:function(e){27===e.which&&(this._hideList(),this.cache.disclosureToggle.focus())},_onBodyClick:function(e){var t=this.container.contains(e.target);this.cache.disclosureList.classList.contains(o)&&!t&&this._hideList()},_submitForm:function(e){this.cache.disclosureInput.value=e,this.cache.disclosureForm.submit()},_hideList:function(){this.cache.disclosureList.classList.remove(o),this.cache.disclosureToggle.setAttribute("aria-expanded",!1)},_toggleList:function(){var e="true"===this.cache.disclosureToggle.getAttribute("aria-expanded");this.cache.disclosureList.classList.toggle(o),this.cache.disclosureToggle.setAttribute("aria-expanded",!e)},destroy:function(){this.cache.disclosureToggle.removeEventListener("click",this.eventHandlers.toggleList),this.cache.disclosureOptions.forEach((function(e){e.removeEventListener("click",this.eventHandlers.connectOptions)}),this),this.container.removeEventListener("keyup",this.eventHandlers.onDisclosureKeyUp),this.cache.disclosureList.removeEventListener("focusout",this.eventHandlers.onDisclosureListFocusOut),this.cache.disclosureToggle.removeEventListener("focusout",this.eventHandlers.onDisclosureToggleFocusOut),document.body.removeEventListener("click",this.eventHandlers.onBodyClick)}}),a}(),theme.Drawers=function(){function e(e,t){this.config={id:e,close:".js-drawer-close",open:".js-drawer-open-"+t,openClass:"js-drawer-open",closingClass:"js-drawer-closing",activeDrawer:"drawer--is-open",namespace:".drawer-"+t},this.nodes={page:document.querySelector("#MainContent")},this.drawer=document.querySelector("#"+e),this.isOpen=!1,this.drawer&&this.init()}return e.prototype=Object.assign({},e.prototype,{init:function(){document.querySelectorAll(this.config.open).forEach(e=>{e.setAttribute("aria-expanded","false"),e.addEventListener("click",this.open.bind(this))}),this.drawer.querySelector(this.config.close).addEventListener("click",this.close.bind(this)),document.addEventListener("modalOpen",function(){this.close()}.bind(this))},open:function(e,t){e&&e.preventDefault(),this.isOpen||(e&&e.stopPropagation?(e.stopPropagation(),e.currentTarget.setAttribute("aria-expanded","true"),this.activeSource=e.currentTarget):t&&(t.setAttribute("aria-expanded","true"),this.activeSource=t),theme.utils.prepareTransition(this.drawer,function(){this.drawer.classList.add(this.config.activeDrawer)}.bind(this)),document.documentElement.classList.add(this.config.openClass),this.isOpen=!0,theme.a11y.trapFocus({container:this.drawer,namespace:"drawer_focus"}),document.dispatchEvent(new CustomEvent("drawerOpen")),document.dispatchEvent(new CustomEvent("drawerOpen."+this.config.id)),this.bindEvents())},close:function(e){if(this.isOpen){if(e)if(e.target.closest(".js-drawer-close"));else if(e.target.closest(".drawer"))return;document.activeElement.blur(),theme.utils.prepareTransition(this.drawer,function(){this.drawer.classList.remove(this.config.activeDrawer)}.bind(this)),document.documentElement.classList.remove(this.config.openClass),document.documentElement.classList.add(this.config.closingClass),window.setTimeout(function(){document.documentElement.classList.remove(this.config.closingClass),this.activeSource&&this.activeSource.getAttribute("aria-expanded")&&(this.activeSource.setAttribute("aria-expanded","false"),this.activeSource.focus())}.bind(this),500),this.isOpen=!1,theme.a11y.removeTrapFocus({container:this.drawer,namespace:"drawer_focus"}),this.unbindEvents()}},bindEvents:function(){window.on("click"+this.config.namespace,function(e){this.close(e)}.bind(this)),window.on("keyup"+this.config.namespace,function(e){27===e.keyCode&&this.close()}.bind(this)),theme.a11y.lockMobileScrolling(this.config.namespace,this.nodes.page)},unbindEvents:function(){window.off("click"+this.config.namespace),window.off("keyup"+this.config.namespace),theme.a11y.unlockMobileScrolling(this.config.namespace,this.nodes.page)}}),e}(),theme.Modals=function(){function e(e,t,i){var n={close:".js-modal-close",open:".js-modal-open-"+t,openClass:"modal--is-active",closingClass:"modal--is-closing",bodyOpenClass:"modal-open",bodyOpenSolidClass:"modal-open--solid",bodyClosingClass:"modal-closing",closeOffContentClick:!0};if(this.id=e,this.modal=document.getElementById(e),!this.modal)return!1;this.modalContent=this.modal.querySelector(".modal__inner"),this.config=Object.assign(n,i),this.modalIsOpen=!1,this.focusOnOpen=this.config.focusIdOnOpen?document.getElementById(this.config.focusIdOnOpen):this.modal,this.isSolid=this.config.solid,this.init()}return e.prototype.init=function(){document.querySelectorAll(this.config.open).forEach(e=>{e.setAttribute("aria-expanded","false"),e.addEventListener("click",this.open.bind(this))}),this.modal.querySelectorAll(this.config.close).forEach(e=>{e.addEventListener("click",this.close.bind(this))}),document.addEventListener("drawerOpen",function(){this.close()}.bind(this))},e.prototype.open=function(e){var t=!1;this.modalIsOpen||(e?e.preventDefault():t=!0,e&&e.stopPropagation&&(e.stopPropagation(),this.activeSource=e.currentTarget.setAttribute("aria-expanded","true")),this.modalIsOpen&&!t&&this.close(),this.modal.classList.add(this.config.openClass),document.documentElement.classList.add(this.config.bodyOpenClass),this.isSolid&&document.documentElement.classList.add(this.config.bodyOpenSolidClass),this.modalIsOpen=!0,theme.a11y.trapFocus({container:this.modal,elementToFocus:this.focusOnOpen,namespace:"modal_focus"}),document.dispatchEvent(new CustomEvent("modalOpen")),document.dispatchEvent(new CustomEvent("modalOpen."+this.id)),this.bindEvents())},e.prototype.close=function(e){if(this.modalIsOpen){if(e)if(e.target.closest(".js-modal-close"));else if(e.target.closest(".modal__inner"))return;document.activeElement.blur(),this.modal.classList.remove(this.config.openClass),this.modal.classList.add(this.config.closingClass),document.documentElement.classList.remove(this.config.bodyOpenClass),document.documentElement.classList.add(this.config.bodyClosingClass),window.setTimeout(function(){document.documentElement.classList.remove(this.config.bodyClosingClass),this.modal.classList.remove(this.config.closingClass),this.activeSource&&this.activeSource.getAttribute("aria-expanded")&&this.activeSource.setAttribute("aria-expanded","false").focus()}.bind(this),500),this.isSolid&&document.documentElement.classList.remove(this.config.bodyOpenSolidClass),this.modalIsOpen=!1,theme.a11y.removeTrapFocus({container:this.modal,namespace:"modal_focus"}),document.dispatchEvent(new CustomEvent("modalClose."+this.id)),this.unbindEvents()}},e.prototype.bindEvents=function(){window.on("keyup.modal",function(e){27===e.keyCode&&this.close()}.bind(this)),this.config.closeOffContentClick&&this.modal.on("click.modal",this.close.bind(this))},e.prototype.unbindEvents=function(){document.documentElement.off(".modal"),this.config.closeOffContentClick&&this.modal.off(".modal")},e}(),theme.parallaxSections={},theme.Parallax=function(){var e=!1;function t(e,t){this.isInit=!1,this.isVisible=!1,this.container=e,this.image=e.querySelector(".parallax-image"),this.namespace=t.namespace,this.desktopOnly=t.desktopOnly,this.container&&this.image&&(this.desktopOnly&&(document.addEventListener("matchSmall",function(){this.destroy()}.bind(this)),document.addEventListener("unmatchSmall",function(){this.init(!0)}.bind(this))),this.init(this.desktopOnly))}return t.prototype=Object.assign({},t.prototype,{init:function(e){(this.isInit&&this.destroy(),this.isInit=!0,e&&theme.config.bpSmall)||(this.setSizes(),this.scrollHandler(),new IntersectionObserver((e,t)=>{e.forEach(e=>{this.isVisible=e.isIntersecting,this.isVisible?window.on("scroll"+this.namespace,this.onScroll.bind(this)):window.off("scroll"+this.namespace)})},{rootMargin:"200px 0px 200px 0px"}).observe(this.container),window.on("resize"+this.namespace,theme.utils.debounce(250,this.setSizes.bind(this))),document.addEventListener("shopify:section:reorder",theme.utils.debounce(250,this.onReorder.bind(this))))},onScroll:function(){this.isVisible&&(window.SPR&&!e&&(this.setSizes(),e=!0),requestAnimationFrame(this.scrollHandler.bind(this)))},scrollHandler:function(){var e=.85*(window.scrollY-this.elTop);this.image.style.transform="translate3d(0, "+e+"px, 0)"},setSizes:function(){var e=this.container.getBoundingClientRect();this.elTop=e.top+window.scrollY},onReorder:function(){this.setSizes(),this.onScroll()},destroy:function(){this.image.style.transform="none",window.off("scroll"+this.namespace),window.off("resize"+this.namespace)}}),t}(),theme.AjaxProduct=function(){var e={loading:!1};function t(e,t){this.form=e;var i=t||".add-to-cart";this.form&&(this.addToCart=e.querySelector(i),this.form.addEventListener("submit",this.addItemFromForm.bind(this)))}return t.prototype=Object.assign({},t.prototype,{addItemFromForm:function(t,i){if(t.preventDefault(),!e.loading){this.addToCart.classList.add("btn--loading"),e.loading=!0;var n=theme.utils.serialize(this.form);fetch(theme.routes.cartAdd,{method:"POST",body:n,credentials:"same-origin",headers:{"Content-Type":"application/x-www-form-urlencoded","X-Requested-With":"XMLHttpRequest"}}).then(e=>e.json()).then(function(t){if(422===t.status)this.error(t);else{var i=t;this.success(i)}e.loading=!1,this.addToCart.classList.remove("btn--loading")}.bind(this))}},success:function(e){var t=this.form.querySelector(".errors");t&&t.remove(),document.dispatchEvent(new CustomEvent("ajaxProduct:added",{detail:{product:e,addToCartBtn:this.addToCart}}))},error:function(e){if(e.description){var t=this.form.querySelector(".errors");t&&t.remove();var i=document.createElement("div");i.classList.add("errors","text-center"),i.textContent=e.description,this.form.append(i),document.dispatchEvent(new CustomEvent("ajaxProduct:error",{detail:{errorMessage:e.description}}))}else console.warn(e)}}),t}(),theme.ProductMedia=function(){var e={},t={},i={},n="[data-product-single-media-group]",s="[data-shopify-xr]";function o(t){if(!t)if(window.ShopifyXR){for(var i in e)if(e.hasOwnProperty(i)){var n=e[i];if(n.loaded)continue;var s=document.querySelector("#ModelJson-"+i);window.ShopifyXR.addModels(JSON.parse(s.innerHTML)),n.loaded=!0}window.ShopifyXR.setupXRElements()}else document.addEventListener("shopify_xr_initialized",(function(){o()}))}function a(e){if(!e)for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];!n.modelViewerUi&&Shopify&&(n.modelViewerUi=new Shopify.ModelViewerUI(n.element)),r(n)}}function r(e){var t=i[e.sectionId];e.container.addEventListener("mediaVisible",(function(){t.element.setAttribute("data-shopify-model3d-id",e.modelId),theme.config.isTouch||e.modelViewerUi.play()})),e.container.addEventListener("mediaHidden",(function(){t.element.setAttribute("data-shopify-model3d-id",t.defaultId),e.modelViewerUi.pause()})),e.container.addEventListener("xrLaunch",(function(){e.modelViewerUi.pause()}))}return{init:function(r,c){e[c]={loaded:!1},r.forEach((function(e,o){var a=e.dataset.mediaId,r=e.querySelector("model-viewer"),d=r.dataset.modelId;if(0===o){var l=e.closest(n).querySelector(s);i[c]={element:l,defaultId:d}}t[a]={modelId:d,sectionId:c,container:e,element:r}})),window.Shopify.loadFeatures([{name:"shopify-xr",version:"1.0",onLoad:o},{name:"model-viewer-ui",version:"1.0",onLoad:a}]),theme.LibraryLoader.load("modelViewerUiStyles")},removeSectionModels:function(i){for(var n in t){if(t.hasOwnProperty(n))t[n].sectionId===i&&delete t[n]}delete e[i]}}}(),theme.QtySelector=function(){var e=".js-qty__num",t=".js-qty__adjust--plus",i=".js-qty__adjust--minus";function n(n,s){this.wrapper=n,this.plus=n.querySelector(t),this.minus=n.querySelector(i),this.input=n.querySelector(e),this.minValue=this.input.getAttribute("min")||1;var o={namespace:null,isCart:!1,key:this.input.dataset.id};this.options=Object.assign({},o,s),this.init()}return n.prototype=Object.assign({},n.prototype,{init:function(){this.plus.addEventListener("click",function(){var e=this._getQty();this._change(e+1)}.bind(this)),this.minus.addEventListener("click",function(){var e=this._getQty();this._change(e-1)}.bind(this)),this.input.addEventListener("change",function(e){this._change(this._getQty())}.bind(this))},_getQty:function(){var e=this.input.value;return(parseFloat(e)!=parseInt(e)||isNaN(e))&&(e=1),parseInt(e)},_change:function(e){e<=this.minValue&&(e=this.minValue),this.input.value=e,this.options.isCart&&document.dispatchEvent(new CustomEvent("cart:quantity"+this.options.namespace,{detail:[this.options.key,e,this.wrapper]}))}}),n}(),theme.initQuickShop=function(){var e=document.querySelectorAll(".grid-product");function t(e){var i=e.currentTarget;if(!theme.config.bpSmall){if(i.removeEventListener("mouseover",t),!i||!i.dataset.productId)return;var n=i.dataset.productId,s=i.dataset.productHandle,o=i.querySelector(".quick-product__btn");theme.preloadProductModal(s,n,o)}}e.length&&theme.settings.quickView&&e.forEach(e=>{e.addEventListener("mouseover",t)})},theme.preloadProductModal=function(e,t,i){var n=document.getElementById("QuickShopHolder-"+e),s=theme.routes.home+"/products/"+e+"?view=modal";s=s.replace("//","/"),fetch(s).then((function(e){return e.text()})).then((function(s){var o=(new DOMParser).parseFromString(s,"text/html").querySelector('.product-section[data-product-handle="'+e+'"]');if(n){n.append(o);var a="QuickShopModal-"+t,r="quick-modal-"+t;new theme.Modals(a,r),theme.sections.register("product",theme.Product,n),theme.collapsibles.init(),theme.videoModal(),i&&i.classList.remove("quick-product__btn--not-ready")}}))},theme.Slideshow=function(){var e="animate-out",t="is-paused",i="is-active",n=".slideshow__slide",s=".is-selected",o=".slideshow-wrapper",a=".slideshow__pause",r=".product__thumb-item:not(.hide)",c=".product__thumb-item:not(.hide) a",d=".product__thumb-arrow",l={adaptiveHeight:!1,autoPlay:!1,avoidReflow:!1,childNav:null,childNavScroller:null,childVertical:!1,fade:!1,initialIndex:0,pageDots:!1,pauseAutoPlayOnHover:!1,prevNextButtons:!1,rightToLeft:theme.config.rtl,setGallerySize:!0,wrapAround:!0};function u(e,t){if(this.el=e,this.args=Object.assign({},l,t),this.args.on={ready:this.init.bind(this),change:this.slideChange.bind(this),settle:this.afterChange.bind(this)},this.args.childNav&&(this.childNavEls=this.args.childNav.querySelectorAll(r),this.childNavLinks=this.args.childNav.querySelectorAll(c),this.arrows=this.args.childNav.querySelectorAll(d),this.childNavLinks.length&&this.initChildNav()),this.args.avoidReflow&&function(e){if(!e.id)return;var t=e.firstChild;for(;null!=t&&3==t.nodeType;)t=t.nextSibling;var i=document.createElement("style");i.innerHTML=`#${e.id} .flickity-viewport{height:${t.offsetHeight}px}`,document.head.appendChild(i)}(e),this.slideshow=new Flickity(e,this.args),this.args.autoPlay){var i=e.closest(o);this.pauseBtn=i.querySelector(a),this.pauseBtn&&this.pauseBtn.addEventListener("click",this._togglePause.bind(this))}window.on("resize",theme.utils.debounce(300,function(){this.resize()}.bind(this)))}return u.prototype=Object.assign({},u.prototype,{init:function(e){this.currentSlide=this.el.querySelector(s),this.args.callbacks&&this.args.callbacks.onInit&&"function"==typeof this.args.callbacks.onInit&&this.args.callbacks.onInit(),window.AOS&&AOS.refresh()},slideChange:function(t){this.args.fade&&this.currentSlide&&(this.currentSlide.classList.add(e),this.currentSlide.addEventListener("transitionend",function(){this.currentSlide.classList.remove(e)}.bind(this))),this.args.childNav&&this.childNavGoTo(t),this.args.callbacks&&this.args.callbacks.onChange&&"function"==typeof this.args.callbacks.onChange&&this.args.callbacks.onChange(t),this.arrows&&this.arrows.length&&(this.arrows[0].classList.toggle("hide",0===t),this.arrows[1].classList.toggle("hide",t===this.childNavLinks.length-1))},afterChange:function(t){this.args.fade&&this.el.querySelectorAll(n).forEach(t=>{t.classList.remove(e)}),this.currentSlide=this.el.querySelector(s),this.args.childNav&&this.childNavGoTo(this.slideshow.selectedIndex)},destroy:function(){this.slideshow.destroy()},_togglePause:function(){this.pauseBtn.classList.contains(t)?(this.pauseBtn.classList.remove(t),this.slideshow.playPlayer()):(this.pauseBtn.classList.add(t),this.slideshow.pausePlayer())},resize:function(){this.slideshow.resize()},play:function(){this.slideshow.playPlayer()},pause:function(){this.slideshow.pausePlayer()},goToSlide:function(e){this.slideshow.select(e)},setDraggable:function(e){this.slideshow.options.draggable=e,this.slideshow.updateDraggable()},initChildNav:function(){this.childNavLinks[this.args.initialIndex].classList.add("is-active"),this.childNavLinks.forEach((e,t)=>{e.setAttribute("data-index",t),e.addEventListener("click",function(e){e.preventDefault(),this.goToSlide(this.getChildIndex(e.currentTarget))}.bind(this)),e.addEventListener("focus",function(e){this.goToSlide(this.getChildIndex(e.currentTarget))}.bind(this)),e.addEventListener("keydown",function(e){13===e.keyCode&&this.goToSlide(this.getChildIndex(e.currentTarget))}.bind(this))}),this.arrows.length&&this.arrows.forEach(e=>{e.addEventListener("click",this.arrowClick.bind(this))})},getChildIndex:function(e){return parseInt(e.dataset.index)},childNavGoTo:function(e){this.childNavLinks.forEach(e=>{e.classList.remove(i)});var t=this.childNavLinks[e];if(t.classList.add(i),this.args.childVertical){var n=t.offsetTop;this.args.childNavScroller.scrollTop=n-100}else{var s=t.offsetLeft;this.args.childNavScroller.scrollLeft=s-100}},arrowClick:function(e){e.currentTarget.classList.contains("product__thumb-arrow--prev")?this.slideshow.previous():this.slideshow.next()}}),u}(),theme.VariantAvailability=function(){var e="disabled";function t(e){this.type=e.type,this.variantSelectors=e.variantSelectors,this.variantsObject=e.variantsObject,this.currentVariantObject=e.currentVariantObject,this.form=e.form,this.init()}return t.prototype=Object.assign({},t.prototype,{init:function(){this.variantSelectors.forEach(e=>{e.on("change",this.setAvailability.bind(this))}),this.setAvailability(null,this.currentVariantObject)},setAvailability:function(e,t){var i,n={option1:[],option2:[],option3:[]},s=null;if(e){var o=e.currentTarget,a=o.value,r=o.dataset.index;i=this.variantsObject.filter((function(e){return e[r]===a}))}else{var c=this.variantsObject.filter((function(e){return t.id!==e.id&&(t.option2===e.option2&&t.option3===e.option3||(t.option1===e.option1&&t.option3===e.option3||(t.option1===e.option1&&t.option2===e.option2||void 0)))})),d={variant:t};i=Object.assign({},d,c)}for(var l in this.form.querySelectorAll(".variant-input-wrap").forEach(t=>{var i=t.dataset.index;e&&i===r?s=r:this.disableVariantGroup(t)}),i)if(i.hasOwnProperty(l)){var u=i[l],h=u.option1,m=u.option2,p=u.option3,f=!1===u.available;h&&"option1"!==s&&n.option1.push({value:h,soldOut:f}),m&&"option2"!==s&&n.option2.push({value:m,soldOut:f}),p&&"option3"!==s&&n.option3.push({value:p,soldOut:f})}for(var[v,y]of Object.entries(n))this.manageOptionState(v,y)},manageOptionState:function(e,t){var i=this.form.querySelector('.variant-input-wrap[data-index="'+e+'"]');t.forEach(e=>{this.enableVariantOption(i,e)})},enableVariantOptionByValue:function(e,t){for(var i=this.form.querySelector('.variant-input-wrap[data-index="'+t+'"]'),n=0;n<e.length;n++)this.enableVariantOption(i,e[n])},enableVariantOption:function(t,i){var n=i.value.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g,"\\$1");if("dropdown"===this.type)t.querySelector('option[value="'+n+'"]').disabled=!1;else{var s=t.querySelector('.variant-input[data-value="'+n+'"]'),o=s.querySelector("input"),a=s.querySelector("label");o.classList.remove(e),a.classList.remove(e),i.soldOut&&(o.classList.add(e),a.classList.add(e))}},disableVariantGroup:function(t){"dropdown"===this.type?t.querySelectorAll("option").forEach(e=>{e.disabled=!0}):(t.querySelectorAll("input").forEach(t=>{t.classList.add(e)}),t.querySelectorAll("label").forEach(t=>{t.classList.add(e)}))}}),t}(),theme.videoModal=function(){var e,t='a[href*="youtube.com/watch"], a[href*="youtu.be/"]',i=".product-video-trigger--mp4",n=".product-video-mp4-sound",s=document.querySelectorAll(t),o=document.querySelectorAll(i);if(s.length||o.length){var a=document.getElementById("VideoHolder");s.length&&theme.LibraryLoader.load("youtubeSdk");var r=new theme.Modals("VideoModal","video-modal",{closeOffContentClick:!0,solid:!0});s.forEach(e=>{e.addEventListener("click",c)}),o.forEach(e=>{e.addEventListener("click",d)}),document.addEventListener("modalClose.VideoModal",(function(){e&&"function"==typeof e.destroy?e.destroy():u()}))}function c(t){if(theme.config.youTubeReady){t.preventDefault(),u(),r.open(t);var i,n,s=(i=t.currentTarget.getAttribute("href"),!(!(n=i.match(/^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/))||11!=n[7].length)&&n[7]);e=new theme.YouTube("VideoHolder",{videoId:s,style:"sound",events:{onReady:l}})}}function d(e){u();var t=e.currentTarget.parentNode.querySelector(n).cloneNode(!0);t.classList.remove("hide"),a.append(t),r.open(e),a.querySelector("video").play()}function l(e){e.target.unMute(),e.target.playVideo()}function u(){a.innerHTML=""}},theme.announcementBar=function(){var e,t,i={autoPlay:5e3,avoidReflow:!0,cellAlign:theme.config.rtl?"right":"left"};function n(){t=new theme.Slideshow(e,i)}function s(){t&&"function"==typeof t.destroy&&t.destroy()}return{init:function(){(e=document.getElementById("AnnouncementSlider"))&&(s(),1!==e.dataset.blockCount&&((theme.config.bpSmall||"true"===e.dataset.compact)&&n(),document.addEventListener("matchSmall",(function(){s(),n()})),document.addEventListener("unmatchSmall",(function(){s(),"true"===e.dataset.compact&&n()}))))},onBlockSelect:function(i){var n=e.querySelector("#AnnouncementSlide-"+i),s=parseInt(n.dataset.index);t&&"function"==typeof t.pause&&(t.goToSlide(s),t.pause())},onBlockDeselect:function(){t&&"function"==typeof t.play&&t.play()},unload:s}}(),theme.customerTemplates=function(){function e(){document.getElementById("RecoverPasswordForm").classList.toggle("hide"),document.getElementById("CustomerLoginForm").classList.toggle("hide")}"#recover"===window.location.hash&&e(),function(){var t=document.getElementById("RecoverPassword");t&&t.addEventListener("click",(function(t){t.preventDefault(),e()}));var i=document.getElementById("HideRecoverPasswordLink");i&&i.addEventListener("click",(function(t){t.preventDefault(),e()}))}(),function(){if(!document.querySelector(".reset-password-success"))return;document.getElementById("ResetSuccess").classList.remove("hide")}(),function(){var e=document.getElementById("AddressNewForm"),t=document.querySelectorAll(".js-address-form");if(!e||!t.length)return;setTimeout((function(){document.querySelectorAll(".js-address-country").forEach(e=>{var t=e.dataset.countryId,i=e.dataset.provinceId,n=e.dataset.provinceContainerId;new Shopify.CountryProvinceSelector(t,i,{hideElement:n})})}),1e3),document.querySelector(".address-new-toggle").addEventListener("click",(function(){e.classList.toggle("hide")})),document.querySelectorAll(".address-edit-toggle").forEach(e=>{e.addEventListener("click",(function(e){var t=e.currentTarget.dataset.formId;document.getElementById("EditAddress_"+t).classList.toggle("hide")}))}),document.querySelectorAll(".address-delete").forEach(e=>{e.addEventListener("click",(function(e){var t=e.currentTarget.dataset.formId,i=e.currentTarget.dataset.confirmMessage;confirm(i||"Are you sure you wish to delete this address?")&&Shopify&&Shopify.postLink("/account/addresses/"+t,{parameters:{_method:"delete"}})}))})}()},theme.CartDrawer=function(){var e="#CartDrawerForm";function t(){this.form=document.querySelector(e),this.drawer=new theme.Drawers("CartDrawer","cart"),this.init()}return t.prototype=Object.assign({},t.prototype,{init:function(){this.cartForm=new theme.CartForm(this.form),this.cartForm.buildCart(),document.addEventListener("ajaxProduct:added",function(e){this.cartForm.buildCart(),this.open()}.bind(this)),document.addEventListener("cart:open",this.open.bind(this)),document.addEventListener("cart:close",this.close.bind(this))},open:function(){this.drawer.open()},close:function(){this.drawer.close()}}),t}(),theme.headerNav=function(){var e,t,i="#HeaderWrapper",n="#SiteHeader",s=".js-search-header",o="#SearchClose",a=".site-header__search-container",r="#LogoContainer img",c=".megamenu",d=".site-nav__item",l=".site-nav__link",u=".site-nav__link--has-dropdown",h=".site-nav__dropdown-link--second-level",m="site-nav--has-dropdown",p="site-nav__deep-dropdown-trigger",f="is-focused",v={namespace:".siteNav",wrapperOverlayed:!1,overlayedClass:"is-light",overlayEnabledClass:"header-wrapper--sticky",stickyEnabled:!1,stickyActive:!1,stickyClass:"site-header--stuck",stickyHeaderWrapper:"StickyHeaderWrap",openTransitionClass:"site-header--opening",lastScroll:0};function y(){if(v.stickyEnabled){var e=t.offsetHeight;document.querySelector("#"+v.stickyHeaderWrapper).style.height=e+"px"}}function g(){v.stickyEnabled&&(v.forceStopSticky||(requestAnimationFrame(S),v.lastScroll=window.scrollY))}function S(){if(window.scrollY>250){if(v.stickyActive)return;v.stickyActive=!0,t.classList.add(v.stickyClass),v.wrapperOverlayed&&e.classList.remove(v.overlayedClass),setTimeout((function(){t.classList.add(v.openTransitionClass)}),100)}else{if(!v.stickyActive)return;v.stickyActive=!1,t.classList.remove(v.openTransitionClass),t.classList.remove(v.stickyClass),v.wrapperOverlayed&&e.classList.add(v.overlayedClass)}}function b(e){e.preventDefault(),e.stopImmediatePropagation();var t=document.querySelector(a);theme.utils.prepareTransition(t,function(){t.classList.add("is-active")}.bind(this)),document.documentElement.classList.add("js-drawer-open","js-drawer-open--search"),setTimeout((function(){theme.a11y.trapFocus({container:t,namespace:"header_search",elementToFocus:t.querySelector(".site-header__search-input")})}),100),theme.config.bpSmall&&v.stickyEnabled&&v.lastScroll<300&&window.scrollTo(0,0),theme.a11y.lockMobileScrolling(v.namespace),function(){window.on("keyup"+v.namespace,function(e){27===e.keyCode&&w()}.bind(this)),document.documentElement.on("click"+v.namespace,function(e){w(e)}.bind(this))}()}function w(e){if(e)for(var t=e.path||e.composedPath&&e.composedPath(),i=0;i<t.length;i++)if(t[i].classList){if(t[i].classList.contains("site-header__search-btn"))break;if(t[i].classList.contains("site-header__search-container"))return}document.activeElement.blur(),document.documentElement.classList.add("js-drawer-closing"),document.documentElement.classList.remove("js-drawer-open","js-drawer-open--search"),window.setTimeout(function(){document.documentElement.classList.remove("js-drawer-closing")}.bind(this),500);var n=document.querySelector(a);theme.utils.prepareTransition(n,function(){n.classList.remove("is-active")}.bind(this)),theme.a11y.removeTrapFocus({container:n,namespace:"header_search"}),theme.a11y.unlockMobileScrolling(v.namespace),window.off("keyup"+v.namespace),document.documentElement.off("click"+v.namespace)}function _(e){document.querySelectorAll(r).forEach(e=>{var t=e.clientWidth,i=e.closest(".header-item").clientWidth;t>i?e.style.maxWidth=i:e.removeAttribute("style")})}return{init:function(){var a;e=document.querySelector(i),t=document.querySelector(n),v.stickyEnabled="true"===t.dataset.sticky,v.stickyEnabled&&(v.wrapperOverlayed=e.classList.contains(v.overlayedClass),theme.config.stickyHeader=(a=0,t.querySelectorAll(c).forEach(e=>{var t=e.offsetHeight;t>a&&(a=t)}),!(window.innerHeight<a+120)),theme.config.stickyHeader?(v.forceStopSticky=!1,function(){v.lastScroll=0;var e=document.createElement("div");e.id=v.stickyHeaderWrapper,theme.utils.wrap(t,e),y(),window.on("resize"+v.namespace,theme.utils.debounce(50,y)),window.on("scroll"+v.namespace,theme.utils.throttle(20,g)),Shopify&&Shopify.designMode&&setTimeout((function(){y()}),250)}()):v.forceStopSticky=!0),theme.settings.overlayHeader="true"===t.dataset.overlay,theme.settings.overlayHeader&&Shopify&&Shopify.designMode&&document.body.classList.contains("template-collection")&&!document.querySelector(".collection-hero")&&this.disableOverlayHeader(),function(){var e=!1,t=!1,i=!1;theme.config.isTouch&&document.querySelectorAll(u).forEach(e=>{e.on("touchend"+v.namespace,(function(e){e.currentTarget.parentNode.classList.contains(f)?window.location.replace(e.currentTarget.getAttribute("href")):(e.preventDefault(),a(),s(e.currentTarget))}))});function n(i){e&&r(),t&&c(),s(i.currentTarget)}function s(t){var n=t.parentNode;if(n.classList.contains(m)&&(n.classList.add(f),e=!0),!theme.config.isTouch&&!i){var s=theme.config.isTouch?"touchend":"click";i=!0,document.documentElement.on(s+v.namespace,function(){a(),document.documentElement.off(s+v.namespace),i=!1}.bind(this))}}function o(e,i){var n=e.parentNode;(n.classList.contains(p)||i)&&(n.classList.add(f),t=!0)}function a(){r(),c()}function r(){document.querySelectorAll(d).forEach(e=>{e.classList.remove(f)})}function c(){document.querySelectorAll(h).forEach(e=>{e.parentNode.classList.remove(f)})}document.querySelectorAll(l).forEach(e=>{e.on("focusin"+v.namespace,n),e.on("mouseover"+v.namespace,n),e.on("mouseleave"+v.namespace,a)}),document.querySelectorAll(h).forEach(e=>{theme.config.isTouch&&e.on("touchend"+v.namespace,(function(e){var t=e.currentTarget.parentNode;t.classList.contains(p)?t.classList.contains(f)?window.location.replace(e.currentTarget.getAttribute("href")):(e.preventDefault(),c(),o(e.currentTarget)):window.location.replace(e.currentTarget.getAttribute("href"))})),e.on("focusin"+v.namespace,(function(e){c(),o(e.currentTarget,!0)}))})}(),document.querySelectorAll(s).forEach(e=>{e.addEventListener("click",b)}),document.querySelector(o).addEventListener("click",w),window.on("load"+v.namespace,_),window.on("resize"+v.namespace,theme.utils.debounce(150,_))},disableOverlayHeader:function(){e.classList.remove(v.overlayEnabledClass,v.overlayedClass),v.wrapperOverlayed=!1,theme.settings.overlayHeader=!1}}}(),window.onpageshow=function(e){e.persisted&&(document.body.classList.remove("unloading"),document.querySelectorAll(".cart__checkout").forEach(e=>{e.classList.remove("btn--loading")}))},theme.predictiveSearch=function(){var e,t="",i=!1,n="#HeaderSearchForm",s='input[type="search"]',o="#PredictiveWrapper",a="#PredictiveResults",r="[data-predictive-search-button]",c={},d={imageSize:"square"},l=38,u=40,h=9;function m(){c.wrapper.classList.add("hide"),c.results.innerHTML="",clearTimeout(e)}function p(){c.form.submit()}function f(e){e.preventDefault?e.preventDefault():e.returnValue=!1;var t={},i=new FormData(e.target);for(var n of i.keys())t[n]=i.get(n);t.q&&(t.q+="*");var s=y(t);return window.location.href="/search?"+s,!1}function v(n){n.keyCode!==l&&n.keyCode!==u&&n.keyCode!==h&&function(){var n=c.input.value;if(""===n)return void m();var s=function(e){if("string"!=typeof e)return null;return e.trim().replace(/\ /g,"-").toLowerCase()}(n);clearTimeout(e),e=setTimeout(function(){!function(e){if(i)return;if(t===e)return;t=e,i=!0;var n=y({q:e,"resources[type]":theme.settings.predictiveSearchType,"resources[limit]":4,"resources[options][unavailable_products]":"last","resources[options][fields]":"title,product_type,variants.title,vendor"});fetch("/search/suggest.json?"+n).then(e=>e.json()).then(e=>{i=!1;var t={},n=0;c.wrapper.classList.remove("hide");var s=Object.entries(e.resources.results);if(Object.keys(s).forEach((function(e){var i=s[e],o=i[0],a=i[1];switch(n+=a.length,o){case"products":t[o]=function(e){var t="",i=[];if(e.forEach(e=>{var t={title:e.title,url:e.url,image_responsive_url:theme.Images.lazyloadImagePath(e.image),image_aspect_ratio:e.featured_image.aspect_ratio};i.push(t)}),i.length){var n=theme.buildProductGridItem(i,"small--one-half medium-up--one-quarter",4,d.imageSize);t=`\n          <div data-type-products>\n            <div class="grid grid--uniform">\n              ${n}\n            </div>\n          </div>\n        `}return t}(a);break;case"collections":t[o]=function(e){var t="";if(e.length){var i=theme.buildCollectionItem(e);t=`\n          <div data-type-collections>\n            <p class="h6 predictive__label">${theme.strings.searchCollections}</p>\n            <ul class="no-bullets">\n              ${i}\n            </ul>\n          </div>\n        `}return t}(a);break;case"pages":t[o]=function(e){var t="";if(e.length){var i=theme.buildPageItem(e);t=`\n          <div data-type-pages>\n            <p class="h6 predictive__label">${theme.strings.searchPages}</p>\n            <ul class="no-bullets">\n              ${i}\n            </ul>\n          </div>\n        `}return t}(a);break;case"articles":t[o]=function(e){var t="";if(e.forEach(e=>{e.image&&(e.image=theme.Images.getSizedImageUrl(e.image,"200x200_crop_center"))}),e.length){var i=theme.buildArticleItem(e,d.imageSize);t=`\n          <div data-type-articles>\n            <p class="h6 predictive__label">${theme.strings.searchArticles}</p>\n            <div class="grid grid--uniform">\n              ${i}\n            </div>\n          </div>\n        `}return t}(a)}})),0!==n){var o=function(e){var t="";e.products&&""!==e.products&&(t+=e.products);e.collections&&""!==e.collections&&(t+=e.collections);e.pages&&""!==e.pages&&(t+=e.pages);e.articles&&""!==e.articles&&(t+=e.articles);return t}(t);c.results.innerHTML="",c.results.innerHTML=o}else m()})}(s)}.bind(this),500)}()}function y(e){return Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}return{init:function(){if(document.getElementById("shopify-features")&&!JSON.parse(document.getElementById("shopify-features").innerHTML).predictiveSearch)return;c.wrapper=document.querySelector(o),c.wrapper&&(d.imageSize=c.wrapper.dataset.imageSize,c.form=document.querySelector(n),c.form.setAttribute("autocomplete","off"),c.form.on("submit.predictive",f),c.input=c.form.querySelector(s),c.input.on("keyup.predictive",v),c.submit=c.wrapper.querySelector(r),c.submit.on("click.predictive",p),c.results=document.querySelector(a))}}}(),theme.buildProductGridItem=function(e,t,i,n){var s="";return e.forEach(e=>{var o=theme.buildProductImage(e,n),a=`\n        <div class="grid__item grid-product ${t} aos-animate" data-aos="row-of-${i}">\n          <div class="grid-product__content">\n            <a href="${e.url}" class="grid-product__link">\n              <div class="grid-product__image-mask">\n                ${o}\n              </div>\n              <div class="grid-product__meta">\n                <div class="grid-product__title">${e.title}</div>\n              </div>\n            </a>\n          </div>\n        </div>\n      `;s+=a}),s},theme.buildProductImage=function(e,t){var i=t||theme.settings.productImageSize,n="";if("natural"===i)n=`\n        <div class="image-wrap" style="height: 0; padding-bottom: ${e.image_aspect_ratio}%;">\n          <img class="grid-product__image lazyload"\n            data-src="${e.image_responsive_url}"\n            data-widths="[180, 360, 540, 720, 900]"\n            data-aspectratio="${e.image_aspect_ratio}"\n            data-sizes="auto"\n            alt="${e.title}">\n        </div>`;else{var s="lazyload";theme.settings.productImageCover||(s+=" grid__image-contain"),n=`\n        <div class="grid__image-ratio grid__image-ratio--${i}">\n          <img class="${s}"\n              data-src="${e.image_responsive_url}"\n              data-widths="[360, 540, 720, 900, 1080]"\n              data-aspectratio="${e.aspect_ratio}"\n              data-sizes="auto"\n              alt="${e.title}">\n        </div>\n      `}return n},theme.buildCollectionItem=function(e){var t="";return e.forEach(e=>{var i=`\n        <li>\n          <a href="${e.url}">\n            ${e.title}\n          </a>\n        </li>\n      `;t+=i}),t},theme.buildPageItem=function(e){var t="";return e.forEach(e=>{var i=`\n        <li>\n          <a href="${e.url}">\n            ${e.title}\n          </a>\n        </li>\n      `;t+=i}),t},theme.buildArticleItem=function(e,t){var i="";return e.forEach(e=>{var n=theme.buildPredictiveImage(e),s=`\n        <div class="grid__item grid-product small--one-half medium-up--one-quarter" data-aos="row-of-4">\n          <a href="${e.url}" class="grid-product__link grid-product__link--inline">\n            <div class="grid-product__image-mask">\n              <div\n                class="grid__image-ratio grid__image-ratio--object grid__image-ratio--${t}">\n                <div class="predictive__image-wrap">\n                  ${n}\n                </div>\n              </div>\n            </div>\n            <div class="grid-product__meta">\n              ${e.title}\n            </div>\n          </a>\n        </div>\n      `;i+=s}),i},theme.buildPredictiveImage=function(e){var t="";return e.image&&(t=`<img class="lazyload"\n            data-src="${e.image}"\n            data-widths="[360, 540, 720]"\n            data-sizes="auto">`),t},theme.Maps=function(){var e=14,t=null,i=[],n={},s='[data-section-type="map"]',o="[data-map]",a=".map-section__overlay";function r(e){this.container=e,this.sectionId=this.container.getAttribute("data-section-id"),this.namespace=".map-"+this.sectionId,this.map=e.querySelector(o),this.key=this.map.dataset.apiKey,n={addressNoResults:theme.strings.addressNoResults,addressQueryLimit:theme.strings.addressQueryLimit,addressError:theme.strings.addressError,authError:theme.strings.authError},this.key&&theme.initWhenVisible({element:this.container,callback:this.prepMapApi.bind(this),threshold:20})}return window.gm_authFailure=function(){Shopify.designMode&&(document.querySelectorAll(s).forEach(e=>{e.classList.add("map-section--load-error")}),document.querySelectorAll(o).forEach(e=>{e.parentNode.removeChild(e)}),window.mapError(theme.strings.authError))},window.mapError=function(e){var t=document.createElement("div");t.classList.add("map-section__error","errors","text-center"),t.innerHTML=e,document.querySelectorAll(a).forEach(e=>{e.parentNode.prepend(t)}),document.querySelectorAll(".map-section__link").forEach(e=>{e.classList.add("hide")})},r.prototype=Object.assign({},r.prototype,{prepMapApi:function(){if("loaded"===t)this.createMap();else if(i.push(this),"loading"!==t&&(t="loading",void 0===window.google||void 0===window.google.maps)){var e=document.createElement("script");e.onload=function(){t="loaded",i.forEach(e=>{e.createMap()})},e.src="https://maps.googleapis.com/maps/api/js?key="+this.key,document.head.appendChild(e)}},createMap:function(){var t=this.map;return function(e){var t=new google.maps.Geocoder;if(e){var i=e.dataset.addressSetting;return new Promise((e,n)=>{t.geocode({address:i},(function(t,i){i!==google.maps.GeocoderStatus.OK&&n(i),e(t)}))})}}(t).then(function(i){var n={zoom:e,backgroundColor:"none",center:i[0].geometry.location,draggable:!1,clickableIcons:!1,scrollwheel:!1,disableDoubleClickZoom:!0,disableDefaultUI:!0},s=this.map=new google.maps.Map(t,n),o=this.center=s.getCenter();new google.maps.Marker({map:s,position:s.getCenter()});google.maps.event.addDomListener(window,"resize",theme.utils.debounce(250,(function(){google.maps.event.trigger(s,"resize"),s.setCenter(o),t.removeAttribute("style")}))),Shopify.designMode&&window.AOS&&AOS.refreshHard()}.bind(this)).catch((function(e){var t;switch(e){case"ZERO_RESULTS":t=n.addressNoResults;break;case"OVER_QUERY_LIMIT":t=n.addressQueryLimit;break;case"REQUEST_DENIED":t=n.authError;break;default:t=n.addressError}Shopify.designMode&&window.mapError(t)}))},onUnload:function(){0!==this.map.length&&google&&google.maps&&google.maps.event&&google.maps.event.clearListeners(this.map,"resize")}}),r}(),theme.NewsletterPopup=function(){function e(e){this.container=e;var t=this.container.getAttribute("data-section-id");this.cookieName="newsletter-"+t,e&&"/challenge"!==window.location.pathname&&(this.data={secondsBeforeShow:e.dataset.delaySeconds,daysBeforeReappear:e.dataset.delayDays,cookie:Cookies.get(this.cookieName),testMode:e.dataset.testMode},this.modal=new theme.Modals("NewsletterPopup-"+t,"newsletter-popup-modal"),(e.querySelector(".errors")||e.querySelector(".note--success"))&&this.modal.open(),e.querySelector(".note--success")?this.closePopup(!0):(document.addEventListener("modalClose."+e.id,this.closePopup.bind(this)),this.data.cookie&&"true"!==this.data.testMode||this.initPopupDelay()))}return e.prototype=Object.assign({},e.prototype,{initPopupDelay:function(){Shopify&&Shopify.designMode||setTimeout(function(){this.modal.open()}.bind(this),1e3*this.data.secondsBeforeShow)},closePopup:function(e){if("true"!==this.data.testMode){var t=e?200:this.data.daysBeforeReappear;Cookies.set(this.cookieName,"opened",{path:"/",expires:t})}else Cookies.remove(this.cookieName,{path:"/"})},onLoad:function(){this.modal.open()},onSelect:function(){this.modal.open()},onDeselect:function(){this.modal.close()}}),e}(),theme.PasswordHeader=function(){function e(){this.init()}return e.prototype=Object.assign({},e.prototype,{init:function(){if(document.querySelector("#LoginModal")){var e=new theme.Modals("LoginModal","login-modal",{focusIdOnOpen:"password",solid:!0});document.querySelectorAll(".errors").length&&e.open()}}}),e}(),theme.Photoswipe=function(){var e=".js-photoswipe__zoom",t=".photoswipe__image",i=".flickity-viewport ",n=".is-selected";function s(e,t){this.container=e,this.sectionId=t,this.namespace=".photoswipe-"+this.sectionId,this.gallery,this.images,this.items,this.inSlideshow=!1,e&&"false"!==e.dataset.zoom&&("true"===e.dataset.hasSlideshow&&(this.inSlideshow=!0),this.init())}return s.prototype=Object.assign({},s.prototype,{init:function(){this.container.querySelectorAll(e).forEach(e=>{e.on("click"+this.namespace,this.triggerClick.bind(this))})},triggerClick:function(e){this.items=this.getImageData();var t=this.inSlideshow?this.container.querySelector(n):e.currentTarget,i=this.inSlideshow?this.getChildIndex(t):t.dataset.index;this.initGallery(this.items,i)},getChildIndex:function(e){for(var t=0;null!=(e=e.previousSibling);)t++;return t+1},getImageData:function(){this.images=this.inSlideshow?this.container.querySelectorAll(i+t):this.container.querySelectorAll(t);var e=[];return this.images.forEach(t=>{var i={msrc:t.currentSrc||t.src,src:t.getAttribute("data-photoswipe-src"),w:t.getAttribute("data-photoswipe-width"),h:t.getAttribute("data-photoswipe-height"),el:t,initialZoomLevel:.5};e.push(i)}),e},initGallery:function(e,t){var i=document.querySelectorAll(".pswp")[0],n={allowPanToNext:!1,captionEl:!1,closeOnScroll:!1,counterEl:!1,history:!1,index:t-1,pinchToClose:!1,preloaderEl:!1,scaleMode:"zoom",shareEl:!1,tapToToggleControls:!1,getThumbBoundsFn:function(t){var i=window.pageYOffset||document.documentElement.scrollTop,n=e[t].el.getBoundingClientRect();return{x:n.left,y:n.top+i,w:n.width}}};this.gallery=new PhotoSwipe(i,PhotoSwipeUI_Default,e,n),this.gallery.init(),this.gallery.listen("afterChange",this.afterChange.bind(this))},afterChange:function(){var e=this.gallery.getCurrentIndex();this.container.dispatchEvent(new CustomEvent("photoswipe:afterChange",{detail:{index:e}}))}}),s}(),theme.Recommendations=function(){var e={placeholder:".product-recommendations-placeholder",sectionClass:" .product-recommendations",productResults:".grid-product"};function t(t){this.container=t,this.sectionId=t.getAttribute("data-section-id"),this.url=t.dataset.url,e.recommendations="Recommendations-"+this.sectionId,theme.initWhenVisible({element:t,callback:this.init.bind(this),threshold:500})}return t.prototype=Object.assign({},t.prototype,{init:function(){var t=document.getElementById(e.recommendations);if(t&&"false"!==t.dataset.enable){var i=t.dataset.productId,n=t.dataset.limit,s=this.url+"?section_id=product-recommendations&limit="+n+"&product_id="+i;fetch(s).then((function(e){return e.text()})).then(function(i){var n=(new DOMParser).parseFromString(i,"text/html").querySelector(e.sectionClass),s=t.querySelector(e.placeholder);s&&(s.innerHTML="",n?(s.appendChild(n),theme.reinitProductGridItem(t),document.dispatchEvent(new CustomEvent("recommendations:loaded",{detail:{section:t}})),0===n.querySelectorAll(e.productResults).length&&this.container.classList.add("hide")):this.container.classList.add("hide"))}.bind(this))}}}),t}(),theme.SlideshowSection=function(){var e=".parallax-container";function t(e){this.container=e;var t=e.getAttribute("data-section-id");if(this.slideshow=e.querySelector("#Slideshow-"+t),this.namespace="."+t,this.initialIndex=0,this.slideshow){var i=e.parentElement;0===[].indexOf.call(i.parentElement.children,i)?this.init():theme.initWhenVisible({element:this.container,callback:this.init.bind(this)})}}return t.prototype=Object.assign({},t.prototype,{init:function(){var t=this.slideshow.querySelectorAll(".slideshow__slide");if(this.container.hasAttribute("data-immediate-load")?(this.slideshow.classList.remove("loading","loading--delayed"),this.slideshow.classList.add("loaded")):theme.loadImageSection(this.slideshow),t.length>1){var i={prevNextButtons:this.slideshow.hasAttribute("data-arrows"),pageDots:this.slideshow.hasAttribute("data-dots"),fade:!0,setGallerySize:!1,initialIndex:this.initialIndex,autoPlay:"true"===this.slideshow.dataset.autoplay&&parseInt(this.slideshow.dataset.speed)};this.flickity=new theme.Slideshow(this.slideshow,i)}else t[0].classList.add("is-selected");this.container.hasAttribute("data-parallax")&&this.container.querySelectorAll(e).forEach(function(e,t){new theme.Parallax(e,{namespace:this.namespace+"-parallax-"+t})}.bind(this))},forceReload:function(){this.onUnload(),this.init()},onUnload:function(){this.flickity&&"function"==typeof this.flickity.destroy&&this.flickity.destroy()},onDeselect:function(){this.flickity&&"function"==typeof this.flickity.play&&this.flickity.play()},onBlockSelect:function(e){var t=this.slideshow.querySelector(".slideshow__slide--"+e.detail.blockId),i=parseInt(t.dataset.index);this.flickity&&"function"==typeof this.flickity.pause?(this.flickity.goToSlide(i),this.flickity.pause()):(this.initialIndex=i,setTimeout(function(){this.flickity&&"function"==typeof this.flickity.pause&&this.flickity.pause()}.bind(this),1e3))},onBlockDeselect:function(){this.flickity&&"function"==typeof this.flickity.play&&this.flickity.args.autoPlay&&this.flickity.play()}}),t}(),theme.StoreAvailability=function(){var e=".js-drawer-open-availability",t=".js-modal-open-availability",i="[data-availability-product-title]";function n(e){this.container=e,this.baseUrl=e.dataset.baseUrl,this.productTitle=e.dataset.productName}return n.prototype=Object.assign({},n.prototype,{updateContent:function(n){var s=this.baseUrl+"/variants/"+n+"/?section_id=store-availability",o=this;fetch(s).then((function(e){return e.text()})).then((function(n){if(""!==n.trim()){o.container.innerHTML=n,o.container.innerHTML=o.container.firstElementChild.innerHTML,o.container.querySelector(e)&&(o.drawer=new theme.Drawers("StoreAvailabilityDrawer","availability")),o.container.querySelector(t)&&(o.modal=new theme.Modals("StoreAvailabilityModal","availability"));var s=o.container.querySelector(i);s&&(s.textContent=o.productTitle)}else this.container.innerHTML=""}))}}),n}(),theme.VideoSection=function(){var e=".video-parent-section";function t(e){this.container=e,this.sectionId=e.getAttribute("data-section-id"),this.namespace=".video-"+this.sectionId,this.videoObject,theme.initWhenVisible({element:this.container,callback:this.init.bind(this),threshold:500})}return t.prototype=Object.assign({},t.prototype,{init:function(){var e=this.container.querySelector(".video-div");if(e)switch(e.dataset.type){case"youtube":var t=e.dataset.videoId;this.initYoutubeVideo(t);break;case"vimeo":t=e.dataset.videoId;this.initVimeoVideo(t);break;case"mp4":this.initMp4Video()}},initYoutubeVideo:function(t){this.videoObject=new theme.YouTube("YouTubeVideo-"+this.sectionId,{videoId:t,videoParent:e})},initVimeoVideo:function(t){this.videoObject=new theme.VimeoPlayer("Vimeo-"+this.sectionId,t,{videoParent:e})},initMp4Video:function(){var t="Mp4Video-"+this.sectionId,i=document.getElementById(t),n=i.closest(e);if(i){n.classList.add("loaded");var s=document.querySelector("#"+t).play();void 0!==s&&s.then((function(){})).catch((function(){i.setAttribute("controls",""),n.classList.add("video-interactable")}))}},onUnload:function(e){e.target.id.replace("shopify-section-","");this.videoObject&&"function"==typeof this.videoObject.destroy&&this.videoObject.destroy()}}),t}(),theme.BackgroundImage=function(){var e=".parallax-container";function t(e){if(this.container=e,e){var t=e.getAttribute("data-section-id");this.namespace="."+t,theme.initWhenVisible({element:this.container,callback:this.init.bind(this)})}}return t.prototype=Object.assign({},t.prototype,{init:function(){if(this.container.dataset&&this.container.dataset.parallax){var t=this.container.querySelector(e),i={namespace:this.namespace+"-parallax",desktopOnly:!0};theme.parallaxSections[this.namespace]=new theme.Parallax(t,i)}},onUnload:function(e){this.container&&(theme.parallaxSections[this.namespace]&&"function"==typeof theme.parallaxSections[this.namespace].destroy&&theme.parallaxSections[this.namespace].destroy(),delete theme.parallaxSections[this.namespace])}}),t}(),theme.Blog=function(){function e(e){this.tagFilters()}return e.prototype=Object.assign({},e.prototype,{tagFilters:function(){var e=document.getElementById("BlogTagFilter");e&&e.addEventListener("change",(function(){location.href=e.value}))}}),e}(),theme.CollectionHeader=function(){var e=!1;function t(t){this.namespace=".collection-header";var i=t.querySelector(".collection-hero");if(i){if(e&&this.checkIfNeedReload(),theme.loadImageSection(i),t.dataset&&t.dataset.parallax){var n=t.querySelector(".parallax-container"),s={namespace:this.namespace+"-parallax"};theme.parallaxSections[this.namespace]=new theme.Parallax(n,s)}}else theme.settings.overlayHeader&&theme.headerNav.disableOverlayHeader();e=!0}return t.prototype=Object.assign({},t.prototype,{checkIfNeedReload:function(){Shopify.designMode&&(theme.settings.overlayHeader&&(document.querySelector(".header-wrapper").classList.contains("header-wrapper--overlay")||location.reload()))},onUnload:function(){theme.parallaxSections[this.namespace]&&(theme.parallaxSections[this.namespace].destroy(),delete theme.parallaxSections[this.namespace])}}),t}(),theme.CollectionSidebar=function(){var e=!1;function t(e){this.container=e,this.init()}return t.prototype=Object.assign({},t.prototype,{init:function(){this.onUnload(),e="drawer"===this.container.dataset.style,theme.FilterDrawer=new theme.Drawers("FilterDrawer","collection-filters",!0)},forceReload:function(){this.init()},onSelect:function(){if(theme.FilterDrawer){if(!e)return void theme.FilterDrawer.close();(e||theme.config.bpSmall)&&theme.FilterDrawer.open()}},onDeselect:function(){theme.FilterDrawer&&theme.FilterDrawer.close()},onUnload:function(){theme.FilterDrawer&&theme.FilterDrawer.close()}}),t}(),theme.Collection=function(){var e=!1,t="#SortBy",i=".grid-product__color-image",n=".color-swatch--with-image",s=".collection-grid__wrapper",o="#CollectionSidebar",a=".tag-list--active-tags",r=".tag-list a",c=".collection-filter",d={combineTags:!1},l="tag--active",u="tag--remove";function h(e){this.container=e,this.sectionId=e.getAttribute("data-section-id"),this.namespace=".collection-"+this.sectionId,this.init()}return h.prototype=Object.assign({},h.prototype,{init:function(){this.initSort(),this.colorSwatchHovering(),this.initFilters(),theme.sections.reinit("collection-sidebar")},initSort:function(){this.sortSelect=document.querySelector(t),this.sortSelect&&(this.defaultSort=this.getDefaultSortValue(),this.sortSelect.on("change"+this.namespace,this.onSortChange.bind(this)),this.initParams())},initParams:function(){if(this.queryParams={},location.search.length)for(var e,t=location.search.substr(1).split("&"),i=0;i<t.length;i++)(e=t[i].split("=")).length>1&&(this.queryParams[decodeURIComponent(e[0])]=decodeURIComponent(e[1]))},getSortValue:function(){return this.sortSelect.value||this.defaultSort},getDefaultSortValue:function(){return this.sortSelect.getAttribute("data-default-sortby")},onSortChange:function(){this.queryParams.sort_by=this.getSortValue(),this.queryParams.page&&delete this.queryParams.page,window.location.search=new URLSearchParams(Object.entries(this.queryParams))},colorSwatchHovering:function(){this.container.querySelectorAll(i).length&&this.container.querySelectorAll(n).forEach(e=>{e.addEventListener("mouseenter",(function(){var t=e.dataset.variantId,i=e.dataset.variantImage,n=document.querySelector(".grid-product__color-image--"+t);n.style.backgroundImage="url("+i+")",n.classList.add("is-active")})),e.addEventListener("mouseleave",(function(){var t=e.dataset.variantId;document.querySelector(".grid-product__color-image--"+t).classList.remove("is-active")}))})},initFilters:function(){document.querySelectorAll(r).length&&(window.addEventListener("popstate",function(e){e&&this.getNewCollectionContent(location.href)}.bind(this)),theme.config.stickyHeader&&(this.setFilterStickyPosition(),window.on("resize",theme.utils.debounce(500,this.setFilterStickyPosition))),d.combineTags="true"==document.querySelector(o).getAttribute("data-combine-tags"),document.querySelectorAll(r).forEach(e=>{e.addEventListener("click",this.tagClick.bind(this))}))},tagClick:function(t){var i=t.currentTarget;if(theme.FilterDrawer&&theme.FilterDrawer.close(),!i.classList.contains("no-ajax")&&(t.preventDefault(),!e)){e=!0;var n=i.parentNode,o=i.href;if(d.combineTags)if(n.classList.contains(l))n.classList.remove(l);else if(n.classList.add(l),i.closest("li").classList.contains(u))n.remove();else{var c=document.createElement("li"),h=document.createElement("a");c.classList.add("tag","tag--remove"),h.classList.add("btn","btn--small"),h.innerText=i.innerText,c.appendChild(h),document.querySelectorAll(a).forEach(e=>{e.appendChild(c)})}else document.querySelectorAll(r).forEach(e=>{e.parentNode.classList.remove(l)}),n.classList.add(l);this.updateScroll(!0),history.pushState({},"",o),document.querySelector(s).classList.add("unload"),this.getNewCollectionContent(o)}},getNewCollectionContent:function(t){t=-1===t.indexOf("?")?t+"?view=ajax":t+"&view=ajax";var i=document.getElementById("CollectionAjaxResult");fetch(t).then((function(e){return e.text()})).then(function(t){var n=(new DOMParser).parseFromString(t,"text/html").getElementById("CollectionAjaxContent");i.innerHTML="",i.append(n),theme.sections.reinit("collection-template"),this.updateScroll(!1),theme.reinitProductGridItem(),e=!1}.bind(this))},updateScroll:function(e){var t;(t=theme.config.bpSmall?document.querySelector("[data-scroll-to]").offsetTop-60:document.getElementById("CollectionAjaxResult").offsetTop+1,theme.config.stickyHeader)&&(t-=document.querySelector(".site-header").offsetHeight);e?window.scrollTo({top:t,behavior:"smooth"}):window.scrollTo({top:t})},setFilterStickyPosition:function(){var e=document.querySelector(".site-header").offsetHeight;document.querySelector(c).style.top=e+10+"px";var t=document.querySelector(".grid__item--sidebar");t&&(t.style.top=e+10+"px")},forceReload:function(){this.init()}}),h}(),theme.FooterSection=function(){var e="[data-disclosure-locale]",t="[data-disclosure-currency]";function i(e){this.container=e,this.container=e,this.localeDisclosure=null,this.currencyDisclosure=null,this.init()}return i.prototype=Object.assign({},i.prototype,{init:function(){var i=this.container.querySelector(e),n=this.container.querySelector(t);i&&(this.localeDisclosure=new theme.Disclosure(i)),n&&(this.currencyDisclosure=new theme.Disclosure(n));var s=document.querySelector(".footer__newsletter-input");s&&s.addEventListener("keyup",(function(){s.classList.add("footer__newsletter-input--active")})),theme.collapsibles.init(this.container)},onUnload:function(){this.localeDisclosure&&this.localeDisclosure.destroy(),this.currencyDisclosure&&this.currencyDisclosure.destroy()}}),i}(),theme.HeaderSection=function(){var e="[data-disclosure-locale]",t="[data-disclosure-currency]";function i(e){this.container=e,this.sectionId=this.container.getAttribute("data-section-id"),this.init()}return i.prototype=Object.assign({},i.prototype,{init:function(){Shopify&&Shopify.designMode&&(theme.sections.reinit("slideshow-section"),setTimeout((function(){window.dispatchEvent(new Event("resize"))}),500)),this.initDrawers(),this.initDisclosures(),theme.headerNav.init(),theme.announcementBar.init()},initDisclosures:function(){var i=this.container.querySelector(e),n=this.container.querySelector(t);i&&(this.localeDisclosure=new theme.Disclosure(i)),n&&(this.currencyDisclosure=new theme.Disclosure(n))},initDrawers:function(){theme.NavDrawer=new theme.Drawers("NavDrawer","nav"),"drawer"===theme.settings.cartType&&(document.body.classList.contains("template-cart")||new theme.CartDrawer),theme.collapsibles.init(document.getElementById("NavDrawer"))},onBlockSelect:function(e){theme.announcementBar.onBlockSelect(e.detail.blockId)},onBlockDeselect:function(){theme.announcementBar.onBlockDeselect()},onUnload:function(){theme.NavDrawer.close(),theme.announcementBar.unload(),this.localeDisclosure&&this.localeDisclosure.destroy(),this.currencyDisclosure&&this.currencyDisclosure.destroy()}}),i}(),theme.Product=function(){var e={},t="on-sale",i="disabled",n="is-modal",s="hide",o=".product__video",a=".product__video-wrapper",r=".product-main-slide",c=".is-selected",d=".starting-slide";function l(e){this.container=e;var t=this.sectionId=e.getAttribute("data-section-id");this.inModal="true"===e.dataset.modal,this.modal,this.settings={enableHistoryState:e.dataset.history||!1,namespace:".product-"+t,inventory:e.dataset.inventory||!1,incomingInventory:e.dataset.incomingInventory||!1,modalInit:!1,hasImages:!0,imageSetName:null,imageSetIndex:null,currentImageSet:null,imageSize:"620x",currentSlideIndex:0,videoLooping:e.dataset.videoLooping},this.inModal&&(this.settings.enableHistoryState=!1,this.settings.namespace=".product-"+t+"-modal",this.modal=document.getElementById("QuickShopModal-"+t)),this.selectors={variantsJson:"VariantsJson-"+t,currentVariantJson:"CurrentVariantJson-"+t,form:"#AddToCartForm-"+t,media:"[data-product-media-type-model]",closeMedia:".product-single__close-media",photoThumbs:".product__thumb-"+t,thumbSlider:"#ProductThumbs-"+t,thumbScroller:".product__thumbs--scroller",mainSlider:"#ProductPhotos-"+t,imageContainer:"[data-product-images]",productImageMain:".product-image-main--"+t,priceWrapper:".product__price-wrap-"+t,price:"#ProductPrice-"+t,comparePrice:"#ComparePrice-"+t,savePrice:"#SavePrice-"+t,priceA11y:"#PriceA11y-"+t,comparePriceA11y:"#ComparePriceA11y-"+t,unitWrapper:".product__unit-price-wrapper--"+t,unitPrice:".product__unit-price--"+t,unitPriceBaseUnit:".product__unit-base--"+t,sku:"Sku-"+t,inventory:"ProductInventory-"+t,incomingInventory:"ProductIncomingInventory-"+t,addToCart:"AddToCart-"+t,addToCartText:"AddToCartText-"+t,originalSelectorId:"#ProductSelect-"+t,singleOptionSelector:".variant__input-"+t,variantColorSwatch:".variant__input--color-swatch-"+t,modalFormHolder:"#ProductFormHolder-"+t,availabilityContainer:"#StoreAvailabilityHolder-"+t},this.cache={form:e.querySelector(this.selectors.form),mainSlider:e.querySelector(this.selectors.mainSlider),thumbSlider:e.querySelector(this.selectors.thumbSlider),thumbScroller:e.querySelector(this.selectors.thumbScroller),productImageMain:e.querySelector(this.selectors.productImageMain),priceWrapper:e.querySelector(this.selectors.priceWrapper),comparePriceA11y:e.querySelector(this.selectors.comparePriceA11y),comparePrice:e.querySelector(this.selectors.comparePrice),price:e.querySelector(this.selectors.price),savePrice:e.querySelector(this.selectors.savePrice),priceA11y:e.querySelector(this.selectors.priceA11y)},this.firstProductImage=this.cache.mainSlider.querySelector("img"),this.firstProductImage||(this.settings.hasImages=!1);var i=this.cache.mainSlider.querySelector("[data-set-name]");i&&(this.settings.imageSetName=i.dataset.setName),this.init()}return l.prototype=Object.assign({},l.prototype,{init:function(){this.inModal&&(this.container.classList.add(n),document.addEventListener("modalOpen.QuickShopModal-"+this.sectionId,this.openModalProduct.bind(this)),document.addEventListener("modalClose.QuickShopModal-"+this.sectionId,this.closeModalProduct.bind(this))),this.inModal||(this.formSetup(),this.productSetup(),this.videoSetup(),this.initProductSlider(),this.customMediaListners(),this.addIdToRecentlyViewed())},formSetup:function(){this.initQtySelector(),this.initAjaxProductForm(),this.availabilitySetup(),this.initVariants(),this.settings.imageSetName&&this.updateImageSet()},availabilitySetup:function(){var e=this.container.querySelector(this.selectors.availabilityContainer);e&&(this.storeAvailability=new theme.StoreAvailability(e))},productSetup:function(){this.setImageSizes(),this.initImageZoom(),this.initModelViewerLibraries(),this.initShopifyXrLaunch()},setImageSizes:function(){if(this.settings.hasImages){var e=this.firstProductImage.currentSrc;e&&(this.settings.imageSize=theme.Images.imageSize(e))}},addIdToRecentlyViewed:function(){var e=this.container.getAttribute("data-product-handle"),t=this.container.getAttribute("data-product-url"),i=this.container.getAttribute("data-aspect-ratio"),n=this.container.getAttribute("data-img-url");theme.recentlyViewed.recent.hasOwnProperty(e)&&delete theme.recentlyViewed.recent[e],theme.recentlyViewed.recent[e]={url:t,aspectRatio:i,featuredImage:n},theme.config.hasLocalStorage&&window.localStorage.setItem("theme-recent",JSON.stringify(theme.recentlyViewed.recent))},initVariants:function(){var e=document.getElementById(this.selectors.variantsJson);if(e){this.variantsObject=JSON.parse(e.innerHTML);var t={container:this.container,enableHistoryState:this.settings.enableHistoryState,singleOptionSelector:this.selectors.singleOptionSelector,originalSelectorId:this.selectors.originalSelectorId,variants:this.variantsObject},i=this.container.querySelectorAll(this.selectors.variantColorSwatch);if(i.length&&i.forEach(e=>{e.addEventListener("change",function(t){var i=e.dataset.colorName,n=e.dataset.colorIndex;this.updateColorName(i,n)}.bind(this))}),this.variants=new theme.Variants(t),this.storeAvailability){var n=this.variants.currentVariant?this.variants.currentVariant.id:this.variants.variants[0].id;this.storeAvailability.updateContent(n),this.container.on("variantChange"+this.settings.namespace,this.updateAvailability.bind(this))}if(this.container.on("variantChange"+this.settings.namespace,this.updateCartButton.bind(this)),this.container.on("variantImageChange"+this.settings.namespace,this.updateVariantImage.bind(this)),this.container.on("variantPriceChange"+this.settings.namespace,this.updatePrice.bind(this)),this.container.on("variantUnitPriceChange"+this.settings.namespace,this.updateUnitPrice.bind(this)),document.getElementById(this.selectors.sku)&&this.container.on("variantSKUChange"+this.settings.namespace,this.updateSku.bind(this)),(this.settings.inventory||this.settings.incomingInventory)&&this.container.on("variantChange"+this.settings.namespace,this.updateInventory.bind(this)),theme.settings.dynamicVariantsEnable){var s=document.getElementById(this.selectors.currentVariantJson);s&&new theme.VariantAvailability({type:theme.settings.dynamicVariantType,variantSelectors:this.cache.form.querySelectorAll(this.selectors.singleOptionSelector),variantsObject:this.variantsObject,currentVariantObject:JSON.parse(s.innerHTML),form:this.cache.form})}this.settings.imageSetName&&(this.settings.imageSetIndex=this.cache.form.querySelector('.variant-input-wrap[data-handle="'+this.settings.imageSetName+'"]').dataset.index,this.container.on("variantChange"+this.settings.namespace,this.updateImageSet.bind(this)))}},initQtySelector:function(){this.container.querySelectorAll(".js-qty__wrapper").forEach(e=>{new theme.QtySelector(e,{namespace:".product"})})},initAjaxProductForm:function(){"drawer"===theme.settings.cartType&&new theme.AjaxProduct(this.cache.form)},updateColorName:function(e,t){this.container.querySelector("#VariantColorLabel-"+this.sectionId+"-"+t).textContent=e},updateCartButton:function(e){var t=e.detail.variant,n=document.getElementById(this.selectors.addToCart),s=document.getElementById(this.selectors.addToCartText);if(t)if(t.available){n.classList.remove(i),n.disabled=!1;var o=s.dataset.defaultText;s.textContent=o}else n.classList.add(i),n.disabled=!0,s.textContent=theme.strings.soldOut;else n.classList.add(i),n.disabled=!0,s.textContent=theme.strings.unavailable},updatePrice:function(e){var i=e.detail.variant;if(i)if(this.cache.price.innerHTML=theme.Currency.formatMoney(i.price,theme.settings.moneyFormat),i.compare_at_price>i.price){this.cache.comparePrice.innerHTML=theme.Currency.formatMoney(i.compare_at_price,theme.settings.moneyFormat),this.cache.priceWrapper.classList.remove(s),this.cache.price.classList.add(t),this.cache.comparePriceA11y.setAttribute("aria-hidden","false"),this.cache.priceA11y.setAttribute("aria-hidden","false");var n=i.compare_at_price-i.price;n="percent"==theme.settings.saveType?Math.round(100*n/i.compare_at_price)+"%":theme.Currency.formatMoney(n,theme.settings.moneyFormat),this.cache.savePrice.classList.remove(s),this.cache.savePrice.innerHTML=theme.strings.savePrice.replace("[saved_amount]",n)}else this.cache.priceWrapper&&this.cache.priceWrapper.classList.add(s),this.cache.savePrice.classList.add(s),this.cache.price.classList.remove(t),this.cache.comparePriceA11y&&this.cache.comparePriceA11y.setAttribute("aria-hidden","true"),this.cache.priceA11y.setAttribute("aria-hidden","true")},updateUnitPrice:function(e){var t=e.detail.variant;t&&t.unit_price?(this.container.querySelector(this.selectors.unitPrice).innerHTML=theme.Currency.formatMoney(t.unit_price,theme.settings.moneyFormat),this.container.querySelector(this.selectors.unitPriceBaseUnit).innerHTML=theme.Currency.getBaseUnit(t),this.container.querySelector(this.selectors.unitWrapper).classList.remove(s)):this.container.querySelector(this.selectors.unitWrapper).classList.add(s)},imageSetArguments:function(e){if(e=e||(this.variants?this.variants.currentVariant:null)){var t=this.settings.currentImageSet=this.getImageSetName(e[this.settings.imageSetIndex]),i=this.settings.imageSetName+"_"+t;return this.settings.currentSlideIndex=0,{cellSelector:'[data-group="'+i+'"]',imageSet:i,initialIndex:this.settings.currentSlideIndex}}},updateImageSet:function(e){var t=e?e.detail.variant:this.variants?this.variants.currentVariant:null;if(t){var i=this.getImageSetName(t[this.settings.imageSetIndex]);this.settings.currentImageSet!==i&&this.initProductSlider(t)}},updateImageSetThumbs:function(e){this.cache.thumbSlider.querySelectorAll(".product__thumb-item").forEach(t=>{t.classList.toggle(s,t.dataset.group!==e)})},getImageSetName:function(e){return e.toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/-$/,"").replace(/^-/,"")},updateSku:function(e){var t=e.detail.variant,i="";t&&(t.sku&&(i=t.sku),document.getElementById(this.selectors.sku).textContent=i)},updateInventory:function(e){var t=e.detail.variant;if(!t||!t.inventory_management||"continue"===t.inventory_policy)return this.toggleInventoryQuantity(!1),void this.toggleIncomingInventory(!1);if("shopify"===t.inventory_management&&window.inventories&&window.inventories[this.sectionId]){var i=window.inventories[this.sectionId][t.id],n=i.quantity,s=!0,o=!1;(n<=0||n>theme.settings.inventoryThreshold)&&(s=!1),this.toggleInventoryQuantity(s,n),!s&&"true"===i.incoming&&n<=theme.settings.inventoryThreshold&&(o=!0),this.toggleIncomingInventory(o,t.available,i.next_incoming_date)}},updateAvailability:function(e){var t=e.detail.variant;t&&this.storeAvailability.updateContent(t.id)},toggleInventoryQuantity:function(e,t){this.settings.inventory||(e=!1);var i=document.getElementById(this.selectors.inventory);e?(i.classList.remove(s),i.textContent=theme.strings.stockLabel.replace("[count]",t)):i.classList.add(s)},toggleIncomingInventory:function(e,t,i){this.settings.incomingInventory||(e=!1);var n=document.getElementById(this.selectors.incomingInventory);if(n)if(e){var o=t?theme.strings.willNotShipUntil.replace("[date]",i):theme.strings.willBeInStockAfter.replace("[date]",i);i||(o=theme.strings.waitingForStock),n.classList.remove(s),n.textContent=o}else n.classList.add(s)},videoSetup:function(){var e=this.cache.mainSlider.querySelectorAll(o);if(!e.length)return!1;e.forEach(e=>{var t=e.dataset.videoType;"youtube"===t?this.initYoutubeVideo(e):"mp4"===t&&this.initMp4Video(e)})},initYoutubeVideo:function(t){e[t.id]=new theme.YouTube(t.id,{videoId:t.dataset.youtubeId,videoParent:a,autoplay:!1,style:t.dataset.videoStyle,loop:t.dataset.videoLoop,events:{onReady:this.youtubePlayerReady.bind(this),onStateChange:this.youtubePlayerStateChange.bind(this)}})},youtubePlayerReady:function(t){var i=t.target.getIframe().id;if(e[i]){var n=e[i],s=n.videoPlayer;"sound"!==n.options.style&&s.mute(),n.parent.classList.remove("loading"),n.parent.classList.add("loaded"),this._isFirstSlide(i)&&"sound"!==n.options.style&&s.playVideo()}},_isFirstSlide:function(e){return this.cache.mainSlider.querySelector(d+" #"+e)},youtubePlayerStateChange:function(t){var i=t.target.getIframe().id,n=e[i];switch(t.data){case-1:n.attemptedToPlay&&n.parent.classList.add("video-interactable");break;case 0:n&&"true"===n.options.loop&&n.videoPlayer.playVideo();break;case 3:n.attemptedToPlay=!0}},initMp4Video:function(t){e[t.id]={id:t.id,type:"mp4"},this._isFirstSlide(t.id)&&this.playMp4Video(t.id)},stopVideos:function(){for(var[t,i]of Object.entries(e))i.videoPlayer?"function"==typeof i.videoPlayer.stopVideo&&i.videoPlayer.stopVideo():"mp4"===i.type&&this.stopMp4Video(i.id)},_getVideoType:function(e){return e.getAttribute("data-video-type")},_getVideoDivId:function(e){return e.id},playMp4Video:function(e){var t=this.container.querySelector("#"+e),i=t.play();void 0!==i&&i.then((function(){})).catch((function(e){t.setAttribute("controls",""),t.closest(a).setAttribute("data-video-style","unmuted")}))},stopMp4Video:function(e){var t=this.container.querySelector("#"+e);t&&"function"==typeof t.pause&&t.pause()},initImageZoom:function(){var e=this.container.querySelector(this.selectors.imageContainer);if(e){new theme.Photoswipe(e,this.sectionId);e.addEventListener("photoswipe:afterChange",function(e){this.flickity&&this.flickity.goToSlide(e.detail.index)}.bind(this))}},getThumbIndex:function(e){return e.dataset.index},updateVariantImage:function(e){var t=e.detail.variant,i=(theme.Images.getSizedImageUrl(t.featured_media.preview_image.src,this.settings.imageSize),this.container.querySelector('.product__thumb[data-id="'+t.featured_media.id+'"]')),n=this.getThumbIndex(i);void 0!==n&&this.flickity&&this.flickity.goToSlide(n)},initProductSlider:function(e){if(this.cache.mainSlider.querySelectorAll(r).length<=1){var t=this.cache.mainSlider.querySelector(r);t&&t.classList.add("is-selected")}else{if(this.flickity&&"function"==typeof this.flickity.destroy&&this.flickity.destroy(),!e){var i=this.cache.mainSlider.querySelector(d);this.settings.currentSlideIndex=this._slideIndex(i)}var n={adaptiveHeight:!0,avoidReflow:!0,initialIndex:this.settings.currentSlideIndex,childNav:this.cache.thumbSlider,childNavScroller:this.cache.thumbScroller,childVertical:"beside"===this.cache.thumbSlider.dataset.position,pageDots:!0,wrapAround:!0,callbacks:{onChange:this.onSlideChange.bind(this)}};if(this.settings.imageSetName){var s=this.imageSetArguments(e);n=Object.assign({},n,s),this.updateImageSetThumbs(n.imageSet)}this.flickity=new theme.Slideshow(this.cache.mainSlider,n)}},onSlideChange:function(e){if(this.flickity){var t=this.cache.mainSlider.querySelector('.product-main-slide[data-index="'+this.settings.currentSlideIndex+'"]'),i=this.cache.mainSlider.querySelector('.product-main-slide[data-index="'+e+'"]');t.setAttribute("tabindex","-1"),i.setAttribute("tabindex",0),this.stopMediaOnSlide(t),this.prepMediaOnSlide(i),this.settings.currentSlideIndex=e}},stopMediaOnSlide(t){var i=t.querySelector(o);if(i){var n=this._getVideoType(i),s=this._getVideoDivId(i);if("youtube"===n){if(e[s].videoPlayer)return void e[s].videoPlayer.stopVideo()}else if("mp4"===n)return void this.stopMp4Video(s)}var a=t.querySelector(this.selectors.media);a&&a.dispatchEvent(new CustomEvent("mediaHidden",{bubbles:!0,cancelable:!0}))},prepMediaOnSlide(t){var i=t.querySelector(o);if(i){var n=this._getVideoType(i),s=this._getVideoDivId(i);if("youtube"===n){if(e[s].videoPlayer&&"sound"!==e[s].options.style)return void e[s].videoPlayer.playVideo()}else"mp4"===n&&this.playMp4Video(s)}var a=t.querySelector(this.selectors.media);a&&(a.dispatchEvent(new CustomEvent("mediaVisible",{bubbles:!0,cancelable:!0})),t.querySelector(".shopify-model-viewer-ui__button").setAttribute("tabindex",0),t.querySelector(".product-single__close-media").setAttribute("tabindex",0))},_slideIndex:function(e){return e.getAttribute("data-index")},openModalProduct:function(){var e=!1;if(this.settings.modalInit)e=!0;else{var t=this.container.querySelector(this.selectors.modalFormHolder),i=t.dataset.url;"preorder"!==t.dataset.template&&(i+="?view=ajax"),fetch(i).then((function(e){return e.text()})).then(function(e){var i=(new DOMParser).parseFromString(e,"text/html");this.cache.form=i.querySelector("#AddToCartForm-"+this.sectionId),t.innerHTML="",t.append(this.cache.form),t.classList.add("product-form-holder--loaded"),this.formSetup(),Shopify&&Shopify.PaymentButton&&Shopify.PaymentButton.init(),document.dispatchEvent(new CustomEvent("quickview:loaded",{detail:{productId:this.sectionId}}))}.bind(this)),this.productSetup(),this.videoSetup(),this.updateModalProductInventory(),this.settings.imageSetName?this.variants?this.initProductSlider():document.addEventListener("quickview:loaded",function(e){e.detail.productId===this.sectionId&&this.initProductSlider()}.bind(this)):this.initProductSlider(),this.customMediaListners(),this.addIdToRecentlyViewed(),this.settings.modalInit=!0}AOS.refreshHard(),document.dispatchEvent(new CustomEvent("quickview:open",{detail:{initialized:e,productId:this.sectionId}}))},updateModalProductInventory:function(){window.inventories=window.inventories||{},this.container.querySelectorAll(".js-product-inventory-data").forEach(e=>{var t=e.dataset.sectionId;window.inventories[t]={},e.querySelectorAll(".js-variant-inventory-data").forEach(e=>{window.inventories[t][e.dataset.id]={quantity:e.dataset.quantity,incoming:e.dataset.incoming,next_incoming_date:e.dataset.date}})})},closeModalProduct:function(){this.stopVideos()},initModelViewerLibraries:function(){var e=this.container.querySelectorAll(this.selectors.media);e.length<1||theme.ProductMedia.init(e,this.sectionId)},initShopifyXrLaunch:function(){document.addEventListener("shopify_xr_launch",function(){this.container.querySelector(this.selectors.productMediaWrapper+":not(."+self.classes.hidden+")").dispatchEvent(new CustomEvent("xrLaunch",{bubbles:!0,cancelable:!0}))}.bind(this))},customMediaListners:function(){document.querySelectorAll(this.selectors.closeMedia).forEach(e=>{e.addEventListener("click",function(){var e=this.cache.mainSlider.querySelector(c).querySelector(this.selectors.media);e&&e.dispatchEvent(new CustomEvent("mediaHidden",{bubbles:!0,cancelable:!0}))}.bind(this))});var e=this.container.querySelector("model-viewer");e&&(e.addEventListener("shopify_model_viewer_ui_toggle_play",function(e){this.mediaLoaded(e)}.bind(this)),e.addEventListener("shopify_model_viewer_ui_toggle_pause",function(e){this.mediaUnloaded(e)}.bind(this)))},mediaLoaded:function(e){this.container.querySelectorAll(this.selectors.closeMedia).forEach(e=>{e.classList.remove(s)}),this.flickity&&this.flickity.setDraggable(!1)},mediaUnloaded:function(e){this.container.querySelectorAll(this.selectors.closeMedia).forEach(e=>{e.classList.add(s)}),this.flickity&&this.flickity.setDraggable(!0)},onUnload:function(){theme.ProductMedia.removeSectionModels(this.sectionId),this.flickity&&"function"==typeof this.flickity.destroy&&this.flickity.destroy()}}),l}(),theme.RecentlyViewed=function(){var e=!1;function t(e){e&&(this.container=e,this.sectionId=this.container.getAttribute("data-section-id"),this.namespace=".recently-viewed"+this.sectionId,this.gridItemWidth=this.container.getAttribute("data-grid-item-class"),this.rowOf=this.container.getAttribute("data-row-of"),theme.initWhenVisible({element:this.container,callback:this.init.bind(this),threshold:600}))}return t.prototype=Object.assign({},t.prototype,{init:function(){if(!e)if(e=!0,0!==Object.keys(theme.recentlyViewed.recent).length||theme.recentlyViewed.recent.constructor!==Object){this.outputContainer=document.getElementById("RecentlyViewed-"+this.sectionId),this.handle=this.container.getAttribute("data-product-handle");var t=[];Object.keys(theme.recentlyViewed.recent).forEach(function(e){"undefined"!==e&&t.push(this.getProductInfo(e))}.bind(this)),Promise.all(t).then(function(e){this.setupOutput(e),this.captureProductDetails(e)}.bind(this))}else this.container.classList.add("hide")},getProductInfo:function(e){return new Promise((function(t,i){theme.recentlyViewed.productInfo.hasOwnProperty(e)?t(theme.recentlyViewed.productInfo[e]):fetch("/products/"+e+".js").then((function(e){return e.text()})).then((function(e){t(e)}))}))},setupOutput:function(e){var t=[],i=this.container.getAttribute("data-recent-count");if(Object.keys(e).forEach(function(i){if(e[i]){var n=JSON.parse(e[i]);if(n.handle!==this.handle&&void 0!==n.handle){n.url=theme.recentlyViewed.recent[n.handle]?theme.recentlyViewed.recent[n.handle].url:n.url,n.image_responsive_url=theme.recentlyViewed.recent[n.handle].featuredImage,n.image_aspect_ratio=theme.recentlyViewed.recent[n.handle].aspectRatio;var s=n.variants[0];if(s&&s.unit_price){var o="";s.unit_price_measurement&&(1!=s.unit_price_measurement.reference_value&&(o+=s.unit_price_measurement.reference_value+" "),o+=s.unit_price_measurement.reference_unit),n.unit_price=theme.Currency.formatMoney(s.unit_price),""!=o&&(n.unit_price+="/"+o)}t.unshift(n)}}}.bind(this)),0!==t.length){var n=theme.buildProductGridItem(t.slice(0,i),this.gridItemWidth,this.rowOf);this.outputContainer.innerHTML=n,AOS&&AOS.refreshHard()}else this.container.classList.add("hide")},captureProductDetails:function(e){for(var t=0;t<e.length;t++){var i=e[t];theme.recentlyViewed.productInfo[i.handle]=i}theme.config.hasSessionStorage&&sessionStorage.setItem("recent-products",JSON.stringify(theme.recentlyViewed.productInfo))},onUnload:function(){e=!1}}),t}(),theme.Testimonials=function(){var e={adaptiveHeight:!0,avoidReflow:!0,pageDots:!0,prevNextButtons:!1};function t(e){this.container=e,this.timeout;var t=e.getAttribute("data-section-id");this.slideshow=e.querySelector("#Testimonials-"+t),this.namespace=".testimonial-"+t,this.slideshow&&theme.initWhenVisible({element:this.container,callback:this.init.bind(this),threshold:600})}return t.prototype=Object.assign({},t.prototype,{init:function(){this.slideshow.dataset.count<=3&&(e.wrapAround=!1),this.flickity=new theme.Slideshow(this.slideshow,e),this.slideshow.dataset.count>2&&(this.timeout=setTimeout(function(){this.flickity.goToSlide(1)}.bind(this),1e3))},onUnload:function(){this.flickity&&"function"==typeof this.flickity.destroy&&this.flickity.destroy()},onDeselect:function(){this.flickity&&"function"==typeof this.flickity.play&&this.flickity.play()},onBlockSelect:function(e){var t=this.slideshow.querySelector(".testimonials-slide--"+e.detail.blockId),i=parseInt(t.dataset.index);clearTimeout(this.timeout),this.flickity&&"function"==typeof this.flickity.pause&&(this.flickity.goToSlide(i),this.flickity.pause())},onBlockDeselect:function(){this.flickity&&"function"==typeof this.flickity.play&&this.flickity.play()}}),t}(),theme.isStorageSupported=function(e){if(window.self!==window.top)return!1;var t;"session"===e&&(t=window.sessionStorage),"local"===e&&(t=window.localStorage);try{return t.setItem("test","1"),t.removeItem("test"),!0}catch(e){return!1}},theme.reinitProductGridItem=function(e){AOS&&AOS.refreshHard(),theme.initQuickShop(),window.SPR&&(SPR.initDomEls(),SPR.loadBadges()),theme.collapsibles.init()},theme.config.hasSessionStorage=theme.isStorageSupported("session"),theme.config.hasLocalStorage=theme.isStorageSupported("local"),AOS.init({easing:"ease-out-quad",once:!0,offset:60,disableMutationObserver:!0}),theme.config.hasLocalStorage&&(theme.recentlyViewed.localStorage=window.localStorage.getItem("theme-recent"),theme.recentlyViewed.localStorage&&(theme.recentlyViewed.recent=JSON.parse(theme.recentlyViewed.localStorage))),theme.recentlyViewed.productInfo=theme.config.hasSessionStorage&&sessionStorage["recent-products"]?JSON.parse(sessionStorage["recent-products"]):{},theme.config.bpSmall=matchMedia(theme.config.mediaQuerySmall).matches,matchMedia(theme.config.mediaQuerySmall).addListener((function(e){e.matches?(theme.config.bpSmall=!0,document.dispatchEvent(new CustomEvent("matchSmall"))):(theme.config.bpSmall=!1,document.dispatchEvent(new CustomEvent("unmatchSmall")))})),theme.initGlobals=function(){theme.collapsibles.init(),theme.videoModal()},r=function(){if(theme.sections=new theme.Sections,theme.sections.register("header",theme.HeaderSection),theme.sections.register("product",theme.Product),theme.sections.register("blog",theme.Blog),theme.sections.register("password-header",theme.PasswordHeader),theme.sections.register("photoswipe",theme.Photoswipe),theme.sections.register("product-recommendations",theme.Recommendations),theme.sections.register("slideshow-section",theme.SlideshowSection),theme.sections.register("background-image",theme.BackgroundImage),theme.sections.register("testimonials",theme.Testimonials),theme.sections.register("video-section",theme.VideoSection),theme.sections.register("map",theme.Maps),theme.sections.register("footer-section",theme.FooterSection),theme.sections.register("store-availability",theme.StoreAvailability),theme.sections.register("recently-viewed",theme.RecentlyViewed),theme.sections.register("newsletter-popup",theme.NewsletterPopup),theme.sections.register("collection-header",theme.CollectionHeader),theme.sections.register("collection-sidebar",theme.CollectionSidebar),theme.sections.register("collection-template",theme.Collection),theme.initGlobals(),theme.initQuickShop(),theme.rteInit(),document.body.classList.contains("template-cart")){var e=document.getElementById("CartPageForm");e&&new theme.CartForm(e)}theme.settings.predictiveSearch&&theme.predictiveSearch.init(),theme.settings.isCustomerTemplate&&theme.customerTemplates(),document.dispatchEvent(new CustomEvent("page:loaded"))},"loading"!=document.readyState?r():document.addEventListener("DOMContentLoaded",r)}();

window.theme = window.theme || {};
window.Shopify = window.Shopify || {};

theme.config = {
  bpSmall: false,
  hasSessionStorage: true,
  hasLocalStorage: true,
  mediaQuerySmall: 'screen and (max-width: '+ 769 +'px)',
  youTubeReady: false,
  vimeoReady: false,
  vimeoLoading: false,
  isTouch: ('ontouchstart' in window) || window.DocumentTouch && window.document instanceof DocumentTouch || window.navigator.maxTouchPoints || window.navigator.msMaxTouchPoints ? true : false,
  stickyHeader: false,
  rtl: document.documentElement.getAttribute('dir') == 'rtl' ? true : false
};

if (theme.config.isTouch) {
  document.documentElement.className += ' supports-touch';
}

if (console && console.log) {
  console.log('Impulse theme ('+theme.settings.themeVersion+') by ARCHÎžTYPE | Learn more at https://archetypethemes.co');
}

theme.recentlyViewed = {
  recent: {}, // will store handle+url of recent products
  productInfo: {} // will store product data to reduce API calls
};

window.lazySizesConfig = window.lazySizesConfig || {};
lazySizesConfig.expFactor = 4;

(function(){
  'use strict';

  theme.delegate = {
    on: function(event, callback, options){
      if( !this.namespaces ) // save the namespaces on the DOM element itself
        this.namespaces = {};
  
      this.namespaces[event] = callback;
      options = options || false;
  
      this.addEventListener(event.split('.')[0], callback, options);
      return this;
    },
    off: function(event) {
      if (!this.namespaces) { return }
      this.removeEventListener(event.split('.')[0], this.namespaces[event]);
      delete this.namespaces[event];
      return this;
    }
  };
  
  // Extend the DOM with these above custom methods
  window.on = Element.prototype.on = theme.delegate.on;
  window.off = Element.prototype.off = theme.delegate.off;
  
  theme.utils = {
    defaultTo: function(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value
    },
  
    wrap: function(el, wrapper) {
      el.parentNode.insertBefore(wrapper, el);
      wrapper.appendChild(el);
    },
  
    debounce: function(wait, callback, immediate) {
      var timeout;
      return function() {
        var context = this, args = arguments;
        var later = function() {
          timeout = null;
          if (!immediate) callback.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) callback.apply(context, args);
      }
    },
  
    throttle: function(limit, callback) {
      var waiting = false;
      return function () {
        if (!waiting) {
          callback.apply(this, arguments);
          waiting = true;
          setTimeout(function () {
            waiting = false;
          }, limit);
        }
      }
    },
  
    prepareTransition: function(el, callback) {
      el.addEventListener('transitionend', removeClass);
  
      function removeClass(evt) {
        el.classList.remove('is-transitioning');
        el.removeEventListener('transitionend', removeClass);
      }
  
      el.classList.add('is-transitioning');
      el.offsetWidth; // check offsetWidth to force the style rendering
  
      if (typeof callback === 'function') {
        callback();
      }
    },
  
    // _.compact from lodash
    // Creates an array with all falsey values removed. The values `false`, `null`,
    // `0`, `""`, `undefined`, and `NaN` are falsey.
    // _.compact([0, 1, false, 2, '', 3]);
    // => [1, 2, 3]
    compact: function(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];
  
      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    },
  
    serialize: function(form) {
      var arr = [];
      Array.prototype.slice.call(form.elements).forEach(function(field) {
        if (
          !field.name ||
          field.disabled ||
          ['file', 'reset', 'submit', 'button'].indexOf(field.type) > -1
        )
          return;
        if (field.type === 'select-multiple') {
          Array.prototype.slice.call(field.options).forEach(function(option) {
            if (!option.selected) return;
            arr.push(
              encodeURIComponent(field.name) +
                '=' +
                encodeURIComponent(option.value)
            );
          });
          return;
        }
        if (['checkbox', 'radio'].indexOf(field.type) > -1 && !field.checked)
          return;
        arr.push(
          encodeURIComponent(field.name) + '=' + encodeURIComponent(field.value)
        );
      });
      return arr.join('&');
    }
  };
  
  theme.a11y = {
    trapFocus: function(options) {
      var eventsName = {
        focusin: options.namespace ? 'focusin.' + options.namespace : 'focusin',
        focusout: options.namespace
          ? 'focusout.' + options.namespace
          : 'focusout',
        keydown: options.namespace
          ? 'keydown.' + options.namespace
          : 'keydown.handleFocus'
      };
  
      // Get every possible visible focusable element
      var focusableEls = options.container.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])');
      var elArray = [].slice.call(focusableEls);
      var focusableElements = elArray.filter(el => el.offsetParent !== null);
  
      var firstFocusable = focusableElements[0];
      var lastFocusable = focusableElements[focusableElements.length - 1];
  
      if (!options.elementToFocus) {
        options.elementToFocus = options.container;
      }
  
      options.container.setAttribute('tabindex', '-1');
      options.elementToFocus.focus();
  
      document.documentElement.off('focusin');
      document.documentElement.on(eventsName.focusout, function() {
        document.documentElement.off(eventsName.keydown);
      });
  
      document.documentElement.on(eventsName.focusin, function(evt) {
        if (evt.target !== lastFocusable && evt.target !== firstFocusable) return;
  
        document.documentElement.on(eventsName.keydown, function(evt) {
          _manageFocus(evt);
        });
      });
  
      function _manageFocus(evt) {
        if (evt.keyCode !== 9) return;
        /**
         * On the first focusable element and tab backward,
         * focus the last element
         */
        if (evt.target === firstFocusable && evt.shiftKey) {
          evt.preventDefault();
          lastFocusable.focus();
        }
      }
    },
    removeTrapFocus: function(options) {
      var eventName = options.namespace
        ? 'focusin.' + options.namespace
        : 'focusin';
  
      if (options.container) {
        options.container.removeAttribute('tabindex');
      }
  
      document.documentElement.off(eventName);
    },
  
    lockMobileScrolling: function(namespace, element) {
      var el = element ? element : document.documentElement;
      document.documentElement.classList.add('lock-scroll');
      el.on('touchmove' + namespace, function() {
        return true;
      });
    },
  
    unlockMobileScrolling: function(namespace, element) {
      document.documentElement.classList.remove('lock-scroll');
      var el = element ? element : document.documentElement;
      el.off('touchmove' + namespace);
    }
  };
  
  // Add class when tab key starts being used to show outlines
  document.documentElement.on('keyup.tab', function(evt) {
    if (evt.keyCode === 9) {
      document.documentElement.classList.add('tab-outline');
      document.documentElement.off('keyup.tab');
    }
  });
  
  /**
   * Currency Helpers
   * -----------------------------------------------------------------------------
   * A collection of useful functions that help with currency formatting
   *
   * Current contents
   * - formatMoney - Takes an amount in cents and returns it as a formatted dollar value.
   *   - When theme.settings.superScriptPrice is enabled, format cents in <sup> tag
   * - getBaseUnit - Splits unit price apart to get value + unit
   *
   */
  
  theme.Currency = (function() {
    var moneyFormat = '${{amount}}';
    var superScript = theme && theme.settings && theme.settings.superScriptPrice;
  
    function formatMoney(cents, format) {
      if (!format) {
        format = theme.settings.moneyFormat;
      }
  
      if (typeof cents === 'string') {
        cents = cents.replace('.', '');
      }
      var value = '';
      var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
      var formatString = (format || moneyFormat);
  
      function formatWithDelimiters(number, precision, thousands, decimal) {
        precision = theme.utils.defaultTo(precision, 2);
        thousands = theme.utils.defaultTo(thousands, ',');
        decimal = theme.utils.defaultTo(decimal, '.');
  
        if (isNaN(number) || number == null) {
          return 0;
        }
  
        number = (number / 100.0).toFixed(precision);
  
        var parts = number.split('.');
        var dollarsAmount = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
        var centsAmount = parts[1] ? (decimal + parts[1]) : '';
  
        return dollarsAmount + centsAmount;
      }
  
      switch (formatString.match(placeholderRegex)[1]) {
        case 'amount':
          value = formatWithDelimiters(cents, 2);
  
          if (superScript && value && value.includes('.')) {
            value = value.replace('.', '<sup>') + '</sup>';
          }
  
          break;
        case 'amount_no_decimals':
          value = formatWithDelimiters(cents, 0);
          break;
        case 'amount_with_comma_separator':
          value = formatWithDelimiters(cents, 2, '.', ',');
  
          if (superScript && value && value.includes('.')) {
            value = value.replace(',', '<sup>') + '</sup>';
          }
  
          break;
        case 'amount_no_decimals_with_comma_separator':
          value = formatWithDelimiters(cents, 0, '.', ',');
          break;
        case 'amount_no_decimals_with_space_separator':
          value = formatWithDelimiters(cents, 0, ' ');
          break;
      }
  
      return formatString.replace(placeholderRegex, value);
    }
  
    function getBaseUnit(variant) {
      if (!variant) {
        return;
      }
  
      if (!variant.unit_price_measurement || !variant.unit_price_measurement.reference_value) {
        return;
      }
  
      return variant.unit_price_measurement.reference_value === 1
        ? variant.unit_price_measurement.reference_unit
        : variant.unit_price_measurement.reference_value +
            variant.unit_price_measurement.reference_unit;
    }
  
    return {
      formatMoney: formatMoney,
      getBaseUnit: getBaseUnit
    }
  })();
  
  theme.Images = (function() {
  
    /**
     * Find the Shopify image attribute size
     */
    function imageSize(src) {
      if (!src) {
        return '620x'; // default based on theme
      }
  
      var match = src.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);
  
      if (match !== null) {
        return match[1];
      } else {
        return null;
      }
    }
  
    /**
     * Adds a Shopify size attribute to a URL
     */
    function getSizedImageUrl(src, size) {
      if (!src) {
        return src;
      }
  
      if (size == null) {
        return src;
      }
  
      if (size === 'master') {
        return this.removeProtocol(src);
      }
  
      var match = src.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);
  
      if (match != null) {
        var prefix = src.split(match[0]);
        var suffix = match[0];
  
        return this.removeProtocol(prefix[0] + '_' + size + suffix);
      }
  
      return null;
    }
  
    function removeProtocol(path) {
      return path.replace(/http(s)?:/, '');
    }
  
    function lazyloadImagePath(string) {
      var image;
  
      if (string !== null) {
        image = string.replace(/(\.[^.]*)$/, "_{width}x$1");
      }
  
      return image;
    }
  
    return {
      imageSize: imageSize,
      getSizedImageUrl: getSizedImageUrl,
      removeProtocol: removeProtocol,
      lazyloadImagePath: lazyloadImagePath
    };
  })();
  
  theme.loadImageSection = function(container) {
    // Wait until images inside container have lazyloaded class
    function setAsLoaded() {
      container.classList.remove('loading', 'loading--delayed');
      container.classList.add('loaded');
    }
  
    function checkForLazyloadedImage() {
      return container.querySelector('.lazyloaded');
    }
  
    // If it has SVGs it's in the onboarding state so set as loaded
    if (container.querySelector('svg')) {
      setAsLoaded();
      return;
    };
  
    if (checkForLazyloadedImage()) {
      setAsLoaded();
      return;
    }
  
    var interval = setInterval(function() {
      if (checkForLazyloadedImage()) {
        clearInterval(interval);
        setAsLoaded();
      }
    }, 80);
  };
  
  // Init section function when it's visible, then disable observer
  theme.initWhenVisible = function(options) {
    var threshold = options.threshold ? options.threshold : 0;
  
    var observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          if (typeof options.callback === 'function') {
            options.callback();
            observer.unobserve(entry.target);
          }
        }
      });
    }, {rootMargin: '0px 0px '+ threshold +'px 0px'});
  
    observer.observe(options.element);
  };
  
  theme.LibraryLoader = (function() {
    var types = {
      link: 'link',
      script: 'script'
    };
  
    var status = {
      requested: 'requested',
      loaded: 'loaded'
    };
  
    var cloudCdn = 'https://cdn.shopify.com/shopifycloud/';
  
    var libraries = {
      youtubeSdk: {
        tagId: 'youtube-sdk',
        src: 'https://www.youtube.com/iframe_api',
        type: types.script
      },
      vimeo: {
        tagId: 'vimeo-api',
        src: 'https://player.vimeo.com/api/player.js',
        type: types.script
      },
      shopifyXr: {
        tagId: 'shopify-model-viewer-xr',
        src: cloudCdn + 'shopify-xr-js/assets/v1.0/shopify-xr.en.js',
        type: types.script
      },
      modelViewerUi: {
        tagId: 'shopify-model-viewer-ui',
        src: cloudCdn + 'model-viewer-ui/assets/v1.0/model-viewer-ui.en.js',
        type: types.script
      },
      modelViewerUiStyles: {
        tagId: 'shopify-model-viewer-ui-styles',
        src: cloudCdn + 'model-viewer-ui/assets/v1.0/model-viewer-ui.css',
        type: types.link
      }
    };
  
    function load(libraryName, callback) {
      var library = libraries[libraryName];
  
      if (!library) return;
      if (library.status === status.requested) return;
  
      callback = callback || function() {};
      if (library.status === status.loaded) {
        callback();
        return;
      }
  
      library.status = status.requested;
  
      var tag;
  
      switch (library.type) {
        case types.script:
          tag = createScriptTag(library, callback);
          break;
        case types.link:
          tag = createLinkTag(library, callback);
          break;
      }
  
      tag.id = library.tagId;
      library.element = tag;
  
      var firstScriptTag = document.getElementsByTagName(library.type)[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }
  
    function createScriptTag(library, callback) {
      var tag = document.createElement('script');
      tag.src = library.src;
      tag.addEventListener('load', function() {
        library.status = status.loaded;
        callback();
      });
      return tag;
    }
  
    function createLinkTag(library, callback) {
      var tag = document.createElement('link');
      tag.href = library.src;
      tag.rel = 'stylesheet';
      tag.type = 'text/css';
      tag.addEventListener('load', function() {
        library.status = status.loaded;
        callback();
      });
      return tag;
    }
  
    return {
      load: load
    };
  })();
  
  theme.rteInit = function() {
    // Wrap tables so they become scrollable on small screens
    document.querySelectorAll('.rte table').forEach(table => {
      var wrapWith = document.createElement('div');
      wrapWith.classList.add('table-wrapper');
      theme.utils.wrap(table, wrapWith);
    });
  
    // Wrap video iframe embeds so they are responsive
    document.querySelectorAll('.rte iframe[src*="youtube.com/embed"]').forEach(iframe => {
      wrapVideo(iframe);
    });
    document.querySelectorAll('.rte iframe[src*="player.vimeo"]').forEach(iframe => {
      wrapVideo(iframe);
    });
  
    function wrapVideo(iframe) {
      // Reset the src attribute on each iframe after page load
      // for Chrome's "incorrect iFrame content on 'back'" bug.
      // https://code.google.com/p/chromium/issues/detail?id=395791
      iframe.src = iframe.src;
      var wrapWith = document.createElement('div');
      wrapWith.classList.add('video-wrapper');
      theme.utils.wrap(iframe, wrapWith);
    }
  
    // Remove CSS that adds animated underline under image links
    document.querySelectorAll('.rte a img').forEach(img => {
      img.parentNode.classList.add('rte__image');
    });
  }
  
  theme.Sections = function Sections() {
    this.constructors = {};
    this.instances = [];
  
    document.addEventListener('shopify:section:load', this._onSectionLoad.bind(this));
    document.addEventListener('shopify:section:unload', this._onSectionUnload.bind(this));
    document.addEventListener('shopify:section:select', this._onSelect.bind(this));
    document.addEventListener('shopify:section:deselect', this._onDeselect.bind(this));
    document.addEventListener('shopify:block:select', this._onBlockSelect.bind(this));
    document.addEventListener('shopify:block:deselect', this._onBlockDeselect.bind(this));
  };
  
  theme.Sections.prototype = Object.assign({}, theme.Sections.prototype, {
    _createInstance: function(container, constructor, scope) {
      var id = container.getAttribute('data-section-id');
      var type = container.getAttribute('data-section-type');
  
      constructor = constructor || this.constructors[type];
  
      if (typeof constructor === 'undefined') {
        return;
      }
  
      // If custom scope passed, check to see if instance
      // is already initialized so we don't double up
      if (scope) {
        var instanceExists = this._findInstance(id);
        if (instanceExists) {
          this._removeInstance(id);
        }
      }
  
      var instance = Object.assign(new constructor(container), {
        id: id,
        type: type,
        container: container
      });
  
      this.instances.push(instance);
    },
  
    _findInstance: function(id) {
      for (var i = 0; i < this.instances.length; i++) {
        if (this.instances[i].id === id) {
          return this.instances[i];
        }
      }
    },
  
    _removeInstance: function(id) {
      var i = this.instances.length;
      var instance;
  
      while(i--) {
        if (this.instances[i].id === id) {
          instance = this.instances[i];
          this.instances.splice(i, 1);
          break;
        }
      }
  
      return instance;
    },
  
    _onSectionLoad: function(evt, subSection, subSectionId) {
      if (window.AOS) { AOS.refreshHard() }
      if (theme && theme.initGlobals) {
        theme.initGlobals();
      }
  
      var container = subSection ? subSection : evt.target;
      var section = subSection ? subSection : evt.target.querySelector('[data-section-id]');
  
      if (!section) {
        return;
      }
  
      this._createInstance(section);
  
      var instance = subSection ? subSectionId : this._findInstance(evt.detail.sectionId);
  
      // Check if we have subsections to load
      var haveSubSections = container.querySelectorAll('[data-subsection]');
      if (haveSubSections.length) {
        this.loadSubSections(container);
      }
  
      // Run JS only in case of the section being selected in the editor
      // before merchant clicks "Add"
      if (instance && typeof instance.onLoad === 'function') {
        instance.onLoad(evt);
      }
  
      // Force editor to trigger scroll event when loading a section
      setTimeout(function() {
        window.dispatchEvent(new Event('scroll'));
      }, 200);
    },
  
    _onSectionUnload: function(evt) {
      this.instances = this.instances.filter(function(instance) {
        var isEventInstance = instance.id === evt.detail.sectionId;
  
        if (isEventInstance) {
          if (typeof instance.onUnload === 'function') {
            instance.onUnload(evt);
          }
        }
  
        return !isEventInstance;
      });
    },
  
    loadSubSections: function(scope) {
      var sections = scope
                     ? scope.querySelectorAll('[data-subsection]')
                     : document.querySelectorAll('[data-subsection]');
  
      sections.forEach(el => {
        this._onSectionLoad(null, el, el.dataset.sectionId);
      });
  
      if (window.AOS) { AOS.refreshHard() }
    },
  
    _onSelect: function(evt) {
      var instance = this._findInstance(evt.detail.sectionId);
  
      if (
        typeof instance !== 'undefined' &&
        typeof instance.onSelect === 'function'
      ) {
        instance.onSelect(evt);
      }
    },
  
    _onDeselect: function(evt) {
      var instance = this._findInstance(evt.detail.sectionId);
  
      if (
        typeof instance !== 'undefined' &&
        typeof instance.onDeselect === 'function'
      ) {
        instance.onDeselect(evt);
      }
    },
  
    _onBlockSelect: function(evt) {
      var instance = this._findInstance(evt.detail.sectionId);
  
      if (
        typeof instance !== 'undefined' &&
        typeof instance.onBlockSelect === 'function'
      ) {
        instance.onBlockSelect(evt);
      }
    },
  
    _onBlockDeselect: function(evt) {
      var instance = this._findInstance(evt.detail.sectionId);
  
      if (
        typeof instance !== 'undefined' &&
        typeof instance.onBlockDeselect === 'function'
      ) {
        instance.onBlockDeselect(evt);
      }
    },
  
    register: function(type, constructor, scope) {
      this.constructors[type] = constructor;
  
      var sections = document.querySelectorAll('[data-section-type="' + type + '"]');
  
      if (scope) {
        sections = scope.querySelectorAll('[data-section-type="' + type + '"]');
      }
  
      sections.forEach(
        function(container) {
          this._createInstance(container, constructor, scope);
        }.bind(this)
      );
    },
  
    reinit: function(section) {
      for (var i = 0; i < this.instances.length; i++) {
        var instance = this.instances[i];
        if (instance['type'] === section) {
          if (typeof instance.forceReload === 'function') {
            instance.forceReload();
          }
        }
      }
    }
  });
  
  theme.Variants = (function() {
  
    function Variants(options) {
      this.container = options.container;
      this.variants = options.variants;
      this.singleOptionSelector = options.singleOptionSelector;
      this.originalSelectorId = options.originalSelectorId;
      this.enableHistoryState = options.enableHistoryState;
      this.currentVariant = this._getVariantFromOptions();
  
      this.container.querySelectorAll(this.singleOptionSelector).forEach(el => {
        el.addEventListener('change', this._onSelectChange.bind(this));
      });
    }
  
    Variants.prototype = Object.assign({}, Variants.prototype, {
  
      _getCurrentOptions: function() {
        var result = [];
  
        this.container.querySelectorAll(this.singleOptionSelector).forEach(el => {
          var type = el.getAttribute('type');
  
          if (type === 'radio' || type === 'checkbox') {
            if (el.checked) {
              result.push({
                value: el.value,
                index: el.dataset.index
              });
            }
          } else {
            result.push({
              value: el.value,
              index: el.dataset.index
            });
          }
        });
  
        // remove any unchecked input values if using radio buttons or checkboxes
        result = theme.utils.compact(result);
  
        return result;
      },
  
      _getVariantFromOptions: function() {
        var selectedValues = this._getCurrentOptions();
        var variants = this.variants;
        var found = false;
  
        variants.forEach(function(variant) {
          var match = true;
          var options = variant.options;
  
          selectedValues.forEach(function(option) {
            if (match) {
              match = (variant[option.index] === option.value);
            }
          });
  
          if (match) {
            found = variant;
          }
        });
  
        return found || null;
      },
  
      _onSelectChange: function() {
        var variant = this._getVariantFromOptions();
  
        this.container.dispatchEvent(new CustomEvent('variantChange', {
          detail: {
            variant: variant
          }
        }));
  
        document.dispatchEvent(new CustomEvent('variant:change', {
          detail: {
            variant: variant
          }
        }));
  
        if (!variant) {
          return;
        }
  
        this._updateMasterSelect(variant);
        this._updateImages(variant);
        this._updatePrice(variant);
        this._updateUnitPrice(variant);
        this._updateSKU(variant);
        this.currentVariant = variant;
  
        if (this.enableHistoryState) {
          this._updateHistoryState(variant);
        }
      },
  
      _updateImages: function(variant) {
        var variantImage = variant.featured_image || {};
        var currentVariantImage = this.currentVariant.featured_image || {};
  
        if (!variant.featured_image || variantImage.src === currentVariantImage.src) {
          return;
        }
  
        this.container.dispatchEvent(new CustomEvent('variantImageChange', {
          detail: {
            variant: variant
          }
        }));
      },
  
      _updatePrice: function(variant) {
        if (variant.price === this.currentVariant.price && variant.compare_at_price === this.currentVariant.compare_at_price) {
          return;
        }
  
        this.container.dispatchEvent(new CustomEvent('variantPriceChange', {
          detail: {
            variant: variant
          }
        }));
      },
  
      _updateUnitPrice: function(variant) {
        if (variant.unit_price === this.currentVariant.unit_price) {
          return;
        }
  
        this.container.dispatchEvent(new CustomEvent('variantUnitPriceChange', {
          detail: {
            variant: variant
          }
        }));
      },
  
      _updateSKU: function(variant) {
        if (variant.sku === this.currentVariant.sku) {
          return;
        }
  
        this.container.dispatchEvent(new CustomEvent('variantSKUChange', {
          detail: {
            variant: variant
          }
        }));
      },
  
      _updateHistoryState: function(variant) {
        if (!history.replaceState || !variant) {
          return;
        }
  
        var newurl = window.location.protocol + '//' + window.location.host + window.location.pathname + '?variant=' + variant.id;
        window.history.replaceState({path: newurl}, '', newurl);
      },
  
      _updateMasterSelect: function(variant) {
        this.container.querySelector(this.originalSelectorId).value = variant.id;
      }
    });
  
    return Variants;
  })();
  
  window.vimeoApiReady = function() {
    theme.config.vimeoLoading = true;
  
    // Because there's no way to check for the Vimeo API being loaded
    // asynchronously, we use this terrible timeout to wait for it being ready
    checkIfVimeoIsReady()
      .then(function() {
        theme.config.vimeoReady = true;
        theme.config.vimeoLoading = false;
        document.dispatchEvent(new CustomEvent('vimeoReady'));
      });
  }
  
  function checkIfVimeoIsReady() {
    var wait;
    var timeout;
  
    var deferred = new Promise((resolve, reject) => {
      wait = setInterval(function() {
        if (!Vimeo) {
          return;
        }
  
        clearInterval(wait);
        clearTimeout(timeout);
        resolve();
      }, 500);
  
      timeout = setTimeout(function() {
        clearInterval(wait);
        reject();
      }, 4000); // subjective. test up to 8 times over 4 seconds
    });
  
    return deferred;
  }
  
  theme.VimeoPlayer = (function() {
    var classes = {
      loading: 'loading',
      loaded: 'loaded',
      interactable: 'video-interactable'
    }
  
    var defaults = {
      background: true,
      byline: false,
      controls: false,
      loop: true,
      muted: true,
      playsinline: true,
      portrait: false,
      title: false
    };
  
    function VimeoPlayer(divId, videoId, options) {
      this.divId = divId;
      this.el = document.getElementById(divId);
      this.videoId = videoId;
      this.iframe = null;
      this.options = options;
  
      if (this.options && this.options.videoParent) {
        this.parent = this.el.closest(this.options.videoParent);
      }
  
      this.setAsLoading();
  
      if (theme.config.vimeoReady) {
        this.init();
      } else {
        theme.LibraryLoader.load('vimeo', window.vimeoApiReady);
        document.addEventListener('vimeoReady', this.init.bind(this));
      }
    }
  
    VimeoPlayer.prototype = Object.assign({}, VimeoPlayer.prototype, {
      init: function() {
        var args = defaults;
        args.id = this.videoId;
  
        this.videoPlayer = new Vimeo.Player(this.el, args);
  
        this.videoPlayer.ready().then(this.playerReady.bind(this));
      },
  
      playerReady: function() {
        this.iframe = this.el.querySelector('iframe');
        this.iframe.setAttribute('tabindex', '-1');
  
        this.videoPlayer.setMuted(true);
  
        this.setAsLoaded();
  
        // pause when out of view
        var observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.play();
            } else {
              this.pause();
            }
          });
        }, {rootMargin: '0px 0px 50px 0px'});
  
        observer.observe(this.iframe);
      },
  
      setAsLoading: function() {
        if (!this.parent) return;
        this.parent.classList.add(classes.loading);
      },
  
      setAsLoaded: function() {
        if (!this.parent) return;
        this.parent.classList.remove(classes.loading);
        this.parent.classList.add(classes.loaded);
        if (Shopify && Shopify.designMode) {
          if (window.AOS) {AOS.refreshHard()}
        }
      },
  
      enableInteraction: function() {
        if (!this.parent) return;
        this.parent.classList.add(classes.interactable);
      },
  
      play: function() {
        if (this.videoPlayer && typeof this.videoPlayer.play === 'function') {
          this.videoPlayer.play();
        }
      },
  
      pause: function() {
        if (this.videoPlayer && typeof this.videoPlayer.pause === 'function') {
          this.videoPlayer.pause();
        }
      },
  
      destroy: function() {
        if (this.videoPlayer && typeof this.videoPlayer.destroy === 'function') {
          this.videoPlayer.destroy();
        }
      }
    });
  
    return VimeoPlayer;
  })();
  
  window.onYouTubeIframeAPIReady = function() {
    theme.config.youTubeReady = true;
    document.dispatchEvent(new CustomEvent('youTubeReady'));
  }
  
  /*============================================================================
    YouTube SDK method
    Parameters:
      - player div id (required)
      - arguments
        - videoId (required)
        - videoParent (selector, optional for section loading state)
        - events (object, optional)
  ==============================================================================*/
  theme.YouTube = (function() {
    var classes = {
      loading: 'loading',
      loaded: 'loaded',
      interactable: 'video-interactable'
    }
  
    var defaults = {
      width: 1280,
      height: 720,
      playerVars: {
        autohide: 0,
        autoplay: 1,
        cc_load_policy: 0,
        controls: 0,
        fs: 0,
        iv_load_policy: 3,
        modestbranding: 1,
        playsinline: 1,
        rel: 0
      }
    };
  
    function YouTube(divId, options) {
      this.divId = divId;
      this.iframe = null;
  
      this.attemptedToPlay = false;
  
      // API callback events
      defaults.events = {
        onReady: this.onVideoPlayerReady.bind(this),
        onStateChange: this.onVideoStateChange.bind(this)
      };
  
      this.options = Object.assign({}, defaults, options);
  
      if (this.options) {
        if (this.options.videoParent) {
          this.parent = document.getElementById(this.divId).closest(this.options.videoParent);
        }
  
        // Most YT videos will autoplay. If in product media,
        // will handle in theme.Product instead
        if (!this.options.autoplay) {
          this.options.playerVars.autoplay = this.options.autoplay;
        }
  
        if (this.options.style === 'sound') {
          this.options.playerVars.controls = 1;
          this.options.playerVars.autoplay = 0;
        }
  
      }
  
      this.setAsLoading();
  
      if (theme.config.youTubeReady) {
        this.init();
      } else {
        theme.LibraryLoader.load('youtubeSdk');
        document.addEventListener('youTubeReady', this.init.bind(this));
      }
    }
  
    YouTube.prototype = Object.assign({}, YouTube.prototype, {
      init: function() {
        this.videoPlayer = new YT.Player(this.divId, this.options);
      },
  
      onVideoPlayerReady: function(evt) {
        this.iframe = document.getElementById(this.divId); // iframe once YT loads
        this.iframe.setAttribute('tabindex', '-1');
  
        if (this.options.style !== 'sound') {
          evt.target.mute();
        }
  
        // pause when out of view
        var observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.play();
            } else {
              this.pause();
            }
          });
        }, {rootMargin: '0px 0px 50px 0px'});
  
        observer.observe(this.iframe);
      },
  
      onVideoStateChange: function(evt) {
        switch (evt.data) {
          case -1: // unstarted
            // Handle low power state on iOS by checking if
            // video is reset to unplayed after attempting to buffer
            if (this.attemptedToPlay) {
              this.setAsLoaded();
              this.enableInteraction();
            }
            break;
          case 0: // ended, loop it
            this.play(evt);
            break;
          case 1: // playing
            this.setAsLoaded();
            break;
          case 3: // buffering
            this.attemptedToPlay = true;
            break;
        }
      },
  
      setAsLoading: function() {
        if (!this.parent) return;
        this.parent.classList.add(classes.loading);
      },
  
      setAsLoaded: function() {
        if (!this.parent) return;
        this.parent.classList.remove(classes.loading);
        this.parent.classList.add(classes.loaded);
        if (Shopify && Shopify.designMode) {
          if (window.AOS) {AOS.refreshHard()}
        }
      },
  
      enableInteraction: function() {
        if (!this.parent) return;
        this.parent.classList.add(classes.interactable);
      },
  
      play: function() {
        if (this.videoPlayer && typeof this.videoPlayer.playVideo === 'function') {
          this.videoPlayer.playVideo();
        }
      },
  
      pause: function() {
        if (this.videoPlayer && typeof this.videoPlayer.pauseVideo === 'function') {
          this.videoPlayer.pauseVideo();
        }
      },
  
      destroy: function() {
        if (this.videoPlayer && typeof this.videoPlayer.destroy === 'function') {
          this.videoPlayer.destroy();
        }
      }
    });
  
    return YouTube;
  })();
  

  theme.cart = {
    getCart: function() {
      var url = ''.concat(theme.routes.cart, '?t=').concat(Date.now());
      return fetch(url, {
        credentials: 'same-origin',
        method: 'GET'
      }).then(response => response.json());
    },
  
    getCartProductMarkup: function() {
      var url = ''.concat(theme.routes.cartPage, '?t=').concat(Date.now());
  
      url = url.indexOf('?') === -1 ? (url + '?view=ajax') : (url + '&view=ajax');
  
      return fetch(url, {
        credentials: 'same-origin',
        method: 'GET'
      })
      .then(function(response) {return response.text()});
    },
  
    changeItem: function(key, qty) {
      return this._updateCart({
        url: ''.concat(theme.routes.cartChange, '?t=').concat(Date.now()),
        data: JSON.stringify({
          id: key,
          quantity: qty
        })
      })
    },
  
    _updateCart: function(params) {
      return fetch(params.url, {
        method: 'POST',
        body: params.data,
        credentials: 'same-origin',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(function(cart) {
        return cart;
      });
    },
  
    updateAttribute: function(key, value) {
      return this._updateCart({
        url: '/cart/update.js',
        data: JSON.stringify({
          attributes: {
            [key]: theme.cart.attributeToString(value)
          }
        })
      });
    },
  
    updateNote: function(note) {
      return this._updateCart({
        url: '/cart/update.js',
        data: JSON.stringify({
          note: theme.cart.attributeToString(note)
        })
      });
    },
  
    attributeToString: function(attribute) {
      if ((typeof attribute) !== 'string') {
        attribute += '';
        if (attribute === 'undefined') {
          attribute = '';
        }
      }
      return attribute.trim();
    }
  }
  
  /*============================================================================
    CartForm
    - Prevent checkout when terms checkbox exists
    - Listen to quantity changes, rebuild cart (both widget and page)
  ==============================================================================*/
  theme.CartForm = (function() {
    var selectors = {
      products: '[data-products]',
      qtySelector: '.js-qty__wrapper',
      discounts: '[data-discounts]',
      savings: '[data-savings]',
      subTotal: '[data-subtotal]',
  
      cartBubble: '#CartBubble',
      cartNote: '[name="note"]',
      termsCheckbox: '.cart__terms-checkbox',
      checkoutBtn: '.cart__checkout'
    };
  
    var classes = {
      btnLoading: 'btn--loading'
    };
  
    var config = {
      requiresTerms: false
    };
  
    function CartForm(form) {
      if (!form) {
        return;
      }
  
      this.form = form;
      this.wrapper = form.parentNode;
      this.location = form.dataset.location;
      this.namespace = '.cart-' + this.location;
      this.products = form.querySelector(selectors.products)
      this.submitBtn = form.querySelector(selectors.checkoutBtn);
  
      this.discounts = form.querySelector(selectors.discounts);
      this.savings = form.querySelector(selectors.savings);
      this.subtotal = form.querySelector(selectors.subTotal);
      this.termsCheckbox = form.querySelector(selectors.termsCheckbox);
      this.noteInput = form.querySelector(selectors.cartNote);
  
      if (this.termsCheckbox) {
        config.requiresTerms = true;
      }
  
      this.init();
    }
  
    CartForm.prototype = Object.assign({}, CartForm.prototype, {
      init: function() {
        this.initQtySelectors();
  
        document.addEventListener('cart:quantity' + this.namespace, this.quantityChanged.bind(this));
  
        this.form.on('submit' + this.namespace, this.onSubmit.bind(this));
  
        if (this.noteInput) {
          this.noteInput.addEventListener('change', function() {
            var newNote = this.value;
            theme.cart.updateNote(newNote);
          });
        }
  
        // Dev-friendly way to build the cart
        document.addEventListener('cart:build', function() {
          this.buildCart();
        }.bind(this));
      },
  
      reInit: function() {
        this.initQtySelectors();
      },
  
      onSubmit: function(evt) {
        this.submitBtn.classList.add(classes.btnLoading);
  
        if (config.requiresTerms) {
          if (this.termsCheckbox.checked) {
            // continue to checkout
          } else {
            alert(theme.strings.cartTermsConfirmation);
            this.submitBtn.classList.remove(classes.btnLoading)
            evt.preventDefault();
            return false;
          }
        }
      },
  
      /*============================================================================
        Query cart page to get markup
      ==============================================================================*/
      _parseProductHTML: function(html) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(html, 'text/html');
        return {
          items: doc.querySelector('.cart__items'),
          discounts: doc.querySelector('.cart__discounts')
        }
      },
  
      buildCart: function() {
        theme.cart.getCartProductMarkup().then(this.cartMarkup.bind(this));
      },
  
      cartMarkup: function(html) {
        var markup = this._parseProductHTML(html);
        var items = markup.items;
        var count = parseInt(items.dataset.count);
        var subtotal = items.dataset.cartSubtotal;
        var savings = items.dataset.cartSavings;
  
        this.updateCartDiscounts(markup.discounts);
        this.updateSavings(savings);
  
        if (count > 0) {
          this.wrapper.classList.remove('is-empty');
        } else {
          this.wrapper.classList.add('is-empty');
        }
  
        this.updateCount(count);
  
        // Append item markup
        this.products.innerHTML = '';
        this.products.append(items);
  
        // Update subtotal
        var wcpcartdata=[];
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {      
            wcpcartdata=JSON.parse(this.responseText);
          }
        };
        xhttp.open("GET", "/search?&view=wcp_cart", false);
        xhttp.send();

        subtotal=wcpcartdata.wcp_cart_total;
        
        this.subtotal.innerHTML = theme.Currency.formatMoney(subtotal, theme.settings.moneyFormat);
  
        this.reInit();
  
        if (window.AOS) { AOS.refreshHard() }
  
        if (Shopify && Shopify.StorefrontExpressButtons) {
          Shopify.StorefrontExpressButtons.initialize();
        }
      },
  
      updateCartDiscounts: function(markup) {
        if (!this.discounts) {
          return;
        }
        this.discounts.innerHTML = '';
        this.discounts.append(markup);
      },
  
      /*============================================================================
        Quantity handling
      ==============================================================================*/
      initQtySelectors: function() {
        this.form.querySelectorAll(selectors.qtySelector).forEach(el => {
          var selector = new theme.QtySelector(el, {
            namespace: this.namespace,
            isCart: true
          });
        });
      },
  
      quantityChanged: function(evt) {
        var key = evt.detail[0];
        var qty = evt.detail[1];
        var el = evt.detail[2];
  
        if (!key || !qty) {
          return;
        }
  
        // Disable qty selector so multiple clicks can't happen while loading
        if (el) {
          el.classList.add('is-loading');
        }
  
        theme.cart.changeItem(key, qty)
          .then(function(cart) {
            if (cart.item_count > 0) {
              this.wrapper.classList.remove('is-empty');
            } else {
              this.wrapper.classList.add('is-empty');
            }
  
            this.buildCart();
  
            document.dispatchEvent(new CustomEvent('cart:updated', {
              detail: {
                cart: cart
              }
            }));
          }.bind(this))
          .catch(function(XMLHttpRequest){});
      },
  
      /*============================================================================
        Update elements of the cart
      ==============================================================================*/
      updateSubtotal: function(subtotal) {
        this.form.querySelector(selectors.subTotal).innerHTML = theme.Currency.formatMoney(subtotal, theme.settings.moneyFormat);
      },
  
      updateSavings: function(savings) {
        if (!this.savings) {
          return;
        }
  
        if (savings > 0) {
          var amount = theme.Currency.formatMoney(savings, theme.settings.moneyFormat);
          this.savings.classList.remove('hide');
          this.savings.innerHTML = theme.strings.cartSavings.replace('[savings]', amount);
        } else {
          this.savings.classList.add('hide');
        }
      },
  
      updateCount: function(count) {
        var countEl = document.querySelector('.cart-link__bubble-num');
  
        if (countEl) {
          countEl.innerText = count;
        }
  
        // show/hide bubble
        if (count > 0) {
          document.querySelector(selectors.cartBubble).classList.add('cart-link__bubble--visible');
        } else {
          document.querySelector(selectors.cartBubble).classList.remove('cart-link__bubble--visible');
        }
      }
    });
  
    return CartForm;
  })();
  
  theme.collapsibles = (function() {
    var selectors = {
      trigger: '.collapsible-trigger',
      module: '.collapsible-content',
      moduleInner: '.collapsible-content__inner'
    };
  
    var classes = {
      hide: 'hide',
      open: 'is-open',
      autoHeight: 'collapsible--auto-height'
    };
  
    var namespace = '.collapsible';
  
    var isTransitioning = false;
  
    function init(scope) {
      var el = scope ? scope : document;
      el.querySelectorAll(selectors.trigger).forEach(trigger => {
        var state = trigger.classList.contains(classes.open);
        trigger.setAttribute('aria-expanded', state);
  
        trigger.off('click' + namespace);
        trigger.on('click' + namespace, toggle);
      });
    }
  
    function toggle(evt) {
      if (isTransitioning) {
        return;
      }
  
      isTransitioning = true;
  
      var el = evt.currentTarget;
      var isOpen = el.classList.contains(classes.open);
      var moduleId = el.getAttribute('aria-controls');
      var container = document.getElementById(moduleId);
  
      if (!moduleId) {
        moduleId = el.dataset.controls;
      }
  
      // No ID, bail
      if (!moduleId) {
        return;
      }
  
      // If container=null, there isn't a matching ID.
      // Check if data-id is set instead. Could be multiple.
      // Select based on being in the same parent div.
      if (!container) {
        var multipleMatches = document.querySelectorAll('[data-id="' + moduleId + '"]');
        if (multipleMatches.length > 0) {
          container = el.parentNode.querySelector('[data-id="' + moduleId + '"]');
        }
      }
  
      if (!container) {
        isTransitioning = false;
        return;
      }
  
      var height = container.querySelector(selectors.moduleInner).offsetHeight;
      var isAutoHeight = container.classList.contains(classes.autoHeight);
      var parentCollapsibleEl = container.parentNode.closest(selectors.module);
      var childHeight = height;
  
      // If isAutoHeight, set the height to 0 just after setting the actual height
      // so the closing animation works nicely
      if (isOpen && isAutoHeight) {
        setTimeout(function() {
          height = 0;
          setTransitionHeight(container, height, isOpen, isAutoHeight);
        }, 0);
      }
  
      if (isOpen && !isAutoHeight) {
        height = 0;
      }
  
      el.setAttribute('aria-expanded', !isOpen);
      if (isOpen) {
        el.classList.remove(classes.open);
      } else {
        el.classList.add(classes.open);
      }
  
      setTransitionHeight(container, height, isOpen, isAutoHeight);
  
      // If we are in a nested collapsible element like the mobile nav,
      // also set the parent element's height
      if (parentCollapsibleEl) {
        var totalHeight = isOpen
                          ? parentCollapsibleEl.offsetHeight - childHeight
                          : height + parentCollapsibleEl.offsetHeight;
  
        setTransitionHeight(parentCollapsibleEl, totalHeight, false, false);
      }
  
      // If Shopify Product Reviews app installed,
      // resize container on 'Write review' click
      // that shows form
      if (window.SPR) {
        var btn = container.querySelector('.spr-summary-actions-newreview');
        if (!btn) { return }
        btn.off('click' + namespace);
        btn.on('click' + namespace, function() {
          height = container.querySelector(selectors.moduleInner).offsetHeight;
          setTransitionHeight(container, height, isOpen, isAutoHeight);
        });
      }
    }
  
    function setTransitionHeight(container, height, isOpen, isAutoHeight) {
      container.classList.remove(classes.hide);
      theme.utils.prepareTransition(container, function() {
        container.style.height = height+'px';
        if (isOpen) {
          container.classList.remove(classes.open);
        } else {
          container.classList.add(classes.open);
        }
      });
  
      if (!isOpen && isAutoHeight) {
        var o = container;
        window.setTimeout(function() {
          o.css('height','auto');
          isTransitioning = false;
        }, 500);
      } else {
        isTransitioning = false;
      }
    }
  
    return {
      init: init
    };
  })();
  
  // Shopify-built select-like popovers for currency and language selection
  theme.Disclosure = (function() {
    var selectors = {
      disclosureForm: '[data-disclosure-form]',
      disclosureList: '[data-disclosure-list]',
      disclosureToggle: '[data-disclosure-toggle]',
      disclosureInput: '[data-disclosure-input]',
      disclosureOptions: '[data-disclosure-option]'
    };
  
    var classes = {
      listVisible: 'disclosure-list--visible'
    };
  
    function Disclosure(disclosure) {
      this.container = disclosure;
      this._cacheSelectors();
      this._setupListeners();
    }
  
    Disclosure.prototype = Object.assign({}, Disclosure.prototype, {
      _cacheSelectors: function() {
        this.cache = {
          disclosureForm: this.container.closest(selectors.disclosureForm),
          disclosureList: this.container.querySelector(selectors.disclosureList),
          disclosureToggle: this.container.querySelector(
            selectors.disclosureToggle
          ),
          disclosureInput: this.container.querySelector(
            selectors.disclosureInput
          ),
          disclosureOptions: this.container.querySelectorAll(
            selectors.disclosureOptions
          )
        };
      },
  
      _setupListeners: function() {
        this.eventHandlers = this._setupEventHandlers();
  
        this.cache.disclosureToggle.addEventListener(
          'click',
          this.eventHandlers.toggleList
        );
  
        this.cache.disclosureOptions.forEach(function(disclosureOption) {
          disclosureOption.addEventListener(
            'click',
            this.eventHandlers.connectOptions
          );
        }, this);
  
        this.container.addEventListener(
          'keyup',
          this.eventHandlers.onDisclosureKeyUp
        );
  
        this.cache.disclosureList.addEventListener(
          'focusout',
          this.eventHandlers.onDisclosureListFocusOut
        );
  
        this.cache.disclosureToggle.addEventListener(
          'focusout',
          this.eventHandlers.onDisclosureToggleFocusOut
        );
  
        document.body.addEventListener('click', this.eventHandlers.onBodyClick);
      },
  
      _setupEventHandlers: function() {
        return {
          connectOptions: this._connectOptions.bind(this),
          toggleList: this._toggleList.bind(this),
          onBodyClick: this._onBodyClick.bind(this),
          onDisclosureKeyUp: this._onDisclosureKeyUp.bind(this),
          onDisclosureListFocusOut: this._onDisclosureListFocusOut.bind(this),
          onDisclosureToggleFocusOut: this._onDisclosureToggleFocusOut.bind(this)
        };
      },
  
      _connectOptions: function(event) {
        event.preventDefault();
  
        this._submitForm(event.currentTarget.dataset.value);
      },
  
      _onDisclosureToggleFocusOut: function(event) {
        var disclosureLostFocus =
          this.container.contains(event.relatedTarget) === false;
  
        if (disclosureLostFocus) {
          this._hideList();
        }
      },
  
      _onDisclosureListFocusOut: function(event) {
        var childInFocus = event.currentTarget.contains(event.relatedTarget);
  
        var isVisible = this.cache.disclosureList.classList.contains(
          classes.listVisible
        );
  
        if (isVisible && !childInFocus) {
          this._hideList();
        }
      },
  
      _onDisclosureKeyUp: function(event) {
        if (event.which !== 27) return;
        this._hideList();
        this.cache.disclosureToggle.focus();
      },
  
      _onBodyClick: function(event) {
        var isOption = this.container.contains(event.target);
        var isVisible = this.cache.disclosureList.classList.contains(
          classes.listVisible
        );
  
        if (isVisible && !isOption) {
          this._hideList();
        }
      },
  
      _submitForm: function(value) {
        this.cache.disclosureInput.value = value;
        this.cache.disclosureForm.submit();
      },
  
      _hideList: function() {
        this.cache.disclosureList.classList.remove(classes.listVisible);
        this.cache.disclosureToggle.setAttribute('aria-expanded', false);
      },
  
      _toggleList: function() {
        var ariaExpanded =
          this.cache.disclosureToggle.getAttribute('aria-expanded') === 'true';
        this.cache.disclosureList.classList.toggle(classes.listVisible);
        this.cache.disclosureToggle.setAttribute('aria-expanded', !ariaExpanded);
      },
  
      destroy: function() {
        this.cache.disclosureToggle.removeEventListener(
          'click',
          this.eventHandlers.toggleList
        );
  
        this.cache.disclosureOptions.forEach(function(disclosureOption) {
          disclosureOption.removeEventListener(
            'click',
            this.eventHandlers.connectOptions
          );
        }, this);
  
        this.container.removeEventListener(
          'keyup',
          this.eventHandlers.onDisclosureKeyUp
        );
  
        this.cache.disclosureList.removeEventListener(
          'focusout',
          this.eventHandlers.onDisclosureListFocusOut
        );
  
        this.cache.disclosureToggle.removeEventListener(
          'focusout',
          this.eventHandlers.onDisclosureToggleFocusOut
        );
  
        document.body.removeEventListener(
          'click',
          this.eventHandlers.onBodyClick
        );
      }
    });
  
    return Disclosure;
  })();
  
  theme.Drawers = (function() {
    function Drawers(id, name) {
      this.config = {
        id: id,
        close: '.js-drawer-close',
        open: '.js-drawer-open-' + name,
        openClass: 'js-drawer-open',
        closingClass: 'js-drawer-closing',
        activeDrawer: 'drawer--is-open',
        namespace: '.drawer-' + name
      };
  
      this.nodes = {
        page: document.querySelector('#MainContent')
      };
  
      this.drawer = document.querySelector('#' + id);
      this.isOpen = false;
  
      if (!this.drawer) {
        return;
      }
  
      this.init();
    }
  
    Drawers.prototype = Object.assign({}, Drawers.prototype, {
      init: function() {
        // Setup open button(s)
        document.querySelectorAll(this.config.open).forEach(openBtn => {
          openBtn.setAttribute('aria-expanded', 'false');
          openBtn.addEventListener('click', this.open.bind(this));
        });
  
        this.drawer.querySelector(this.config.close).addEventListener('click', this.close.bind(this));
  
        // Close modal if a drawer is opened
        document.addEventListener('modalOpen', function() {
          this.close();
        }.bind(this));
      },
  
      open: function(evt, returnFocusEl) {
        if (evt) {
          evt.preventDefault();
        }
  
        if (this.isOpen) {
          return;
        }
  
        // Without this the drawer opens, the click event bubbles up to $nodes.page which closes the drawer.
        if (evt && evt.stopPropagation) {
          evt.stopPropagation();
          // save the source of the click, we'll focus to this on close
          evt.currentTarget.setAttribute('aria-expanded', 'true');
          this.activeSource = evt.currentTarget;
        } else if (returnFocusEl) {
          returnFocusEl.setAttribute('aria-expanded', 'true');
          this.activeSource = returnFocusEl;
        }
  
        theme.utils.prepareTransition(this.drawer, function() {
          this.drawer.classList.add(this.config.activeDrawer);
        }.bind(this));
  
        document.documentElement.classList.add(this.config.openClass);
        this.isOpen = true;
  
        theme.a11y.trapFocus({
          container: this.drawer,
          namespace: 'drawer_focus'
        });
  
        document.dispatchEvent(new CustomEvent('drawerOpen'));
        document.dispatchEvent(new CustomEvent('drawerOpen.' + this.config.id));
  
        this.bindEvents();
      },
  
      close: function(evt) {
        if (!this.isOpen) {
          return;
        }
  
        // Do not close if click event came from inside drawer
        if (evt) {
          if (evt.target.closest('.js-drawer-close')) {
            // Do not close if using the drawer close button
          } else if (evt.target.closest('.drawer')) {
            return;
          }
        }
  
        // deselect any focused form elements
        document.activeElement.blur();
  
        theme.utils.prepareTransition(this.drawer, function() {
          this.drawer.classList.remove(this.config.activeDrawer);
        }.bind(this));
  
        document.documentElement.classList.remove(this.config.openClass);
        document.documentElement.classList.add(this.config.closingClass);
  
        window.setTimeout(function() {
          document.documentElement.classList.remove(this.config.closingClass);
          if (this.activeSource && this.activeSource.getAttribute('aria-expanded')) {
            this.activeSource.setAttribute('aria-expanded', 'false');
            this.activeSource.focus();
          }
        }.bind(this), 500);
  
        this.isOpen = false;
  
        theme.a11y.removeTrapFocus({
          container: this.drawer,
          namespace: 'drawer_focus'
        });
  
        this.unbindEvents();
      },
  
      bindEvents: function() {
        // Clicking out of drawer closes it
        window.on('click' + this.config.namespace, function(evt) {
          this.close(evt)
          return;
        }.bind(this));
  
        // Pressing escape closes drawer
        window.on('keyup' + this.config.namespace, function(evt) {
          if (evt.keyCode === 27) {
            this.close();
          }
        }.bind(this));
  
        theme.a11y.lockMobileScrolling(this.config.namespace, this.nodes.page);
      },
  
      unbindEvents: function() {
        window.off('click' + this.config.namespace);
        window.off('keyup' + this.config.namespace);
  
        theme.a11y.unlockMobileScrolling(this.config.namespace, this.nodes.page);
      }
    });
  
    return Drawers;
  })();
  
  theme.Modals = (function() {
    function Modal(id, name, options) {
      var defaults = {
        close: '.js-modal-close',
        open: '.js-modal-open-' + name,
        openClass: 'modal--is-active',
        closingClass: 'modal--is-closing',
        bodyOpenClass: 'modal-open',
        bodyOpenSolidClass: 'modal-open--solid',
        bodyClosingClass: 'modal-closing',
        closeOffContentClick: true
      };
  
      this.id = id;
      this.modal = document.getElementById(id);
  
      if (!this.modal) {
        return false;
      }
  
      this.modalContent = this.modal.querySelector('.modal__inner');
  
      this.config = Object.assign(defaults, options);
      this.modalIsOpen = false;
      this.focusOnOpen = this.config.focusIdOnOpen ? document.getElementById(this.config.focusIdOnOpen) : this.modal;
      this.isSolid = this.config.solid;
  
      this.init();
    }
  
    Modal.prototype.init = function() {
      document.querySelectorAll(this.config.open).forEach(btn => {
        btn.setAttribute('aria-expanded', 'false');
        btn.addEventListener('click', this.open.bind(this));
      });
  
      this.modal.querySelectorAll(this.config.close).forEach(btn => {
        btn.addEventListener('click', this.close.bind(this));
      });
  
      // Close modal if a drawer is opened
      document.addEventListener('drawerOpen', function() {
        this.close();
      }.bind(this));
    };
  
    Modal.prototype.open = function(evt) {
      // Keep track if modal was opened from a click, or called by another function
      var externalCall = false;
  
      // don't open an opened modal
      if (this.modalIsOpen) {
        return;
      }
  
      // Prevent following href if link is clicked
      if (evt) {
        evt.preventDefault();
      } else {
        externalCall = true;
      }
  
      // Without this, the modal opens, the click event bubbles up to $nodes.page
      // which closes the modal.
      if (evt && evt.stopPropagation) {
        evt.stopPropagation();
        // save the source of the click, we'll focus to this on close
        this.activeSource = evt.currentTarget.setAttribute('aria-expanded', 'true');
      }
  
      if (this.modalIsOpen && !externalCall) {
        this.close();
      }
  
      this.modal.classList.add(this.config.openClass);
  
      document.documentElement.classList.add(this.config.bodyOpenClass);
  
      if (this.isSolid) {
        document.documentElement.classList.add(this.config.bodyOpenSolidClass);
      }
  
      this.modalIsOpen = true;
  
      theme.a11y.trapFocus({
        container: this.modal,
        elementToFocus: this.focusOnOpen,
        namespace: 'modal_focus'
      });
  
      document.dispatchEvent(new CustomEvent('modalOpen'));
      document.dispatchEvent(new CustomEvent('modalOpen.' + this.id));
  
      this.bindEvents();
    };
  
    Modal.prototype.close = function(evt) {
      // don't close a closed modal
      if (!this.modalIsOpen) {
        return;
      }
  
      // Do not close modal if click happens inside modal content
      if (evt) {
        if (evt.target.closest('.js-modal-close')) {
          // Do not close if using the modal close button
        } else if (evt.target.closest('.modal__inner')) {
          return;
        }
      }
  
      // deselect any focused form elements
      document.activeElement.blur();
  
      this.modal.classList.remove(this.config.openClass);
      this.modal.classList.add(this.config.closingClass);
  
      document.documentElement.classList.remove(this.config.bodyOpenClass);
      document.documentElement.classList.add(this.config.bodyClosingClass);
  
      window.setTimeout(function() {
        document.documentElement.classList.remove(this.config.bodyClosingClass);
        this.modal.classList.remove(this.config.closingClass);
        if (this.activeSource && this.activeSource.getAttribute('aria-expanded')) {
          this.activeSource.setAttribute('aria-expanded', 'false').focus();
        }
      }.bind(this), 500); // modal close css transition
  
      if (this.isSolid) {
        document.documentElement.classList.remove(this.config.bodyOpenSolidClass);
      }
  
      this.modalIsOpen = false;
  
      theme.a11y.removeTrapFocus({
        container: this.modal,
        namespace: 'modal_focus'
      });
  
      document.dispatchEvent(new CustomEvent('modalClose.' + this.id));
  
      this.unbindEvents();
    };
  
    Modal.prototype.bindEvents = function() {
      window.on('keyup.modal', function(evt) {
        if (evt.keyCode === 27) {
          this.close();
        }
      }.bind(this));
  
      if (this.config.closeOffContentClick) {
        // Clicking outside of the modal content also closes it
        this.modal.on('click.modal', this.close.bind(this));
      }
    };
  
    Modal.prototype.unbindEvents = function() {
      document.documentElement.off('.modal');
  
      if (this.config.closeOffContentClick) {
        this.modal.off('.modal');
      }
    };
  
    return Modal;
  })();
  
  theme.parallaxSections = {};
  
  theme.Parallax = (function() {
    var speed = 0.85;
    var reset = false;
  
    function parallax(container, args) {
      this.isInit = false;
      this.isVisible = false;
      this.container = container;
      this.image = container.querySelector('.parallax-image');
      this.namespace = args.namespace;
      this.desktopOnly = args.desktopOnly;
  
      if (!this.container || !this.image) {
        return;
      }
  
      // If set for desktop only, setup listeners for disabling
      // on mobile and re-enabling on desktop
      if (this.desktopOnly) {
        document.addEventListener('matchSmall', function() {
          this.destroy();
        }.bind(this));
  
        document.addEventListener('unmatchSmall', function() {
          this.init(true);
        }.bind(this));
      }
  
      this.init(this.desktopOnly);
    }
  
    parallax.prototype = Object.assign({}, parallax.prototype, {
      init: function(desktopOnly) {
        // Reset in case initialized again
        if (this.isInit) {
          this.destroy();
        }
  
        this.isInit = true;
  
        // Do not setup scroll event if on mobile
        if (desktopOnly && theme.config.bpSmall) {
          return;
        }
  
        // Set position on page load
        this.setSizes();
        this.scrollHandler();
  
        var observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            this.isVisible = entry.isIntersecting;
            if (this.isVisible) {
              window.on('scroll' + this.namespace, this.onScroll.bind(this));
            } else {
              window.off('scroll' + this.namespace);
            }
          });
        }, {rootMargin: '200px 0px 200px 0px'});
  
        observer.observe(this.container);
  
        window.on('resize' + this.namespace, theme.utils.debounce(250, this.setSizes.bind(this)));
  
        document.addEventListener('shopify:section:reorder', theme.utils.debounce(250, this.onReorder.bind(this)));
      },
  
      onScroll: function() {
        if (!this.isVisible) {
          return;
        }
  
        // If a scroll event finds Shopify's review app,
        // update parallax scroll positions because of page reflows
        if (window.SPR && !reset) {
          this.setSizes();
          reset = true;
        }
  
        requestAnimationFrame(this.scrollHandler.bind(this));
      },
  
      scrollHandler: function() {
        var shiftDistance = (window.scrollY - this.elTop) * speed;
        this.image.style.transform = 'translate3d(0, ' + shiftDistance + 'px, 0)';
      },
  
      setSizes: function() {
        var rect = this.container.getBoundingClientRect();
        this.elTop = rect.top + window.scrollY;
      },
  
      onReorder: function() {
        this.setSizes();
        this.onScroll();
      },
  
      destroy: function() {
        this.image.style.transform = 'none';
        window.off('scroll' + this.namespace);
        window.off('resize' + this.namespace);
      }
    });
  
    return parallax;
  })();
  
  theme.AjaxProduct = (function() {
    var status = {
      loading: false
    };
  
    function ProductForm(form, submit) {
      this.form = form;
  
      var submitSelector = submit ? submit : '.add-to-cart';
  
      if (this.form) {
        this.addToCart = form.querySelector(submitSelector);
        this.form.addEventListener('submit', this.addItemFromForm.bind(this));
      }
    };
  
    ProductForm.prototype = Object.assign({}, ProductForm.prototype, {
      addItemFromForm: function(evt, callback){
        evt.preventDefault();
  
        if (status.loading) {
          return;
        }
  
        // Loading indicator on add to cart button
        this.addToCart.classList.add('btn--loading');
  
        status.loading = true;
  
        var data = theme.utils.serialize(this.form);
  
        fetch(theme.routes.cartAdd, {
          method: 'POST',
          body: data,
          credentials: 'same-origin',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(function(data) {
          if (data.status === 422) {
            this.error(data);
          } else {
            var product = data;
            this.success(product);
          }
  
          status.loading = false;
          this.addToCart.classList.remove('btn--loading');
        }.bind(this));
      },
  
      success: function(product) {
        var errors = this.form.querySelector('.errors');
        if (errors) {
          errors.remove();
        }
  
        document.dispatchEvent(new CustomEvent('ajaxProduct:added', {
          detail: {
            product: product,
            addToCartBtn: this.addToCart
          }
        }));
      },
  
      error: function(error) {
        if (!error.description) {
          console.warn(error);
          return;
        }
  
        var errors = this.form.querySelector('.errors');
        if (errors) {
          errors.remove();
        }
  
        var errorDiv = document.createElement('div');
        errorDiv.classList.add('errors', 'text-center');
        errorDiv.textContent = error.description;
        this.form.append(errorDiv);
  
        document.dispatchEvent(new CustomEvent('ajaxProduct:error', {
          detail: {
            errorMessage: error.description
          }
        }));
      }
    });
  
    return ProductForm;
  })();
  
  theme.ProductMedia = (function() {
    var modelJsonSections = {};
    var models = {};
    var xrButtons = {};
  
    var selectors = {
      mediaGroup: '[data-product-single-media-group]',
      xrButton: '[data-shopify-xr]'
    };
  
    function init(modelViewerContainers, sectionId) {
      modelJsonSections[sectionId] = {
        loaded: false
      };
  
      modelViewerContainers.forEach(function(container, index) {
        var mediaId = container.dataset.mediaId;
        var modelViewerElement = container.querySelector('model-viewer');
        var modelId = modelViewerElement.dataset.modelId;
  
        if (index === 0) {
          var mediaGroup = container.closest(selectors.mediaGroup);
          var xrButton = mediaGroup.querySelector(selectors.xrButton);
          xrButtons[sectionId] = {
            element: xrButton,
            defaultId: modelId
          };
        }
  
        models[mediaId] = {
          modelId: modelId,
          sectionId: sectionId,
          container: container,
          element: modelViewerElement
        };
  
      });
  
      window.Shopify.loadFeatures([
        {
          name: 'shopify-xr',
          version: '1.0',
          onLoad: setupShopifyXr
        },
        {
          name: 'model-viewer-ui',
          version: '1.0',
          onLoad: setupModelViewerUi
        }
      ]);
  
      theme.LibraryLoader.load('modelViewerUiStyles');
    }
  
    function setupShopifyXr(errors) {
      if (errors) return;
  
      if (!window.ShopifyXR) {
        document.addEventListener('shopify_xr_initialized', function() {
          setupShopifyXr();
        });
        return;
      }
  
      for (var sectionId in modelJsonSections) {
        if (modelJsonSections.hasOwnProperty(sectionId)) {
          var modelSection = modelJsonSections[sectionId];
  
          if (modelSection.loaded) continue;
  
          var modelJson = document.querySelector('#ModelJson-' + sectionId);
  
          window.ShopifyXR.addModels(JSON.parse(modelJson.innerHTML));
          modelSection.loaded = true;
        }
      }
      window.ShopifyXR.setupXRElements();
    }
  
    function setupModelViewerUi(errors) {
      if (errors) return;
  
      for (var key in models) {
        if (models.hasOwnProperty(key)) {
          var model = models[key];
          if (!model.modelViewerUi && Shopify) {
            model.modelViewerUi = new Shopify.ModelViewerUI(model.element);
          }
          setupModelViewerListeners(model);
        }
      }
    }
  
    function setupModelViewerListeners(model) {
      var xrButton = xrButtons[model.sectionId];
  
      model.container.addEventListener('mediaVisible', function() {
        xrButton.element.setAttribute('data-shopify-model3d-id', model.modelId);
        if (theme.config.isTouch) return;
        model.modelViewerUi.play();
      });
  
      model.container.addEventListener('mediaHidden', function() {
        xrButton.element.setAttribute('data-shopify-model3d-id', xrButton.defaultId);
        model.modelViewerUi.pause();
      });
  
      model.container.addEventListener('xrLaunch', function() {
        model.modelViewerUi.pause();
      });
    }
  
    function removeSectionModels(sectionId) {
      for (var key in models) {
        if (models.hasOwnProperty(key)) {
          var model = models[key];
          if (model.sectionId === sectionId) {
            delete models[key];
          }
        }
      }
      delete modelJsonSections[sectionId];
    }
  
    return {
      init: init,
      removeSectionModels: removeSectionModels
    };
  })();
  
  theme.QtySelector = (function() {
    var selectors = {
      input: '.js-qty__num',
      plus: '.js-qty__adjust--plus',
      minus: '.js-qty__adjust--minus'
    };
  
    function QtySelector(el, options) {
      this.wrapper = el;
      this.plus = el.querySelector(selectors.plus);
      this.minus = el.querySelector(selectors.minus);
      this.input = el.querySelector(selectors.input);
      this.minValue = this.input.getAttribute('min') || 1;
  
      var defaults = {
        namespace: null,
        isCart: false,
        key: this.input.dataset.id
      };
  
      this.options = Object.assign({}, defaults, options);
  
      this.init();
    }
  
    QtySelector.prototype = Object.assign({}, QtySelector.prototype, {
      init: function() {
        this.plus.addEventListener('click', function() {
          var qty = this._getQty();
          this._change(qty + 1);
        }.bind(this));
  
        this.minus.addEventListener('click', function() {
          var qty = this._getQty();
          this._change(qty - 1);
        }.bind(this));
  
        this.input.addEventListener('change', function(evt) {
          this._change(this._getQty());
        }.bind(this));
      },
  
      _getQty: function() {
        var qty = this.input.value;
        if((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
          // We have a valid number!
        } else {
          // Not a number. Default to 1.
          qty = 1;
        }
        return parseInt(qty);
      },
  
      _change: function(qty) {
        if (qty <= this.minValue) {
          qty = this.minValue;
        }
  
        this.input.value = qty;
  
        if (this.options.isCart) {
          document.dispatchEvent(new CustomEvent('cart:quantity' + this.options.namespace, {
              detail: [this.options.key, qty, this.wrapper]
          }));
        }
      }
    });
  
    return QtySelector;
  })();
  
  theme.initQuickShop = function() {
    var ids = [];
    var products = document.querySelectorAll('.grid-product');
  
    if (!products.length || !theme.settings.quickView) {
      return;
    }
  
    products.forEach(product => {
      product.addEventListener('mouseover', productMouseover);
    });
  
    function productMouseover(evt) {
      var el = evt.currentTarget;
      // No quick view on mobile breakpoint
      if (!theme.config.bpSmall) {
        el.removeEventListener('mouseover', productMouseover);
        if (!el || !el.dataset.productId) {
          // Onboarding product, no real data
          return;
        }
        var productId = el.dataset.productId;
        var handle = el.dataset.productHandle;
        var btn = el.querySelector('.quick-product__btn');
        theme.preloadProductModal(handle, productId, btn);
      }
    }
  };
  
  theme.preloadProductModal = function(handle, productId, btn) {
    var holder = document.getElementById('QuickShopHolder-' + handle);
    var url = theme.routes.home + '/products/' + handle + '?view=modal';
  
    // remove double `/` in case shop might have /en or language in URL
    url = url.replace('//', '/');
  
    fetch(url).then(function(response) {
      return response.text();
    }).then(function(html) {
      // Convert the HTML string into a document object
      var parser = new DOMParser();
      var doc = parser.parseFromString(html, 'text/html');
      var div = doc.querySelector('.product-section[data-product-handle="'+handle+'"]');
  
      if (!holder) {
        return;
      }
  
      holder.append(div);
  
      // Setup quick view modal
      var modalId = 'QuickShopModal-' + productId;
      var name = 'quick-modal-' + productId;
      new theme.Modals(modalId, name);
  
      // Register product template inside quick view
      theme.sections.register('product', theme.Product, holder);
  
      // Register collapsible elements
      theme.collapsibles.init();
  
      // Register potential video modal links (when video has sound)
      theme.videoModal();
  
      if (btn) {
        btn.classList.remove('quick-product__btn--not-ready');
      }
    });
  }
  
  
  // theme.Slideshow handles all flickity based sliders
  // Child navigation is only setup to work on product images
  theme.Slideshow = (function() {
    var classes = {
      animateOut: 'animate-out',
      isPaused: 'is-paused',
      isActive: 'is-active'
    };
  
    var selectors = {
      allSlides: '.slideshow__slide',
      currentSlide: '.is-selected',
      wrapper: '.slideshow-wrapper',
      pauseButton: '.slideshow__pause'
    };
  
    var productSelectors = {
      thumb: '.product__thumb-item:not(.hide)',
      links: '.product__thumb-item:not(.hide) a',
      arrow: '.product__thumb-arrow'
    };
  
    var defaults = {
      adaptiveHeight: false,
      autoPlay: false,
      avoidReflow: false, // custom by Archetype
      childNav: null, // element. Custom by Archetype instead of asNavFor
      childNavScroller: null, // element
      childVertical: false,
      fade: false,
      initialIndex: 0,
      pageDots: false,
      pauseAutoPlayOnHover: false,
      prevNextButtons: false,
      rightToLeft: theme.config.rtl,
      setGallerySize: true,
      wrapAround: true
    };
  
    function slideshow(el, args) {
      this.el = el;
      this.args = Object.assign({}, defaults, args);
  
      // Setup listeners as part of arguments
      this.args.on = {
        ready: this.init.bind(this),
        change: this.slideChange.bind(this),
        settle: this.afterChange.bind(this)
      };
  
      if (this.args.childNav) {
        this.childNavEls = this.args.childNav.querySelectorAll(productSelectors.thumb);
        this.childNavLinks = this.args.childNav.querySelectorAll(productSelectors.links);
        this.arrows = this.args.childNav.querySelectorAll(productSelectors.arrow);
        if (this.childNavLinks.length) {
          this.initChildNav();
        }
      }
  
      if (this.args.avoidReflow) {
        avoidReflow(el);
      }
  
      this.slideshow = new Flickity(el, this.args);
  
      if (this.args.autoPlay) {
        var wrapper = el.closest(selectors.wrapper);
        this.pauseBtn = wrapper.querySelector(selectors.pauseButton);
        if (this.pauseBtn) {
          this.pauseBtn.addEventListener('click', this._togglePause.bind(this));
        }
      }
  
      // Reset dimensions on resize
      window.on('resize', theme.utils.debounce(300, function() {
        this.resize();
      }.bind(this)));
  
      // Set flickity-viewport height to first element to
      // avoid awkward page reflows while initializing.
      // Must be added in a `style` tag because element does not exist yet.
      // Slideshow element must have an ID
      function avoidReflow(el) {
        if (!el.id) return;
        var firstChild = el.firstChild;
        while(firstChild != null && firstChild.nodeType == 3){ // skip TextNodes
          firstChild = firstChild.nextSibling;
        }
        var style = document.createElement('style');
        style.innerHTML = `#${el.id} .flickity-viewport{height:${firstChild.offsetHeight}px}`;
        document.head.appendChild(style);
      }
    }
  
    slideshow.prototype = Object.assign({}, slideshow.prototype, {
      init: function(el) {
        this.currentSlide = this.el.querySelector(selectors.currentSlide);
  
        // Optional onInit callback
        if (this.args.callbacks && this.args.callbacks.onInit) {
          if (typeof this.args.callbacks.onInit === 'function') {
            this.args.callbacks.onInit();
          }
        }
  
        if (window.AOS) { AOS.refresh() }
      },
  
      slideChange: function(index) {
        // Outgoing fade styles
        if (this.args.fade && this.currentSlide) {
          this.currentSlide.classList.add(classes.animateOut);
          this.currentSlide.addEventListener('transitionend', function() {
            this.currentSlide.classList.remove(classes.animateOut);
          }.bind(this));
        }
  
        // Match index with child nav
        if (this.args.childNav) {
          this.childNavGoTo(index);
        }
  
        // Optional onChange callback
        if (this.args.callbacks && this.args.callbacks.onChange) {
          if (typeof this.args.callbacks.onChange === 'function') {
            this.args.callbacks.onChange(index);
          }
        }
  
        // Show/hide arrows depending on selected index
        if (this.arrows && this.arrows.length) {
          this.arrows[0].classList.toggle('hide', index === 0);
          this.arrows[1].classList.toggle('hide', index === (this.childNavLinks.length - 1));
        }
      },
      afterChange: function(index) {
        // Remove all fade animation classes after slide is done
        if (this.args.fade) {
          this.el.querySelectorAll(selectors.allSlides).forEach(slide => {
            slide.classList.remove(classes.animateOut);
          });
        }
  
        this.currentSlide = this.el.querySelector(selectors.currentSlide);
  
        // Match index with child nav (in case slider height changed first)
        if (this.args.childNav) {
          this.childNavGoTo(this.slideshow.selectedIndex);
        }
      },
      destroy: function() {
        this.slideshow.destroy();
      },
      _togglePause: function() {
        if (this.pauseBtn.classList.contains(classes.isPaused)) {
          this.pauseBtn.classList.remove(classes.isPaused);
          this.slideshow.playPlayer();
        } else {
          this.pauseBtn.classList.add(classes.isPaused);
          this.slideshow.pausePlayer();
        }
      },
      resize: function() {
        this.slideshow.resize();
      },
      play: function() {
        this.slideshow.playPlayer();
      },
      pause: function() {
        this.slideshow.pausePlayer();
      },
      goToSlide: function(i) {
        this.slideshow.select(i);
      },
      setDraggable: function(enable) {
        this.slideshow.options.draggable = enable;
        this.slideshow.updateDraggable();
      },
  
      initChildNav: function() {
        this.childNavLinks[this.args.initialIndex].classList.add('is-active');
  
        // Setup events
        this.childNavLinks.forEach((link, i) => {
          // update data-index because image-set feature may be enabled
          link.setAttribute('data-index', i);
  
          link.addEventListener('click', function(evt) {
            evt.preventDefault();
            this.goToSlide(this.getChildIndex(evt.currentTarget))
          }.bind(this));
          link.addEventListener('focus', function(evt) {
            this.goToSlide(this.getChildIndex(evt.currentTarget))
          }.bind(this));
          link.addEventListener('keydown', function(evt) {
            if (evt.keyCode === 13) {
              this.goToSlide(this.getChildIndex(evt.currentTarget))
            }
          }.bind(this));
        });
  
        // Setup optional arrows
        if (this.arrows.length) {
          this.arrows.forEach(arrow => {
            arrow.addEventListener('click', this.arrowClick.bind(this));
          });;
        }
      },
  
      getChildIndex: function(target) {
        return parseInt(target.dataset.index);
      },
  
      childNavGoTo: function(index) {
        this.childNavLinks.forEach(a => {
          a.classList.remove(classes.isActive);
        });
  
        var el = this.childNavLinks[index];
        el.classList.add(classes.isActive);
  
        if (this.args.childVertical) {
          var elTop = el.offsetTop;
          this.args.childNavScroller.scrollTop = elTop - 100;
        } else {
          var elLeft = el.offsetLeft;
          this.args.childNavScroller.scrollLeft = elLeft - 100;
        }
      },
  
      arrowClick: function(evt) {
        if (evt.currentTarget.classList.contains('product__thumb-arrow--prev')) {
          this.slideshow.previous();
        } else {
          this.slideshow.next();
        }
      }
    });
  
    return slideshow;
  })();
  
  /*============================================================================
    VariantAvailability
    - Cross out sold out or unavailable variants
    - To disable, set dynamicVariantsEnable to false in theme.liquid
    - Required markup:
      - class=variant-input-wrap to wrap select or button group
      - class=variant-input to wrap button/label
  ==============================================================================*/
  
  theme.VariantAvailability = (function() {
    var classes = {
      disabled: 'disabled'
    };
  
    function availability(args) {
      this.type = args.type;
      this.variantSelectors = args.variantSelectors;
      this.variantsObject = args.variantsObject;
      this.currentVariantObject = args.currentVariantObject;
      this.form = args.form;
  
      this.init();
    }
  
    availability.prototype = Object.assign({}, availability.prototype, {
      init: function() {
        this.variantSelectors.forEach(el => {
          el.on('change', this.setAvailability.bind(this))
        });
  
        // Set default state based on current selected variant
        this.setAvailability(null, this.currentVariantObject);
      },
  
      setAvailability: function(evt, variant) {
        // Object to hold all options by value.
        // This will be what sets a button/dropdown as
        // sold out or unavailable (not a combo set as purchasable)
        var valuesToManage = {
          option1: [],
          option2: [],
          option3: []
        };
  
        var ignoreIndex = null;
        var variants;
        // If working with an event, get variants to loop through
        // based on the group index of recently selected option.
        // If variant object passed explicitly (on load), get variants
        // that overlap with all potential combinations
        if (evt) {
          var el = evt.currentTarget;
          var val = el.value;
          var index = el.dataset.index;
          variants = this.variantsObject.filter(function(el) {
            return el[index] === val;
          });
        } else {
          var availableVariants = this.variantsObject.filter(function(el) {
            if (variant.id === el.id) {
              return false;
            }
  
            if (variant.option2 === el.option2 && variant.option3 === el.option3) {
              return true;
            }
  
            if (variant.option1 === el.option1 && variant.option3 === el.option3) {
              return true;
            }
  
            if (variant.option1 === el.option1 && variant.option2 === el.option2) {
              return true;
            }
          });
  
          // IE11 can't handle shortform of {variant} so extra step is needed
          var variantObject = {
            variant: variant
          };
  
          variants = Object.assign({}, variantObject, availableVariants);
        }
  
        // Disable all options to start.
        // If coming from a variant change event, do not disable
        // options inside current index group
        this.form.querySelectorAll('.variant-input-wrap').forEach(group => {
          var groupIndex = group.dataset.index;
          if (evt && groupIndex === index) {
            ignoreIndex = index;
            return;
          }
  
          this.disableVariantGroup(group);
        });
  
        // Loop through each available variant to gather variant values
        for (var property in variants) {
          if (variants.hasOwnProperty(property)) {
            var item = variants[property];
            var value1 = item.option1;
            var value2 = item.option2;
            var value3 = item.option3;
            var soldOut = item.available === false;
  
            if (value1 && ignoreIndex !== 'option1') {
              valuesToManage.option1.push({
                value: value1,
                soldOut: soldOut
              });
            }
            if (value2 && ignoreIndex !== 'option2') {
              valuesToManage.option2.push({
                value: value2,
                soldOut: soldOut
              });
            }
            if (value3 && ignoreIndex !== 'option3') {
              valuesToManage.option3.push({
                value: value3,
                soldOut: soldOut
              });
            }
          }
        }
  
        // Loop through all option levels and send each
        // value w/ args to function that determines to show/hide/enable/disable
        for (var [option, values] of Object.entries(valuesToManage)) {
          this.manageOptionState(option, values);
        }
      },
  
      manageOptionState: function(option, values) {
        var group = this.form.querySelector('.variant-input-wrap[data-index="'+ option +'"]');
  
        // Loop through each option value
        values.forEach(obj => {
          this.enableVariantOption(group, obj);
        });
      },
  
      enableVariantOptionByValue: function(array, index) {
        var group = this.form.querySelector('.variant-input-wrap[data-index="'+ index +'"]');
  
        for (var i = 0; i < array.length; i++) {
          this.enableVariantOption(group, array[i]);
        }
      },
  
      enableVariantOption: function(group, obj) {
        // Selecting by value so escape it
        var value = obj.value.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g,'\\$1');
  
        if (this.type === 'dropdown') {
          group.querySelector('option[value="'+ value +'"]').disabled = false;
        } else {
          var buttonGroup = group.querySelector('.variant-input[data-value="'+ value +'"]');
          var input = buttonGroup.querySelector('input');
          var label = buttonGroup.querySelector('label');
  
          // Variant exists - enable & show variant
          input.classList.remove(classes.disabled);
          label.classList.remove(classes.disabled);
  
          // Variant sold out - cross out option (remains selectable)
          if (obj.soldOut) {
            input.classList.add(classes.disabled);
            label.classList.add(classes.disabled);
          }
        }
      },
  
      disableVariantGroup: function(group) {
        if (this.type === 'dropdown') {
          group.querySelectorAll('option').forEach(option => {
            option.disabled = true;
          });
        } else {
          group.querySelectorAll('input').forEach(input => {
            input.classList.add(classes.disabled);
          });
          group.querySelectorAll('label').forEach(label => {
            label.classList.add(classes.disabled);
          });
        }
      }
  
    });
  
    return availability;
  })();
  
  // Video modal will auto-initialize for any anchor link that points to YouTube
  // MP4 videos must manually be enabled with:
  //   - .product-video-trigger--mp4 (trigger button)
  //   - .product-video-mp4-sound video player element (cloned into modal)
  //     - see media.liquid for example of this
  theme.videoModal = function() {
    var youtubePlayer;
  
    var videoHolderId = 'VideoHolder';
    var selectors = {
      youtube: 'a[href*="youtube.com/watch"], a[href*="youtu.be/"]',
      mp4Trigger: '.product-video-trigger--mp4',
      mp4Player: '.product-video-mp4-sound'
    };
  
    var youtubeTriggers = document.querySelectorAll(selectors.youtube);
    var mp4Triggers = document.querySelectorAll(selectors.mp4Trigger);
  
    if (!youtubeTriggers.length && !mp4Triggers.length) {
      return;
    }
  
    var videoHolderDiv = document.getElementById(videoHolderId);
  
    if (youtubeTriggers.length) {
      theme.LibraryLoader.load('youtubeSdk');
    }
  
    var modal = new theme.Modals('VideoModal', 'video-modal', {
      closeOffContentClick: true,
      solid: true
    });
  
    youtubeTriggers.forEach(btn => {
      btn.addEventListener('click', triggerYouTubeModal);
    });
  
    mp4Triggers.forEach(btn => {
      btn.addEventListener('click', triggerMp4Modal);
    });
  
    document.addEventListener('modalClose.VideoModal', closeVideoModal);
  
    function triggerYouTubeModal(evt) {
      // If not already loaded, treat as normal link
      if (!theme.config.youTubeReady) {
        return;
      }
  
      evt.preventDefault();
      emptyVideoHolder();
  
      modal.open(evt);
  
      var videoId = getYoutubeVideoId(evt.currentTarget.getAttribute('href'));
      youtubePlayer = new theme.YouTube(
        videoHolderId,
        {
          videoId: videoId,
          style: 'sound',
          events: {
            onReady: onYoutubeReady
          }
        }
      );
    }
  
    function triggerMp4Modal(evt) {
      emptyVideoHolder();
  
      var el = evt.currentTarget;
      var player = el.parentNode.querySelector(selectors.mp4Player);
  
      // Clone video element and place it in the modal
      var playerClone = player.cloneNode(true);
      playerClone.classList.remove('hide');
  
      videoHolderDiv.append(playerClone);
      modal.open(evt);
  
      // Play new video element
      videoHolderDiv.querySelector('video').play();
    }
  
    function onYoutubeReady(evt) {
      evt.target.unMute();
      evt.target.playVideo();
    }
  
    function getYoutubeVideoId(url) {
      var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
      var match = url.match(regExp);
      return (match&&match[7].length==11)? match[7] : false;
    }
  
    function emptyVideoHolder() {
      videoHolderDiv.innerHTML = '';
    }
  
    function closeVideoModal() {
      if (youtubePlayer && typeof youtubePlayer.destroy === 'function') {
        youtubePlayer.destroy();
      } else {
        emptyVideoHolder();
      }
    }
  };
  
  

  theme.announcementBar = (function() {
    var args = {
      autoPlay: 5000,
      avoidReflow: true,
      cellAlign: theme.config.rtl ? 'right' : 'left'
    };
    var bar;
    var flickity;
  
    function init() {
      bar = document.getElementById('AnnouncementSlider');
      if (!bar) {
        return;
      }
  
      unload();
  
      if (bar.dataset.blockCount === 1) {
        return;
      }
  
      if (theme.config.bpSmall || bar.dataset.compact === 'true') {
        initSlider();
      }
  
      document.addEventListener('matchSmall', function() {
        unload();
        initSlider();
      });
  
      document.addEventListener('unmatchSmall', function() {
        unload();
        if (bar.dataset.compact === 'true') {
          initSlider();
        }
      });
    }
  
    function initSlider() {
      flickity = new theme.Slideshow(bar, args);
    }
  
    // Go to slide if selected in the editor
    function onBlockSelect(id) {
      var slide = bar.querySelector('#AnnouncementSlide-' + id);
      var index = parseInt(slide.dataset.index);
  
      if (flickity && typeof flickity.pause === 'function') {
        flickity.goToSlide(index);
        flickity.pause();
      }
    }
  
    function onBlockDeselect() {
      if (flickity && typeof flickity.play === 'function') {
        flickity.play();
      }
    }
  
    function unload() {
      if (flickity && typeof flickity.destroy === 'function') {
        flickity.destroy();
      }
    }
  
    return {
      init: init,
      onBlockSelect: onBlockSelect,
      onBlockDeselect: onBlockDeselect,
      unload: unload
    };
  })();
  
  theme.customerTemplates = function() {
    checkUrlHash();
    initEventListeners();
    resetPasswordSuccess();
    customerAddressForm();
  
    function checkUrlHash() {
      var hash = window.location.hash;
  
      // Allow deep linking to recover password form
      if (hash === '#recover') {
        toggleRecoverPasswordForm();
      }
    }
  
    function toggleRecoverPasswordForm() {
      var passwordForm = document.getElementById('RecoverPasswordForm').classList.toggle('hide');
      var loginForm = document.getElementById('CustomerLoginForm').classList.toggle('hide');
    }
  
    function initEventListeners() {
      // Show reset password form
      var recoverForm = document.getElementById('RecoverPassword');
      if (recoverForm) {
        recoverForm.addEventListener('click', function(evt) {
          evt.preventDefault();
          toggleRecoverPasswordForm();
        });
      }
  
      // Hide reset password form
      var hideRecoverPassword = document.getElementById('HideRecoverPasswordLink');
      if (hideRecoverPassword) {
        hideRecoverPassword.addEventListener('click', function(evt) {
          evt.preventDefault();
          toggleRecoverPasswordForm();
        });
      }
    }
  
    function resetPasswordSuccess() {
      var formState = document.querySelector('.reset-password-success');
  
      // check if reset password form was successfully submitted
      if (!formState) {
        return;
      }
  
      // show success message
      document.getElementById('ResetSuccess').classList.remove('hide');
    }
  
    function customerAddressForm() {
      var newAddressForm = document.getElementById('AddressNewForm');
      var addressForms = document.querySelectorAll('.js-address-form');
  
      if (!newAddressForm || !addressForms.length) {
        return;
      }
  
      // Country/province selector can take a short time to load
      setTimeout(function() {
        document.querySelectorAll('.js-address-country').forEach(el => {
          var countryId = el.dataset.countryId;
          var provinceId = el.dataset.provinceId;
          var provinceContainerId = el.dataset.provinceContainerId;
  
          new Shopify.CountryProvinceSelector(
            countryId,
            provinceId,
            {
              hideElement: provinceContainerId
            }
          );
        });
      }, 1000);
  
      // Toggle new/edit address forms
      document.querySelector('.address-new-toggle').addEventListener('click', function() {
        newAddressForm.classList.toggle('hide');
      });
  
      document.querySelectorAll('.address-edit-toggle').forEach(el => {
        el.addEventListener('click', function(evt) {
          var formId = evt.currentTarget.dataset.formId;
          document.getElementById('EditAddress_' + formId).classList.toggle('hide');
        });
      });
  
      document.querySelectorAll('.address-delete').forEach(el => {
        el.addEventListener('click', function(evt) {
          var formId = evt.currentTarget.dataset.formId;
          var confirmMessage = evt.currentTarget.dataset.confirmMessage;
  
          if (confirm(confirmMessage || 'Are you sure you wish to delete this address?')) {
            if (Shopify) {
              Shopify.postLink('/account/addresses/' + formId, {parameters: {_method: 'delete'}});
            }
          }
        })
      });
    }
  };
  
  theme.CartDrawer = (function() {
    var selectors = {
      drawer: '#CartDrawer',
      form: '#CartDrawerForm'
    };
  
    function CartDrawer() {
      this.form = document.querySelector(selectors.form);
      this.drawer = new theme.Drawers('CartDrawer', 'cart');
  
      this.init();
    }
  
    CartDrawer.prototype = Object.assign({}, CartDrawer.prototype, {
      init: function() {
        this.cartForm = new theme.CartForm(this.form);
        this.cartForm.buildCart();
  
        document.addEventListener('ajaxProduct:added', function(evt) {
          this.cartForm.buildCart();
          this.open();
        }.bind(this));
  
        // Dev-friendly way to open cart
        document.addEventListener('cart:open', this.open.bind(this));
        document.addEventListener('cart:close', this.close.bind(this));
      },
  
      open: function() {
        this.drawer.open();
      },
  
      close: function() {
        this.drawer.close();
      }
    });
  
    return CartDrawer;
  })();
  
  theme.headerNav = (function() {
    var selectors = {
      wrapper: '#HeaderWrapper',
      siteHeader: '#SiteHeader',
      searchBtn: '.js-search-header',
      closeSearch: '#SearchClose',
      searchContainer: '.site-header__search-container',
      logo: '#LogoContainer img',
      megamenu: '.megamenu',
      navItems: '.site-nav__item',
      navLinks: '.site-nav__link',
      navLinksWithDropdown: '.site-nav__link--has-dropdown',
      navDropdownLinks: '.site-nav__dropdown-link--second-level'
    };
  
    var classes = {
      hasDropdownClass: 'site-nav--has-dropdown',
      hasSubDropdownClass: 'site-nav__deep-dropdown-trigger',
      dropdownActive: 'is-focused'
    };
  
    var config = {
      namespace: '.siteNav',
      wrapperOverlayed: false,
      overlayedClass: 'is-light',
      overlayEnabledClass: 'header-wrapper--sticky',
      stickyEnabled: false,
      stickyActive: false,
      stickyClass: 'site-header--stuck',
      stickyHeaderWrapper: 'StickyHeaderWrap',
      openTransitionClass: 'site-header--opening',
      lastScroll: 0
    };
  
    // Elements used in resize functions, defined in init
    var wrapper;
    var siteHeader;
  
    function init() {
      wrapper = document.querySelector(selectors.wrapper);
      siteHeader = document.querySelector(selectors.siteHeader);
  
      config.stickyEnabled = (siteHeader.dataset.sticky === 'true');
      if (config.stickyEnabled) {
        config.wrapperOverlayed = wrapper.classList.contains(config.overlayedClass);
        stickyHeaderCheck();
      }
  
      theme.settings.overlayHeader = (siteHeader.dataset.overlay === 'true');
      // Disable overlay header if on collection template with no collection image
      if (theme.settings.overlayHeader && Shopify && Shopify.designMode) {
        if (document.body.classList.contains('template-collection') && !document.querySelector('.collection-hero')) {
          this.disableOverlayHeader();
        }
      }
  
      accessibleDropdowns();
      searchDrawer();
  
      window.on('load' + config.namespace, resizeLogo);
      window.on('resize' + config.namespace, theme.utils.debounce(150, resizeLogo));
    }
  
    // If the header setting to overlay the menu on the collection image
    // is enabled but the collection setting is disabled, we need to undo
    // the init of the sticky nav
    function disableOverlayHeader() {
      wrapper.classList.remove(config.overlayEnabledClass, config.overlayedClass);
      config.wrapperOverlayed = false;
      theme.settings.overlayHeader = false;
    }
  
    function stickyHeaderCheck() {
      // Disable sticky header if any mega menu is taller than window
      theme.config.stickyHeader = doesMegaMenuFit();
  
      if (theme.config.stickyHeader) {
        config.forceStopSticky = false;
        stickyHeader();
      } else {
        config.forceStopSticky = true;
      }
    }
  
    function doesMegaMenuFit() {
      var largestMegaNav = 0;
      siteHeader.querySelectorAll(selectors.megamenu).forEach(nav => {
        var h = nav.offsetHeight;
        if (h > largestMegaNav) {
          largestMegaNav = h;
        }
      });
  
      // 120 ~ space of visible header when megamenu open
      if (window.innerHeight < (largestMegaNav + 120)) {
        return false;
      }
  
      return true;
    }
  
    function stickyHeader() {
      config.lastScroll = 0;
  
      var wrapWith = document.createElement('div');
      wrapWith.id = config.stickyHeaderWrapper;
      theme.utils.wrap(siteHeader, wrapWith);
  
      stickyHeaderHeight();
  
      window.on('resize' + config.namespace, theme.utils.debounce(50, stickyHeaderHeight));
      window.on('scroll' + config.namespace, theme.utils.throttle(20, stickyHeaderScroll));
  
      // This gets messed up in the editor, so here's a fix
      if (Shopify && Shopify.designMode) {
        setTimeout(function() {
          stickyHeaderHeight();
        }, 250);
      }
    }
  
    function stickyHeaderHeight() {
      if (!config.stickyEnabled) {
        return;
      }
      var h = siteHeader.offsetHeight;
      var stickyHeader = document.querySelector('#' + config.stickyHeaderWrapper);
      stickyHeader.style.height = h + 'px';
    }
  
    function stickyHeaderScroll() {
      if (!config.stickyEnabled) {
        return;
      }
  
      if (config.forceStopSticky) {
        return;
      }
  
      requestAnimationFrame(scrollHandler);
  
      config.lastScroll = window.scrollY;
    }
  
    function scrollHandler() {
      if (window.scrollY > 250) {
        if (config.stickyActive) {
          return;
        }
  
        config.stickyActive = true;
  
        siteHeader.classList.add(config.stickyClass);
        if (config.wrapperOverlayed) {
          wrapper.classList.remove(config.overlayedClass);
        }
  
        // Add open transition class after element is set to fixed
        // so CSS animation is applied correctly
        setTimeout(function() {
          siteHeader.classList.add(config.openTransitionClass);
        }, 100);
      } else {
        if (!config.stickyActive) {
          return;
        }
  
        config.stickyActive = false;
  
        siteHeader.classList.remove(config.openTransitionClass);
        siteHeader.classList.remove(config.stickyClass);
        if (config.wrapperOverlayed) {
          wrapper.classList.add(config.overlayedClass);
        }
      }
    }
  
    function accessibleDropdowns() {
      var hasActiveDropdown = false;
      var hasActiveSubDropdown = false;
      var closeOnClickActive = false;
  
      // Touch devices open dropdown on first click, navigate to link on second
      if (theme.config.isTouch) {
        document.querySelectorAll(selectors.navLinksWithDropdown).forEach(el => {
          el.on('touchend' + config.namespace, function(evt) {
            var parent = evt.currentTarget.parentNode;
            if (!parent.classList.contains(classes.dropdownActive)) {
              evt.preventDefault();
              closeDropdowns();
              openFirstLevelDropdown(evt.currentTarget);
            } else {
              window.location.replace(evt.currentTarget.getAttribute('href'));
            }
          });
        });
      }
  
      // Open/hide top level dropdowns
      document.querySelectorAll(selectors.navLinks).forEach(el => {
        el.on('focusin' + config.namespace, accessibleMouseEvent);
        el.on('mouseover' + config.namespace, accessibleMouseEvent);
        el.on('mouseleave' + config.namespace, closeDropdowns);
      });
  
      document.querySelectorAll(selectors.navDropdownLinks).forEach(el => {
        if (theme.config.isTouch) {
          el.on('touchend' + config.namespace, function(evt) {
            var parent = evt.currentTarget.parentNode;
  
            // Open third level menu or go to link based on active state
            if (parent.classList.contains(classes.hasSubDropdownClass)) {
              if (!parent.classList.contains(classes.dropdownActive)) {
                evt.preventDefault();
                closeThirdLevelDropdown();
                openSecondLevelDropdown(evt.currentTarget);
              } else {
                window.location.replace(evt.currentTarget.getAttribute('href'));
              }
            } else {
              // No third level nav, go to link
              window.location.replace(evt.currentTarget.getAttribute('href'));
            }
          });
        }
  
        // Open/hide sub level dropdowns
        el.on('focusin' + config.namespace, function(evt) {
          closeThirdLevelDropdown();
          openSecondLevelDropdown(evt.currentTarget, true);
        })
      });
  
      function accessibleMouseEvent(evt) {
        if (hasActiveDropdown) {
          closeSecondLevelDropdown();
        }
  
        if (hasActiveSubDropdown) {
          closeThirdLevelDropdown();
        }
  
        openFirstLevelDropdown(evt.currentTarget);
      }
  
      // Private dropdown functions
      function openFirstLevelDropdown(el) {
        var parent = el.parentNode;
        if (parent.classList.contains(classes.hasDropdownClass)) {
          parent.classList.add(classes.dropdownActive);
          hasActiveDropdown = true;
        }
  
        if (!theme.config.isTouch) {
          if (!closeOnClickActive) {
            var eventType = theme.config.isTouch ? 'touchend' : 'click';
            closeOnClickActive = true;
            document.documentElement.on(eventType + config.namespace, function() {
              closeDropdowns();
              document.documentElement.off(eventType + config.namespace);
              closeOnClickActive = false;
            }.bind(this));
          }
        }
      }
  
      function openSecondLevelDropdown(el, skipCheck) {
        var parent = el.parentNode;
        if (parent.classList.contains(classes.hasSubDropdownClass) || skipCheck) {
          parent.classList.add(classes.dropdownActive);
          hasActiveSubDropdown = true;
        }
      }
  
      function closeDropdowns() {
        closeSecondLevelDropdown();
        closeThirdLevelDropdown();
      }
  
      function closeSecondLevelDropdown() {
        document.querySelectorAll(selectors.navItems).forEach(el => {
          el.classList.remove(classes.dropdownActive)
        });
      }
  
      function closeThirdLevelDropdown() {
        document.querySelectorAll(selectors.navDropdownLinks).forEach(el => {
          el.parentNode.classList.remove(classes.dropdownActive);
        });
      }
    }
  
    function searchDrawer() {
      document.querySelectorAll(selectors.searchBtn).forEach(btn => {
        btn.addEventListener('click', openSearchDrawer);
      });
  
      document.querySelector(selectors.closeSearch).addEventListener('click', closeSearchDrawer);
    }
  
    function openSearchDrawer(evt) {
      evt.preventDefault();
      evt.stopImmediatePropagation();
      var container = document.querySelector(selectors.searchContainer);
      theme.utils.prepareTransition(container, function() {
        container.classList.add('is-active');
      }.bind(this));
  
      document.documentElement.classList.add('js-drawer-open', 'js-drawer-open--search');
  
      setTimeout(function() {
        theme.a11y.trapFocus({
          container: container,
          namespace: 'header_search',
          elementToFocus: container.querySelector('.site-header__search-input')
        });
      }, 100);
  
      // If sticky is enabled, scroll to top on mobile when close to it
      // so you don't get an invisible search box
      if (theme.config.bpSmall && config.stickyEnabled && config.lastScroll < 300) {
        window.scrollTo(0,0);
      }
  
      // Bind events
      theme.a11y.lockMobileScrolling(config.namespace);
  
      bindSearchEvents();
    }
  
    function closeSearchDrawer(evt) {
      // Do not close if click event came from inside drawer
      if (evt) {
        // evt.path is non-standard, so have fallback
        var path = evt.path || (evt.composedPath && evt.composedPath());
        for (var i = 0; i < path.length; i++) {
          if (path[i].classList) {
            if (path[i].classList.contains('site-header__search-btn')) {
              break;
            }
  
            if (path[i].classList.contains('site-header__search-container')) {
              return;
            }
          }
        }
      }
  
      // deselect any focused form elements
      document.activeElement.blur();
  
      document.documentElement.classList.add('js-drawer-closing');
      document.documentElement.classList.remove('js-drawer-open', 'js-drawer-open--search');
  
      window.setTimeout(function() {
        document.documentElement.classList.remove('js-drawer-closing');
      }.bind(this), 500);
  
      var container = document.querySelector(selectors.searchContainer);
      theme.utils.prepareTransition(container, function() {
        container.classList.remove('is-active');
      }.bind(this));
  
      theme.a11y.removeTrapFocus({
        container: container,
        namespace: 'header_search'
      });
  
      theme.a11y.unlockMobileScrolling(config.namespace);
  
      unbindSearchEvents();
    }
  
    function bindSearchEvents() {
      window.on('keyup' + config.namespace, function(evt) {
        if (evt.keyCode === 27) {
          closeSearchDrawer();
        }
      }.bind(this));
  
      // Clicking out of container closes it
      document.documentElement.on('click' + config.namespace, function(evt) {
        closeSearchDrawer(evt);
      }.bind(this));
    }
  
    function unbindSearchEvents() {
      window.off('keyup' + config.namespace);
      document.documentElement.off('click' + config.namespace);
    }
  
    function resizeLogo(evt) {
      document.querySelectorAll(selectors.logo).forEach(logo => {
        var logoWidthOnScreen = logo.clientWidth;
        var containerWidth = logo.closest('.header-item').clientWidth;
  
        // If image exceeds container, let's make it smaller
        if (logoWidthOnScreen > containerWidth) {
          logo.style.maxWidth = containerWidth;
        }
        else {
          logo.removeAttribute('style')
        }
      });
    }
    return {
      init: init,
      disableOverlayHeader: disableOverlayHeader
    };
  })();
  
  window.onpageshow = function(evt) {
    // Removes unload class when returning to page via history
    if (evt.persisted) {
      document.body.classList.remove('unloading');
      document.querySelectorAll('.cart__checkout').forEach(el => {
        el.classList.remove('btn--loading');
      });
    }
  };
  
  theme.predictiveSearch = (function() {
    var currentString = '';
    var isLoading = false;
    var searchTimeout;
    var namespace = '.predictive';
  
    var selectors = {
      form: '#HeaderSearchForm',
      input: 'input[type="search"]',
      wrapper: '#PredictiveWrapper',
      resultDiv: '#PredictiveResults',
  
      searchButton: '[data-predictive-search-button]'
    };
  
    var cache = {};
    var config = {
      imageSize: 'square'
    }
  
    var classes = {
      isActive: 'predicitive-active'
    };
  
    var keys = {
      up_arrow: 38,
      down_arrow: 40,
      tab: 9
    };
  
    function init() {
      // Only some languages support predictive search
      if (document.getElementById('shopify-features')) {
        var supportedShopifyFeatures = JSON.parse(document.getElementById('shopify-features').innerHTML);
        if (!supportedShopifyFeatures.predictiveSearch) {
          return;
        }
      }
  
      cache.wrapper = document.querySelector(selectors.wrapper);
  
      if (!cache.wrapper) {
        return;
      }
  
      config.imageSize = cache.wrapper.dataset.imageSize;
  
      cache.form = document.querySelector(selectors.form);
      cache.form.setAttribute('autocomplete', 'off');
      cache.form.on('submit' + namespace, submitSearch);
  
      cache.input = cache.form.querySelector(selectors.input);
      cache.input.on('keyup' + namespace, handleKeyup);
  
      cache.submit = cache.wrapper.querySelector(selectors.searchButton);
      cache.submit.on('click' + namespace, triggerSearch);
  
      cache.results = document.querySelector(selectors.resultDiv);
    }
  
    function reset() {
      cache.wrapper.classList.add('hide');
      cache.results.innerHTML = '';
      clearTimeout(searchTimeout);
    }
  
    function triggerSearch() {
      cache.form.submit();
    }
  
    // Append * wildcard to search
    function submitSearch(evt) {
      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;
  
      var obj = {};
      var formData = new FormData(evt.target);
      for (var key of formData.keys()) {
        obj[key] = formData.get(key);
      }
  
      if (obj.q) {
        obj.q += '*';
      }
  
      var params = paramUrl(obj);
  
      window.location.href = '/search?' + params;
      return false;
    }
  
    function handleKeyup(evt) {
      if (evt.keyCode === keys.up_arrow) {
        return;
      }
  
      if (evt.keyCode === keys.down_arrow) {
        return;
      }
  
      if (evt.keyCode === keys.tab) {
        return;
      }
  
      search();
    }
  
    function search() {
      var keyword = cache.input.value;
  
      if (keyword === '') {
        reset();
        return;
      }
  
      var q = _normalizeQuery(keyword);
  
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(
        function () {
          predictQuery(q);
        }.bind(this),
        500
      );
    }
  
    function predictQuery(q) {
      if (isLoading) {
        return;
      }
  
      // Do not re-search the same thing
      if (currentString === q) {
        return;
      }
  
      currentString = q;
      isLoading = true;
  
      var searchObj = {
        'q': q,
        'resources[type]': theme.settings.predictiveSearchType,
        'resources[limit]': 4,
        'resources[options][unavailable_products]': 'last',
        'resources[options][fields]': 'title,product_type,variants.title,vendor'
      };
  
      var params = paramUrl(searchObj);
  
      fetch('/search/suggest.json?' + params)
      .then(response => response.json())
      .then(suggestions => {
        isLoading = false;
        var data = {};
        var resultCount = 0;
  
        cache.wrapper.classList.remove('hide');
        var resultTypes = Object.entries(suggestions.resources.results);
  
        Object.keys(resultTypes).forEach(function (i) {
          var obj = resultTypes[i];
          var type = obj[0];
          var results = obj[1];
          resultCount += results.length;
  
          switch(type) {
            case 'products':
              data[type] = buildProducts(results);
              break;
            case 'collections':
              data[type] = buildCollections(results);
              break;
            case 'pages':
              data[type] = buildPages(results);
              break;
            case 'articles':
              data[type] = buildArticles(results);
              break;
          }
        });
  
        if (resultCount === 0) {
          reset();
          return;
        }
  
        // Build and append result markup
        var output = buildOutput(data);
        cache.results.innerHTML = '';
        cache.results.innerHTML = output;
      });
    }
  
    function buildProducts(results) {
      var output = '';
      var products = [];
  
      results.forEach(product => {
        var new_product = {
          title: product.title,
          url: product.url,
          image_responsive_url: theme.Images.lazyloadImagePath(product.image),
          image_aspect_ratio: product.featured_image.aspect_ratio
        };
  
        products.push(new_product);
      });
  
      if (products.length) {
        var markup = theme.buildProductGridItem(products, 'small--one-half medium-up--one-quarter', 4, config.imageSize);
  
        output = `
          <div data-type-products>
            <div class="grid grid--uniform">
              ${markup}
            </div>
          </div>
        `;
      }
  
      return output;
    }
  
    function buildCollections(collections) {
      var output = '';
  
      if (collections.length) {
        var markup = theme.buildCollectionItem(collections);
  
        output = `
          <div data-type-collections>
            <p class="h6 predictive__label">${theme.strings.searchCollections}</p>
            <ul class="no-bullets">
              ${markup}
            </ul>
          </div>
        `;
      }
  
      return output;
    }
  
    function buildPages(pages) {
      var output = '';
  
      if (pages.length) {
        var markup = theme.buildPageItem(pages);
  
        output = `
          <div data-type-pages>
            <p class="h6 predictive__label">${theme.strings.searchPages}</p>
            <ul class="no-bullets">
              ${markup}
            </ul>
          </div>
        `;
      }
  
      return output;
    }
  
    // Overwrite full sized image returned form API
    // with lazyloading-friendly path
    function buildArticles(articles) {
      var output = '';
  
      articles.forEach(article => {
        if (article.image) {
          article.image = theme.Images.getSizedImageUrl(article.image, '200x200_crop_center');
        }
      });
  
      if (articles.length) {
        var markup = theme.buildArticleItem(articles, config.imageSize);
  
        output = `
          <div data-type-articles>
            <p class="h6 predictive__label">${theme.strings.searchArticles}</p>
            <div class="grid grid--uniform">
              ${markup}
            </div>
          </div>
        `;
      }
  
      return output;
    }
  
    // Combine all search result markup and print to page
    function buildOutput(data) {
      var output = '';
  
      if (data.products && data.products !== '') {
        output += data.products;
      }
  
      if (data.collections && data.collections !== '') {
        output += data.collections;
      }
  
      if (data.pages && data.pages !== '') {
        output += data.pages;
      }
  
      if (data.articles && data.articles !== '') {
        output += data.articles;
      }
  
      return output;
    }
  
    function _normalizeQuery(string) {
      if (typeof string !== 'string') {
        return null;
      }
  
      return string
        .trim()
        .replace(/\ /g, '-')
        .toLowerCase();
    }
  
    function paramUrl(obj) {
      return Object.keys(obj).map(function(key) {
        return key + '=' + encodeURIComponent(obj[key]);
      }).join('&')
    }
  
    return {
      init: init
    };
  })();
  
  theme.buildProductGridItem = function(items, gridWidth, rowOf, imageSize) {
    var output = '';
  
    items.forEach(product => {
      var image = theme.buildProductImage(product, imageSize);
      var markup = `
        <div class="grid__item grid-product ${gridWidth} aos-animate" data-aos="row-of-${rowOf}">
          <div class="grid-product__content">
            <a href="${product.url}" class="grid-product__link">
              <div class="grid-product__image-mask">
                ${image}
              </div>
              <div class="grid-product__meta">
                <div class="grid-product__title">${product.title}</div>
              </div>
            </a>
          </div>
        </div>
      `;
  
      output += markup;
    });
  
    return output;
  }
  
  theme.buildProductImage = function(product, imageSize) {
    var size = imageSize ? imageSize : theme.settings.productImageSize;
    var output = '';
  
    if (size === 'natural') {
      output = `
        <div class="image-wrap" style="height: 0; padding-bottom: ${product.image_aspect_ratio}%;">
          <img class="grid-product__image lazyload"
            data-src="${product.image_responsive_url}"
            data-widths="[180, 360, 540, 720, 900]"
            data-aspectratio="${product.image_aspect_ratio}"
            data-sizes="auto"
            alt="${product.title}">
        </div>`;
    } else {
      var classes = 'lazyload';
      if (!theme.settings.productImageCover) {
        classes += ' grid__image-contain';
      }
      output = `
        <div class="grid__image-ratio grid__image-ratio--${size}">
          <img class="${classes}"
              data-src="${product.image_responsive_url}"
              data-widths="[360, 540, 720, 900, 1080]"
              data-aspectratio="${product.aspect_ratio}"
              data-sizes="auto"
              alt="${product.title}">
        </div>
      `;
    }
  
    return output;
  }
  
  theme.buildCollectionItem = function(items) {
    var output = '';
  
    items.forEach(collection => {
      var markup = `
        <li>
          <a href="${collection.url}">
            ${collection.title}
          </a>
        </li>
      `;
  
      output += markup;
    });
  
    return output;
  }
  
  theme.buildPageItem = function(items) {
    var output = '';
  
    items.forEach(page => {
      var markup = `
        <li>
          <a href="${page.url}">
            ${page.title}
          </a>
        </li>
      `;
  
      output += markup;
    });
  
    return output;
  }
  
  theme.buildArticleItem = function(items, imageSize) {
    var output = '';
  
    items.forEach(article => {
      var image = theme.buildPredictiveImage(article);
      var markup = `
        <div class="grid__item grid-product small--one-half medium-up--one-quarter" data-aos="row-of-4">
          <a href="${article.url}" class="grid-product__link grid-product__link--inline">
            <div class="grid-product__image-mask">
              <div
                class="grid__image-ratio grid__image-ratio--object grid__image-ratio--${imageSize}">
                <div class="predictive__image-wrap">
                  ${image}
                </div>
              </div>
            </div>
            <div class="grid-product__meta">
              ${article.title}
            </div>
          </a>
        </div>
      `;
  
      output += markup;
    });
  
    return output;
  }
  
  theme.buildPredictiveImage = function(obj) {
    var imageMarkup = '';
    if (obj.image) {
      imageMarkup = `<img class="lazyload"
            data-src="${obj.image}"
            data-widths="[360, 540, 720]"
            data-sizes="auto">`;
    }
    return imageMarkup;
  }
  

  theme.Maps = (function() {
    var config = {
      zoom: 14
    };
    var apiStatus = null;
    var mapsToLoad = [];
  
    var errors = {};
  
    var selectors = {
      section: '[data-section-type="map"]',
      map: '[data-map]',
      mapOverlay: '.map-section__overlay'
    };
  
    // Global function called by Google on auth errors.
    // Show an auto error message on all map instances.
    window.gm_authFailure = function() {
      if (!Shopify.designMode) {
        return;
      }
  
      document.querySelectorAll(selectors.section).forEach(section => {
        section.classList.add('map-section--load-error');
      });
  
      document.querySelectorAll(selectors.map).forEach(map => {
        map.parentNode.removeChild(map);
      });
  
      window.mapError(theme.strings.authError);
    };
  
    window.mapError = function(error) {
      var message = document.createElement('div');
      message.classList.add('map-section__error', 'errors', 'text-center');
      message.innerHTML = error;
      document.querySelectorAll(selectors.mapOverlay).forEach(overlay => {
        overlay.parentNode.prepend(message);
      });
      document.querySelectorAll('.map-section__link').forEach(link => {
        link.classList.add('hide');
      });
    };
  
    function Map(container) {
      this.container = container;
      this.sectionId = this.container.getAttribute('data-section-id');
      this.namespace = '.map-' + this.sectionId;
      this.map = container.querySelector(selectors.map);
      this.key = this.map.dataset.apiKey;
  
      errors = {
        addressNoResults: theme.strings.addressNoResults,
        addressQueryLimit: theme.strings.addressQueryLimit,
        addressError: theme.strings.addressError,
        authError: theme.strings.authError
      };
  
      if (!this.key) {
        return;
      }
  
      theme.initWhenVisible({
        element: this.container,
        callback: this.prepMapApi.bind(this),
        threshold: 20
      });
    }
  
    // API has loaded, load all Map instances in queue
    function initAllMaps() {
      mapsToLoad.forEach(instance => {
        instance.createMap();
      });
    }
  
    function geolocate(map) {
      var geocoder = new google.maps.Geocoder();
  
      if (!map) {
        return;
      }
  
      var address = map.dataset.addressSetting;
  
      var deferred = new Promise((resolve, reject) => {
        geocoder.geocode({ address: address }, function(results, status) {
          if (status !== google.maps.GeocoderStatus.OK) {
            reject(status);
          }
          resolve(results);
        });
      });
  
      return deferred;
    }
  
    Map.prototype = Object.assign({}, Map.prototype, {
      prepMapApi: function() {
        if (apiStatus === 'loaded') {
          this.createMap();
        } else {
          mapsToLoad.push(this);
  
          if (apiStatus !== 'loading') {
            apiStatus = 'loading';
            if (typeof window.google === 'undefined' || typeof window.google.maps === 'undefined' ) {
  
              var script = document.createElement('script');
              script.onload = function () {
                apiStatus = 'loaded';
                initAllMaps();
              };
              script.src = 'https://maps.googleapis.com/maps/api/js?key=' + this.key;
              document.head.appendChild(script);
            }
          }
        }
      },
  
      createMap: function() {
        var mapDiv = this.map;
  
        return geolocate(mapDiv)
          .then(
            function(results) {
              var mapOptions = {
                zoom: config.zoom,
                backgroundColor: 'none',
                center: results[0].geometry.location,
                draggable: false,
                clickableIcons: false,
                scrollwheel: false,
                disableDoubleClickZoom: true,
                disableDefaultUI: true
              };
  
              var map = (this.map = new google.maps.Map(mapDiv, mapOptions));
              var center = (this.center = map.getCenter());
  
              var marker = new google.maps.Marker({
                map: map,
                position: map.getCenter()
              });
  
              google.maps.event.addDomListener(
                window,
                'resize',
                theme.utils.debounce(250, function() {
                  google.maps.event.trigger(map, 'resize');
                  map.setCenter(center);
                  mapDiv.removeAttribute('style');
                })
              );
  
              if (Shopify.designMode) {
                if (window.AOS) { AOS.refreshHard() }
              }
            }.bind(this)
          )
          .catch(function(status) {
            var errorMessage;
  
            switch (status) {
              case 'ZERO_RESULTS':
                errorMessage = errors.addressNoResults;
                break;
              case 'OVER_QUERY_LIMIT':
                errorMessage = errors.addressQueryLimit;
                break;
              case 'REQUEST_DENIED':
                errorMessage = errors.authError;
                break;
              default:
                errorMessage = errors.addressError;
                break;
            }
  
            // Show errors only to merchant in the editor.
            if (Shopify.designMode) {
              window.mapError(errorMessage);
            }
          });
      },
  
      onUnload: function() {
        if (this.map.length === 0) {
          return;
        }
        // Causes a harmless JS error when a section without an active map is reloaded
        if (google && google.maps && google.maps.event) {
          google.maps.event.clearListeners(this.map, 'resize');
        }
      }
    });
  
    return Map;
  })();
  
  theme.NewsletterPopup = (function() {
    function NewsletterPopup(container) {
      this.container = container;
      var sectionId = this.container.getAttribute('data-section-id');
      this.cookieName = 'newsletter-' + sectionId;
  
      if (!container) {
        return;
      }
  
      // Prevent popup on Shopify robot challenge page
      if (window.location.pathname === '/challenge') {
        return;
      }
  
      this.data = {
        secondsBeforeShow: container.dataset.delaySeconds,
        daysBeforeReappear: container.dataset.delayDays,
        cookie: Cookies.get(this.cookieName),
        testMode: container.dataset.testMode
      };
  
      this.modal = new theme.Modals('NewsletterPopup-' + sectionId, 'newsletter-popup-modal');
  
      // Open modal if errors or success message exist
      if (container.querySelector('.errors') || container.querySelector('.note--success')) {
        this.modal.open();
      }
  
      // Set cookie as opened if success message
      if (container.querySelector('.note--success')) {
        this.closePopup(true);
        return;
      }
  
      document.addEventListener('modalClose.' + container.id, this.closePopup.bind(this));
  
      if (!this.data.cookie || this.data.testMode === 'true') {
        this.initPopupDelay();
      }
    }
  
    NewsletterPopup.prototype = Object.assign({}, NewsletterPopup.prototype, {
      initPopupDelay: function() {
        if (Shopify && Shopify.designMode) {
          return;
        }
        setTimeout(function() {
          this.modal.open();
        }.bind(this), this.data.secondsBeforeShow * 1000);
      },
  
      closePopup: function(success) {
        // Remove a cookie in case it was set in test mode
        if (this.data.testMode === 'true') {
          Cookies.remove(this.cookieName, { path: '/' });
          return;
        }
  
        var expiry = success ? 200 : this.data.daysBeforeReappear;
        Cookies.set(this.cookieName, 'opened', { path: '/', expires: expiry });
      },
  
      onLoad: function() {
        this.modal.open();
      },
  
      onSelect: function() {
        this.modal.open();
      },
  
      onDeselect: function() {
        this.modal.close();
      }
    });
  
    return NewsletterPopup;
  })();
  
  theme.PasswordHeader = (function() {
    function PasswordHeader() {
      this.init();
    }
  
    PasswordHeader.prototype = Object.assign({}, PasswordHeader.prototype, {
      init: function() {
        if (!document.querySelector('#LoginModal')) {
          return;
        }
  
        var passwordModal = new theme.Modals('LoginModal', 'login-modal', {
          focusIdOnOpen: 'password',
          solid: true
        });
  
        // Open modal if errors exist
        if (document.querySelectorAll('.errors').length) {
          passwordModal.open();
        }
      }
    });
  
    return PasswordHeader;
  })();
  
  theme.Photoswipe = (function() {
    var selectors = {
      trigger: '.js-photoswipe__zoom',
      images: '.photoswipe__image',
      slideshowTrack: '.flickity-viewport ',
      activeImage: '.is-selected'
    };
  
    function Photoswipe(container, sectionId) {
      this.container = container;
      this.sectionId = sectionId;
      this.namespace = '.photoswipe-' + this.sectionId;
      this.gallery;
      this.images;
      this.items;
      this.inSlideshow = false;
  
      if (!container || container.dataset.zoom === 'false') {
        return;
      }
  
      if (container.dataset.hasSlideshow === 'true') {
        this.inSlideshow = true;
      }
  
      this.init();
    }
  
    Photoswipe.prototype = Object.assign({}, Photoswipe.prototype, {
      init: function() {
        this.container.querySelectorAll(selectors.trigger).forEach(trigger => {
          trigger.on('click' + this.namespace, this.triggerClick.bind(this));
        });
      },
  
      triggerClick: function(evt) {
        this.items = this.getImageData();
  
        var image = this.inSlideshow ? this.container.querySelector(selectors.activeImage) : evt.currentTarget;
  
        var index = this.inSlideshow ? this.getChildIndex(image) : image.dataset.index;
  
        this.initGallery(this.items, index);
      },
  
      // Because of image set feature, need to get index based on location in parent
      getChildIndex: function(el) {
        var i = 0;
        while( (el = el.previousSibling) != null ) {
          i++;
        }
  
        // 1-based index required
        return i + 1;
      },
  
      getImageData: function() {
        this.images = this.inSlideshow
                        ? this.container.querySelectorAll(selectors.slideshowTrack + selectors.images)
                        : this.container.querySelectorAll(selectors.images);
  
        var items = [];
        var options = {};
  
        this.images.forEach(el => {
          var item = {
            msrc: el.currentSrc || el.src,
            src: el.getAttribute('data-photoswipe-src'),
            w: el.getAttribute('data-photoswipe-width'),
            h: el.getAttribute('data-photoswipe-height'),
            el: el,
            initialZoomLevel: 0.5
          }
  
          items.push(item);
        });
  
        return items;
      },
  
      initGallery: function(items, index) {
        var pswpElement = document.querySelectorAll('.pswp')[0];
  
        var options = {
          allowPanToNext: false,
          captionEl: false,
          closeOnScroll: false,
          counterEl: false,
          history: false,
          index: index - 1,
          pinchToClose: false,
          preloaderEl: false,
          scaleMode: 'zoom',
          shareEl: false,
          tapToToggleControls: false,
          getThumbBoundsFn: function(index) {
            var pageYScroll = window.pageYOffset || document.documentElement.scrollTop;
            var thumbnail = items[index].el;
            var rect = thumbnail.getBoundingClientRect();
            return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
          }
        }
  
        this.gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
  
        this.gallery.init();
        this.gallery.listen('afterChange', this.afterChange.bind(this));
      },
  
      afterChange: function() {
        var index = this.gallery.getCurrentIndex();
        this.container.dispatchEvent(new CustomEvent('photoswipe:afterChange', {
          detail: {
            index: index
          }
        }));
      }
    });
  
    return Photoswipe;
  })();
  
  
  theme.Recommendations = (function() {
    var selectors = {
      placeholder: '.product-recommendations-placeholder',
      sectionClass: ' .product-recommendations',
      productResults: '.grid-product'
    }
  
    function Recommendations(container) {
      this.container = container;
      this.sectionId = container.getAttribute('data-section-id');
      this.url = container.dataset.url;
  
      selectors.recommendations = 'Recommendations-' + this.sectionId;
  
      theme.initWhenVisible({
        element: container,
        callback: this.init.bind(this),
        threshold: 500
      });
    }
  
    Recommendations.prototype = Object.assign({}, Recommendations.prototype, {
      init: function() {
        var section = document.getElementById(selectors.recommendations);
  
        if (!section || section.dataset.enable === 'false') {
          return;
        }
  
        var id = section.dataset.productId;
        var limit = section.dataset.limit;
  
        var url = this.url + '?section_id=product-recommendations&limit='+ limit +'&product_id=' + id;
  
        fetch(url).then(function(response) {
          return response.text();
        }).then(function(html) {
          // Convert the HTML string into a document object
          var parser = new DOMParser();
          var doc = parser.parseFromString(html, 'text/html');
          var div = doc.querySelector(selectors.sectionClass);
          var placeholder = section.querySelector(selectors.placeholder);
          if (!placeholder) {
            return;
          }
  
          placeholder.innerHTML = '';
  
          if (!div) {
            this.container.classList.add('hide');
            return;
          }
  
          placeholder.appendChild(div);
  
          theme.reinitProductGridItem(section);
  
          document.dispatchEvent(new CustomEvent('recommendations:loaded', {
            detail: {
              section: section
            }
          }));
  
          // If no results, hide the entire section
          var results = div.querySelectorAll(selectors.productResults);
          if (results.length === 0) {
            this.container.classList.add('hide');
          }
        }.bind(this));
      }
    });
  
    return Recommendations;
  })();
  
  theme.SlideshowSection = (function() {
  
    var selectors = {
      parallaxContainer: '.parallax-container'
    };
  
    function SlideshowSection(container) {
      this.container = container;
      var sectionId = container.getAttribute('data-section-id');
      this.slideshow = container.querySelector('#Slideshow-' + sectionId);
      this.namespace = '.' + sectionId;
  
      this.initialIndex = 0;
  
      if (!this.slideshow) { return }
  
      // Get shopify-created div that section markup lives in,
      // then get index of it inside its parent
      var sectionEl = container.parentElement;
      var sectionIndex = [].indexOf.call(sectionEl.parentElement.children, sectionEl);
  
      if (sectionIndex === 0) {
        this.init();
      } else {
        theme.initWhenVisible({
          element: this.container,
          callback: this.init.bind(this)
        });
      }
  
    }
  
    SlideshowSection.prototype = Object.assign({}, SlideshowSection.prototype, {
      init: function() {
        var slides = this.slideshow.querySelectorAll('.slideshow__slide');
  
        if (this.container.hasAttribute('data-immediate-load')) {
          this.slideshow.classList.remove('loading', 'loading--delayed');
          this.slideshow.classList.add('loaded');
        } else {
          // Wait for image to load before marking as done
          theme.loadImageSection(this.slideshow);
        }
  
        if (slides.length > 1) {
          var sliderArgs = {
            prevNextButtons: this.slideshow.hasAttribute('data-arrows'),
            pageDots: this.slideshow.hasAttribute('data-dots'),
            fade: true,
            setGallerySize: false,
            initialIndex: this.initialIndex,
            autoPlay: this.slideshow.dataset.autoplay === 'true'
              ? parseInt(this.slideshow.dataset.speed)
              : false
          };
  
          this.flickity = new theme.Slideshow(this.slideshow, sliderArgs);
        } else {
          // Add loaded class to first slide
          slides[0].classList.add('is-selected');
        }
  
        if (this.container.hasAttribute('data-parallax')) {
          // Create new parallax for each slideshow image
          this.container.querySelectorAll(selectors.parallaxContainer).forEach(function(el, i) {
            new theme.Parallax(el, {
              namespace: this.namespace + '-parallax-' + i
            });
          }.bind(this));
        }
      },
  
      forceReload: function() {
        this.onUnload();
        this.init();
      },
  
      onUnload: function() {
        if (this.flickity && typeof this.flickity.destroy === 'function') {
          this.flickity.destroy();
        }
      },
  
      onDeselect: function() {
        if (this.flickity && typeof this.flickity.play === 'function') {
          this.flickity.play();
        }
      },
  
      onBlockSelect: function(evt) {
        var slide = this.slideshow.querySelector('.slideshow__slide--' + evt.detail.blockId)
        var index = parseInt(slide.dataset.index);
  
        if (this.flickity && typeof this.flickity.pause === 'function') {
          this.flickity.goToSlide(index);
          this.flickity.pause();
        } else {
          // If section reloads, slideshow might not have been setup yet, wait a second and try again
          this.initialIndex = index;
          setTimeout(function() {
            if (this.flickity && typeof this.flickity.pause === 'function') {
              this.flickity.pause();
            }
          }.bind(this), 1000);
        }
      },
  
      onBlockDeselect: function() {
        if (this.flickity && typeof this.flickity.play === 'function') {
          if (this.flickity.args.autoPlay) {
            this.flickity.play();
          }
        }
      }
    });
  
    return SlideshowSection;
  })();
  
  theme.StoreAvailability = (function() {
    var selectors = {
      drawerOpenBtn: '.js-drawer-open-availability',
      modalOpenBtn: '.js-modal-open-availability',
      productTitle: '[data-availability-product-title]'
    };
  
    function StoreAvailability(container) {
      this.container = container;
      this.baseUrl = container.dataset.baseUrl;
      this.productTitle = container.dataset.productName;
    }
  
    StoreAvailability.prototype = Object.assign({}, StoreAvailability.prototype, {
      updateContent: function(variantId) {
        var variantSectionUrl =
          this.baseUrl +
          '/variants/' +
          variantId +
          '/?section_id=store-availability';
  
        var self = this;
  
        fetch(variantSectionUrl)
          .then(function(response) {
            return response.text();
          })
          .then(function(html) {
            if (html.trim() === '') {
              this.container.innerHTML = '';
              return;
            }
  
            self.container.innerHTML = html;
            self.container.innerHTML = self.container.firstElementChild.innerHTML;
  
            // Setup drawer if have open button
            if (self.container.querySelector(selectors.drawerOpenBtn)) {
              self.drawer = new theme.Drawers('StoreAvailabilityDrawer', 'availability');
            }
  
            // Setup drawer if have open button
            if (self.container.querySelector(selectors.modalOpenBtn)) {
              self.modal = new theme.Modals('StoreAvailabilityModal', 'availability');
            }
  
            var title = self.container.querySelector(selectors.productTitle);
            if (title) {
              title.textContent = self.productTitle;
            }
          });
      }
    });
  
    return StoreAvailability;
  })();
  
  theme.VideoSection = (function() {
    var selectors = {
      videoParent: '.video-parent-section'
    };
  
    function videoSection(container) {
      this.container = container;
      this.sectionId = container.getAttribute('data-section-id');
      this.namespace = '.video-' + this.sectionId;
      this.videoObject;
  
      theme.initWhenVisible({
        element: this.container,
        callback: this.init.bind(this),
        threshold: 500
      });
    }
  
    videoSection.prototype = Object.assign({}, videoSection.prototype, {
      init: function() {
        var dataDiv = this.container.querySelector('.video-div');
        if (!dataDiv) {
          return;
        }
        var type = dataDiv.dataset.type;
  
        switch(type) {
          case 'youtube':
            var videoId = dataDiv.dataset.videoId;
            this.initYoutubeVideo(videoId);
            break;
          case 'vimeo':
            var videoId = dataDiv.dataset.videoId;
            this.initVimeoVideo(videoId);
            break;
          case 'mp4':
            this.initMp4Video();
            break;
        }
      },
  
      initYoutubeVideo: function(videoId) {
        this.videoObject = new theme.YouTube(
          'YouTubeVideo-' + this.sectionId,
          {
            videoId: videoId,
            videoParent: selectors.videoParent
          }
        );
      },
  
      initVimeoVideo: function(videoId) {
        this.videoObject = new theme.VimeoPlayer(
          'Vimeo-' + this.sectionId,
          videoId,
          {
            videoParent: selectors.videoParent
          }
        );
      },
  
      initMp4Video: function() {
        var mp4Video = 'Mp4Video-' + this.sectionId;
        var mp4Div = document.getElementById(mp4Video);
        var parent = mp4Div.closest(selectors.videoParent);
  
        if (mp4Div) {
          parent.classList.add('loaded');
  
          var playPromise = document.querySelector('#' + mp4Video).play();
  
          // Edge does not return a promise (video still plays)
          if (playPromise !== undefined) {
            playPromise.then(function() {
                // playback normal
              }).catch(function() {
                mp4Div.setAttribute('controls', '');
                parent.classList.add('video-interactable');
              });
          }
        }
      },
  
      onUnload: function(evt) {
        var sectionId = evt.target.id.replace('shopify-section-', '');
        if (this.videoObject && typeof this.videoObject.destroy === 'function') {
          this.videoObject.destroy();
        }
      }
    });
  
    return videoSection;
  })();
  

  theme.BackgroundImage = (function() {
  
    var selectors = {
      parallaxContainer: '.parallax-container'
    };
  
    function backgroundImage(container) {
      this.container = container;
      if (!container) {
        return;
      }
  
      var sectionId = container.getAttribute('data-section-id');
      this.namespace = '.' + sectionId;
  
      theme.initWhenVisible({
        element: this.container,
        callback: this.init.bind(this)
      });
    }
  
    backgroundImage.prototype = Object.assign({}, backgroundImage.prototype, {
      init: function() {
        if (this.container.dataset && this.container.dataset.parallax) {
          var parallaxContainer = this.container.querySelector(selectors.parallaxContainer);
          var args = {
            namespace: this.namespace + '-parallax',
            desktopOnly: true
          };
  
          theme.parallaxSections[this.namespace] = new theme.Parallax(parallaxContainer, args);
        }
      },
  
      onUnload: function(evt) {
        if (!this.container) { return }
        if (theme.parallaxSections[this.namespace] && typeof theme.parallaxSections[this.namespace].destroy === 'function') {
          theme.parallaxSections[this.namespace].destroy();
        }
        delete theme.parallaxSections[this.namespace];
      }
    });
  
    return backgroundImage;
  })();
  
  theme.Blog = (function() {
  
    function Blog(container) {
      this.tagFilters();
    }
  
    Blog.prototype = Object.assign({}, Blog.prototype, {
      tagFilters: function() {
        var filterBy = document.getElementById('BlogTagFilter');
  
        if (!filterBy) {
          return;
        }
  
        filterBy.addEventListener('change', function() {
          location.href = filterBy.value;
        });
      }
    });
  
    return Blog;
  })();
  
  theme.CollectionHeader = (function() {
    var hasLoadedBefore = false;
  
    function CollectionHeader(container) {
      this.namespace = '.collection-header';
  
      var heroImageContainer = container.querySelector('.collection-hero');
      if (heroImageContainer) {
        if (hasLoadedBefore) {
          this.checkIfNeedReload();
        }
        theme.loadImageSection(heroImageContainer);
  
        if (container.dataset && container.dataset.parallax) {
          var parallaxContainer = container.querySelector('.parallax-container');
          var args = {
            namespace: this.namespace + '-parallax'
          };
          theme.parallaxSections[this.namespace] = new theme.Parallax(parallaxContainer, args);
        }
      } else if (theme.settings.overlayHeader) {
        theme.headerNav.disableOverlayHeader();
      }
  
      hasLoadedBefore = true;
    }
  
    CollectionHeader.prototype = Object.assign({}, CollectionHeader.prototype, {
      // A liquid variable in the header needs a full page refresh
      // if the collection header hero image setting is enabled
      // and the header is set to sticky. Only necessary in the editor.
      checkIfNeedReload: function() {
        if (!Shopify.designMode) {
          return;
        }
  
        if (theme.settings.overlayHeader) {
          var header = document.querySelector('.header-wrapper');
          if (!header.classList.contains('header-wrapper--overlay')) {
            location.reload();
          }
        }
      },
  
      onUnload: function() {
        if (theme.parallaxSections[this.namespace]) {
          theme.parallaxSections[this.namespace].destroy();
          delete theme.parallaxSections[this.namespace];
        }
      }
    });
  
    return CollectionHeader;
  })();
  
  theme.CollectionSidebar = (function() {
    var drawerStyle = false;
  
    function CollectionSidebar(container) {
      this.container = container;
      this.init();
    }
  
    CollectionSidebar.prototype = Object.assign({}, CollectionSidebar.prototype, {
      init: function() {
        this.onUnload();
  
        drawerStyle = this.container.dataset.style === 'drawer';
        theme.FilterDrawer = new theme.Drawers('FilterDrawer', 'collection-filters', true);
      },
  
      forceReload: function() {
        this.init();
      },
  
      onSelect: function() {
        if (theme.FilterDrawer) {
          if (!drawerStyle) {
            theme.FilterDrawer.close();
            return;
          }
  
          if (drawerStyle || theme.config.bpSmall) {
            theme.FilterDrawer.open();
          }
        }
      },
  
      onDeselect: function() {
        if (theme.FilterDrawer) {
          theme.FilterDrawer.close();
        }
      },
  
      onUnload: function() {
        if (theme.FilterDrawer) {
          theme.FilterDrawer.close();
        }
      }
    });
  
    return CollectionSidebar;
  })();
  
  theme.Collection = (function() {
    var isAnimating = false;
  
    var selectors = {
      sortSelect: '#SortBy',
  
      colorSwatchImage: '.grid-product__color-image',
      colorSwatch: '.color-swatch--with-image',
  
      collectionGrid: '.collection-grid__wrapper',
      sidebar: '#CollectionSidebar',
      activeTagList: '.tag-list--active-tags',
      tags: '.tag-list a',
      filters: '.collection-filter'
    };
  
    var config = {
      combineTags: false
    };
  
    var classes = {
      activeTag: 'tag--active',
      removeTagParent: 'tag--remove'
    };
  
    function Collection(container) {
      this.container = container;
      this.sectionId = container.getAttribute('data-section-id');
      this.namespace = '.collection-' + this.sectionId;
  
      this.init();
    }
  
    Collection.prototype = Object.assign({}, Collection.prototype, {
      init: function() {
        this.initSort();
        this.colorSwatchHovering();
        this.initFilters();
        theme.sections.reinit('collection-sidebar');
      },
  
      initSort: function() {
        this.sortSelect = document.querySelector(selectors.sortSelect);
  
        if (this.sortSelect) {
          this.defaultSort = this.getDefaultSortValue();
          this.sortSelect.on('change' + this.namespace, this.onSortChange.bind(this));
          this.initParams();
        }
      },
  
      initParams: function() {
        this.queryParams = {};
  
        if (location.search.length) {
          var aKeyValue;
          var aCouples = location.search.substr(1).split('&');
          for (var i = 0; i < aCouples.length; i++) {
            aKeyValue = aCouples[i].split('=');
            if (aKeyValue.length > 1) {
              this.queryParams[
                decodeURIComponent(aKeyValue[0])
              ] = decodeURIComponent(aKeyValue[1]);
            }
          }
        }
      },
  
      getSortValue: function() {
        return this.sortSelect.value || this.defaultSort;
      },
  
      getDefaultSortValue: function() {
        return this.sortSelect.getAttribute('data-default-sortby');
      },
  
      onSortChange: function() {
        this.queryParams.sort_by = this.getSortValue();
  
        if (this.queryParams.page) {
          delete this.queryParams.page;
        }
  
        window.location.search = new URLSearchParams(Object.entries(this.queryParams));
      },
  
      colorSwatchHovering: function() {
        var colorImages = this.container.querySelectorAll(selectors.colorSwatchImage);
        if (!colorImages.length) {
          return;
        }
  
        this.container.querySelectorAll(selectors.colorSwatch).forEach(swatch => {
          swatch.addEventListener('mouseenter', function() {
            var id = swatch.dataset.variantId;
            var image = swatch.dataset.variantImage;
            var el = document.querySelector('.grid-product__color-image--' + id);
            el.style.backgroundImage = 'url(' + image + ')';
            el.classList.add('is-active');
          });
          swatch.addEventListener('mouseleave', function() {
            var id = swatch.dataset.variantId;
            document.querySelector('.grid-product__color-image--' + id).classList.remove('is-active');
          });
        });
      },
  
      /*====================
        Collection filters
      ====================*/
      initFilters: function() {
        var tags = document.querySelectorAll(selectors.tags);
  
        if (!tags.length) {
          return;
        }
  
        // Ajax pagination
        window.addEventListener('popstate', function(state) {
          if (state) {
            this.getNewCollectionContent(location.href);
          }
        }.bind(this));
  
        // Set mobile top value for filters if sticky header enabled
        if (theme.config.stickyHeader) {
          this.setFilterStickyPosition();
  
          window.on('resize', theme.utils.debounce(500, this.setFilterStickyPosition));
        }
  
        config.combineTags = (document.querySelector(selectors.sidebar).getAttribute('data-combine-tags') == 'true');
  
        document.querySelectorAll(selectors.tags).forEach(tag => {
          tag.addEventListener('click', this.tagClick.bind(this));
        });
      },
  
      tagClick: function(evt) {
        var el = evt.currentTarget;
  
        if (theme.FilterDrawer) {
          theme.FilterDrawer.close();
        }
  
        // Do not ajax-load collection links
        if (el.classList.contains('no-ajax')) {
          return;
        }
  
        evt.preventDefault();
        if (isAnimating) {
          return;
        }
  
        isAnimating = true;
  
        var parent = el.parentNode;
        var newUrl = el.href;
  
        if (config.combineTags) {
          if (parent.classList.contains(classes.activeTag)) {
            parent.classList.remove(classes.activeTag);
          } else {
            parent.classList.add(classes.activeTag);
  
            // If adding a tag, show new tag right away.
            // Otherwise, remove it before ajax finishes
            if (el.closest('li').classList.contains(classes.removeTagParent)) {
              parent.remove();
            } else {
              var newTag = document.createElement('li');
              var newTagLink = document.createElement('a');
              newTag.classList.add('tag', 'tag--remove');
              newTagLink.classList.add('btn', 'btn--small');
              newTagLink.innerText = el.innerText;
              newTag.appendChild(newTagLink);
  
              // Append new tag in both drawer and sidebar
              document.querySelectorAll(selectors.activeTagList).forEach(list => {
                list.appendChild(newTag);
              });
            }
          }
        } else {
          // Remove active state on all tags, re-add to new one
          document.querySelectorAll(selectors.tags).forEach(tag => {
            tag.parentNode.classList.remove(classes.activeTag);
          });
          parent.classList.add(classes.activeTag);
        }
  
        this.updateScroll(true);
  
        history.pushState({}, '', newUrl);
        document.querySelector(selectors.collectionGrid).classList.add('unload');
        this.getNewCollectionContent(newUrl);
      },
  
      getNewCollectionContent: function(url) {
        url = url.indexOf('?') === -1 ? (url + '?view=ajax') : (url + '&view=ajax');
  
        var ajaxContainer = document.getElementById('CollectionAjaxResult');
  
        fetch(url).then(function(response) {
          return response.text();
        }).then(function(html) {
          var parser = new DOMParser();
          var doc = parser.parseFromString(html, 'text/html');
  
          var newContent = doc.getElementById('CollectionAjaxContent');
  
          ajaxContainer.innerHTML = '';
          ajaxContainer.append(newContent);
  
          theme.sections.reinit('collection-template');
          this.updateScroll(false);
          theme.reinitProductGridItem();
  
          isAnimating = false;
  
          // trigger resize?
        }.bind(this));
      },
  
      updateScroll: function(animate) {
        var scrollTo;
        if (theme.config.bpSmall) {
          // 60 is ~ height of sticky filters
          scrollTo = document.querySelector('[data-scroll-to]').offsetTop - 60;
        } else {
          scrollTo = document.getElementById('CollectionAjaxResult').offsetTop + 1;
        }
  
        if (theme.config.stickyHeader) {
          var headerHeight = document.querySelector('.site-header').offsetHeight;
          scrollTo = scrollTo - headerHeight;
        }
  
        if (animate) {
          window.scrollTo({top: scrollTo, behavior: 'smooth'});
        } else {
          window.scrollTo({top: scrollTo});
        }
      },
  
      setFilterStickyPosition: function() {
        var headerHeight = document.querySelector('.site-header').offsetHeight;
        document.querySelector(selectors.filters).style.top = headerHeight + 10 + 'px';
  
        // Also update top position of sticky sidebar
        var stickySidebar = document.querySelector('.grid__item--sidebar');
        if (stickySidebar) {
          stickySidebar.style.top = headerHeight + 10 + 'px';
        }
      },
  
      forceReload: function() {
        this.init();
      }
    });
  
    return Collection;
  })();
  
  
  theme.FooterSection = (function() {
    var selectors = {
      locale: '[data-disclosure-locale]',
      currency: '[data-disclosure-currency]'
    };
  
    function FooterSection(container) {
      this.container = container;
  
      this.container = container;
      this.localeDisclosure = null;
      this.currencyDisclosure = null;
  
      this.init();
    }
  
    FooterSection.prototype = Object.assign({}, FooterSection.prototype, {
      init: function() {
        var localeEl = this.container.querySelector(selectors.locale);
        var currencyEl = this.container.querySelector(selectors.currency);
  
        if (localeEl) {
          this.localeDisclosure = new theme.Disclosure(localeEl);
        }
  
        if (currencyEl) {
          this.currencyDisclosure = new theme.Disclosure(currencyEl);
        }
  
        // Change email icon to submit text
        var newsletterInput = document.querySelector('.footer__newsletter-input');
        if (newsletterInput) {
          newsletterInput.addEventListener('keyup', function() {
            newsletterInput.classList.add('footer__newsletter-input--active');
          });
        }
  
        // Re-hook up collapsible box triggers
        theme.collapsibles.init(this.container);
      },
  
      onUnload: function() {
        if (this.localeDisclosure) {
          this.localeDisclosure.destroy();
        }
  
        if (this.currencyDisclosure) {
          this.currencyDisclosure.destroy();
        }
      }
    });
  
    return FooterSection;
  })();
  
  theme.HeaderSection = (function() {
  
    var selectors = {
      locale: '[data-disclosure-locale]',
      currency: '[data-disclosure-currency]'
    };
  
    function HeaderSection(container) {
      this.container = container;
      this.sectionId = this.container.getAttribute('data-section-id');
  
      this.init();
    }
  
    HeaderSection.prototype = Object.assign({}, HeaderSection.prototype, {
      init: function() {
        // Reload any slideshow if header is reloaded to make sure
        // sticky header works as expected
        // (can be anywhere in sections.instance array)
        if (Shopify && Shopify.designMode) {
          theme.sections.reinit('slideshow-section');
  
          // Set a timer to resize the header in case the logo changes size
          setTimeout(function() {
            window.dispatchEvent(new Event('resize'));
          }, 500);
        }
  
        this.initDrawers();
        this.initDisclosures();
        theme.headerNav.init();
        theme.announcementBar.init();
      },
  
      initDisclosures: function() {
        var localeEl = this.container.querySelector(selectors.locale);
        var currencyEl = this.container.querySelector(selectors.currency);
  
        if (localeEl) {
          this.localeDisclosure = new theme.Disclosure(localeEl);
        }
  
        if (currencyEl) {
          this.currencyDisclosure = new theme.Disclosure(currencyEl);
        }
      },
  
      initDrawers: function() {
        theme.NavDrawer = new theme.Drawers('NavDrawer', 'nav');
        if (theme.settings.cartType === 'drawer') {
          if (!document.body.classList.contains('template-cart')) {
            new theme.CartDrawer();
          }
        }
  
        theme.collapsibles.init(document.getElementById('NavDrawer'));
      },
  
      onBlockSelect: function(evt) {
        theme.announcementBar.onBlockSelect(evt.detail.blockId);
      },
  
      onBlockDeselect: function() {
        theme.announcementBar.onBlockDeselect();
      },
  
      onUnload: function() {
        theme.NavDrawer.close();
        theme.announcementBar.unload();
  
        if (this.localeDisclosure) {
          this.localeDisclosure.destroy();
        }
  
        if (this.currencyDisclosure) {
          this.currencyDisclosure.destroy();
        }
      }
    });
  
    return HeaderSection;
  })();
  
  theme.Product = (function() {
    var videoObjects = {};
  
    var classes = {
      onSale: 'on-sale',
      disabled: 'disabled',
      isModal: 'is-modal',
      loading: 'loading',
      loaded: 'loaded',
      hidden: 'hide',
      interactable: 'video-interactable',
      visuallyHide: 'visually-invisible'
    };
  
    var selectors = {
      productVideo: '.product__video',
      videoParent: '.product__video-wrapper',
      slide: '.product-main-slide',
      currentSlide: '.is-selected',
      startingSlide: '.starting-slide'
    };
  
    function Product(container) {
      this.container = container;
      var sectionId = this.sectionId = container.getAttribute('data-section-id');
  
      this.inModal = (container.dataset.modal === 'true');
      this.modal;
  
      this.settings = {
        enableHistoryState: container.dataset.history || false,
        namespace: '.product-' + sectionId,
        inventory: container.dataset.inventory || false,
        incomingInventory: container.dataset.incomingInventory || false,
        modalInit: false,
        hasImages: true,
        imageSetName: null,
        imageSetIndex: null,
        currentImageSet: null,
        imageSize: '620x',
        currentSlideIndex: 0,
        videoLooping: container.dataset.videoLooping
      };
  
      // Overwrite some settings when loaded in modal
      if (this.inModal) {
        this.settings.enableHistoryState = false;
        this.settings.namespace = '.product-' + sectionId + '-modal';
        this.modal = document.getElementById('QuickShopModal-' + sectionId);
      }
  
      this.selectors = {
        variantsJson: 'VariantsJson-' + sectionId,
        currentVariantJson: 'CurrentVariantJson-' + sectionId,
        form: '#AddToCartForm-' + sectionId,
  
        media: '[data-product-media-type-model]',
        closeMedia: '.product-single__close-media',
        photoThumbs: '.product__thumb-' + sectionId,
        thumbSlider: '#ProductThumbs-' + sectionId,
        thumbScroller: '.product__thumbs--scroller',
        mainSlider: '#ProductPhotos-' + sectionId,
        imageContainer: '[data-product-images]',
        productImageMain: '.product-image-main--' + sectionId,
  
        priceWrapper: '.product__price-wrap-' + sectionId,
        price: '#ProductPrice-' + sectionId,
        comparePrice: '#ComparePrice-' + sectionId,
        savePrice: '#SavePrice-' + sectionId,
        priceA11y: '#PriceA11y-' + sectionId,
        comparePriceA11y: '#ComparePriceA11y-' + sectionId,
        unitWrapper: '.product__unit-price-wrapper--' + sectionId,
        unitPrice: '.product__unit-price--' + sectionId,
        unitPriceBaseUnit: '.product__unit-base--' + sectionId,
        sku: 'Sku-' + sectionId,
        inventory: 'ProductInventory-' + sectionId,
        incomingInventory: 'ProductIncomingInventory-' + sectionId,
  
        addToCart: 'AddToCart-' + sectionId,
        addToCartText: 'AddToCartText-' + sectionId,
  
        originalSelectorId: '#ProductSelect-' + sectionId,
        singleOptionSelector: '.variant__input-' + sectionId,
        variantColorSwatch: '.variant__input--color-swatch-' + sectionId,
  
        modalFormHolder: '#ProductFormHolder-' + sectionId,
        availabilityContainer: '#StoreAvailabilityHolder-' + sectionId
      };
  
      this.cache = {
        form: container.querySelector(this.selectors.form),
        mainSlider: container.querySelector(this.selectors.mainSlider),
        thumbSlider: container.querySelector(this.selectors.thumbSlider),
        thumbScroller: container.querySelector(this.selectors.thumbScroller),
        productImageMain: container.querySelector(this.selectors.productImageMain),
  
        // Price-related
        priceWrapper: container.querySelector(this.selectors.priceWrapper),
        comparePriceA11y: container.querySelector(this.selectors.comparePriceA11y),
        comparePrice: container.querySelector(this.selectors.comparePrice),
        price: container.querySelector(this.selectors.price),
        savePrice: container.querySelector(this.selectors.savePrice),
        priceA11y: container.querySelector(this.selectors.priceA11y)
      };
  
      this.firstProductImage = this.cache.mainSlider.querySelector('img');
  
      if (!this.firstProductImage) {
        this.settings.hasImages = false;
      }
  
      var dataSetEl = this.cache.mainSlider.querySelector('[data-set-name]');
      if (dataSetEl) {
        this.settings.imageSetName = dataSetEl.dataset.setName;
      }
  
      this.init();
    }
  
    Product.prototype = Object.assign({}, Product.prototype, {
      init: function() {
        if (this.inModal) {
          this.container.classList.add(classes.isModal);
          document.addEventListener('modalOpen.QuickShopModal-' + this.sectionId, this.openModalProduct.bind(this));
          document.addEventListener('modalClose.QuickShopModal-' + this.sectionId, this.closeModalProduct.bind(this));
        }
  
        if (!this.inModal) {
          this.formSetup();
          this.productSetup();
          this.videoSetup();
          this.initProductSlider();
          this.customMediaListners();
          this.addIdToRecentlyViewed();
        }
      },
  
      formSetup: function() {
        this.initQtySelector();
        this.initAjaxProductForm();
        this.availabilitySetup();
        this.initVariants();
  
        // We know the current variant now so setup image sets
        if (this.settings.imageSetName) {
          this.updateImageSet();
        }
      },
  
      availabilitySetup: function() {
        var container = this.container.querySelector(this.selectors.availabilityContainer);
        if (container) {
          this.storeAvailability = new theme.StoreAvailability(container);
        }
      },
  
      productSetup: function() {
        this.setImageSizes();
        this.initImageZoom();
        this.initModelViewerLibraries();
        this.initShopifyXrLaunch();
      },
  
      setImageSizes: function() {
        if (!this.settings.hasImages) {
          return;
        }
  
        // Get srcset image src, works on most modern browsers
        // otherwise defaults to settings.imageSize
        var currentImage = this.firstProductImage.currentSrc;
  
        if (currentImage) {
          this.settings.imageSize = theme.Images.imageSize(currentImage);
        }
      },
  
      addIdToRecentlyViewed: function() {
        var handle = this.container.getAttribute('data-product-handle');
        var url = this.container.getAttribute('data-product-url');
        var aspectRatio = this.container.getAttribute('data-aspect-ratio');
        var featuredImage = this.container.getAttribute('data-img-url');
  
        // Remove current product if already in set of recent
        if (theme.recentlyViewed.recent.hasOwnProperty(handle)) {
          delete theme.recentlyViewed.recent[handle];
        }
  
        // Add it back to the end
        theme.recentlyViewed.recent[handle] = {
          url: url,
          aspectRatio: aspectRatio,
          featuredImage: featuredImage
        };
  
        if (theme.config.hasLocalStorage) {
          window.localStorage.setItem('theme-recent', JSON.stringify(theme.recentlyViewed.recent));
        }
      },
  
      initVariants: function() {
        var variantJson = document.getElementById(this.selectors.variantsJson);
  
        if (!variantJson) {
          return;
        }
  
        this.variantsObject = JSON.parse(variantJson.innerHTML);
  
        var options = {
          container: this.container,
          enableHistoryState: this.settings.enableHistoryState,
          singleOptionSelector: this.selectors.singleOptionSelector,
          originalSelectorId: this.selectors.originalSelectorId,
          variants: this.variantsObject
        };
  
        var swatches = this.container.querySelectorAll(this.selectors.variantColorSwatch);
        if (swatches.length) {
          swatches.forEach(swatch => {
            swatch.addEventListener('change', function(evt) {
              var color = swatch.dataset.colorName;
              var index = swatch.dataset.colorIndex;
              this.updateColorName(color, index);
            }.bind(this))
          });
        }
  
        this.variants = new theme.Variants(options);
  
        // Product availability on page load
        if (this.storeAvailability) {
          var variant_id = this.variants.currentVariant ? this.variants.currentVariant.id : this.variants.variants[0].id;
  
          this.storeAvailability.updateContent(variant_id);
          this.container.on('variantChange' + this.settings.namespace, this.updateAvailability.bind(this));
        }
  
        this.container.on('variantChange' + this.settings.namespace, this.updateCartButton.bind(this));
        this.container.on('variantImageChange' + this.settings.namespace, this.updateVariantImage.bind(this));
        this.container.on('variantPriceChange' + this.settings.namespace, this.updatePrice.bind(this));
        this.container.on('variantUnitPriceChange' + this.settings.namespace, this.updateUnitPrice.bind(this));
  
        if (document.getElementById(this.selectors.sku)) {
          this.container.on('variantSKUChange' + this.settings.namespace, this.updateSku.bind(this));
        }
  
        if (this.settings.inventory || this.settings.incomingInventory) {
          this.container.on('variantChange' + this.settings.namespace, this.updateInventory.bind(this));
        }
  
        // Update individual variant availability on each selection
        if (theme.settings.dynamicVariantsEnable) {
          var currentVariantJson = document.getElementById(this.selectors.currentVariantJson);
  
          if (currentVariantJson) {
            new theme.VariantAvailability({
              type: theme.settings.dynamicVariantType,
              variantSelectors: this.cache.form.querySelectorAll(this.selectors.singleOptionSelector),
              variantsObject: this.variantsObject,
              currentVariantObject: JSON.parse(currentVariantJson.innerHTML),
              form: this.cache.form
            });
          }
        }
  
        // image set names variant change listeners
        if (this.settings.imageSetName) {
          this.settings.imageSetIndex = this.cache.form.querySelector('.variant-input-wrap[data-handle="'+this.settings.imageSetName+'"]').dataset.index;
          this.container.on('variantChange' + this.settings.namespace, this.updateImageSet.bind(this))
        }
      },
  
      initQtySelector: function() {
        this.container.querySelectorAll('.js-qty__wrapper').forEach(el => {
          new theme.QtySelector(el, {
            namespace: '.product'
          });
        });
      },
  
      initAjaxProductForm: function() {
        if (theme.settings.cartType === 'drawer') {
          new theme.AjaxProduct(this.cache.form);
        }
      },
  
      /*============================================================================
        Variant change methods
      ==============================================================================*/
      updateColorName: function(color, index) {
        // Updates on radio button change, not variant.js
        this.container.querySelector('#VariantColorLabel-' + this.sectionId + '-' + index).textContent = color;
      },
  
      updateCartButton: function(evt) {
        var variant = evt.detail.variant;
        var cartBtn = document.getElementById(this.selectors.addToCart);
        var cartBtnText = document.getElementById(this.selectors.addToCartText);
  
        if (variant) {
          if (variant.available) {
            // Available, enable the submit button and change text
            cartBtn.classList.remove(classes.disabled);
            cartBtn.disabled = false;
            var defaultText = cartBtnText.dataset.defaultText;
            cartBtnText.textContent = defaultText;
          } else {
            // Sold out, disable the submit button and change text
            cartBtn.classList.add(classes.disabled);
            cartBtn.disabled = true;
            cartBtnText.textContent = theme.strings.soldOut;
          }
        } else {
          // The variant doesn't exist, disable submit button
          cartBtn.classList.add(classes.disabled);
          cartBtn.disabled = true;
          cartBtnText.textContent = theme.strings.unavailable;
        }
      },
  
      updatePrice: function(evt) {
        var variant = evt.detail.variant;

        var pid = variant.id;
        var WCP_JSON=[];
        if(document.getElementsByClassName('wcp_json_'+pid).length){    
          WCP_JSON=JSON.parse(document.getElementsByClassName('wcp_json_'+pid)[0].innerText);
          for(var x = 0 ; WCP_JSON.variants.length > x ; x++){
            if(variant.id == WCP_JSON.variants[x].id){
              variant.price = WCP_JSON.variants[x].price;  
              variant.compare_at_price = WCP_JSON.variants[x].compare_at_price;                    
            }
          }    
        } 
        
         console.log('dd');
  
        if (variant) {
          // Regular price
          this.cache.price.innerHTML = theme.Currency.formatMoney(variant.price, theme.settings.moneyFormat);
  
          // Sale price, if necessary
          if (variant.compare_at_price > variant.price) {
            this.cache.comparePrice.innerHTML = theme.Currency.formatMoney(variant.compare_at_price, theme.settings.moneyFormat);
            this.cache.priceWrapper.classList.remove(classes.hidden);
            this.cache.price.classList.add(classes.onSale);
            this.cache.comparePriceA11y.setAttribute('aria-hidden', 'false');
            this.cache.priceA11y.setAttribute('aria-hidden', 'false');
  
            var savings = variant.compare_at_price - variant.price;
  
            if (theme.settings.saveType == 'percent') {
              savings = Math.round(((savings) * 100) / variant.compare_at_price) + '%';
            } else {
              savings = theme.Currency.formatMoney(savings, theme.settings.moneyFormat);
            }
  
            this.cache.savePrice.classList.remove(classes.hidden);
            this.cache.savePrice.innerHTML = theme.strings.savePrice.replace('[saved_amount]', savings);
          } else {
            if (this.cache.priceWrapper) {
              this.cache.priceWrapper.classList.add(classes.hidden);
            }
            this.cache.savePrice.classList.add(classes.hidden);
            this.cache.price.classList.remove(classes.onSale);
            if (this.cache.comparePriceA11y) {
              this.cache.comparePriceA11y.setAttribute('aria-hidden', 'true');
            }
            this.cache.priceA11y.setAttribute('aria-hidden', 'true');
          }
        }
      },
  
      updateUnitPrice: function(evt) {
        var variant = evt.detail.variant;
  
        if (variant && variant.unit_price) {
          this.container.querySelector(this.selectors.unitPrice).innerHTML = theme.Currency.formatMoney(variant.unit_price, theme.settings.moneyFormat);
          this.container.querySelector(this.selectors.unitPriceBaseUnit).innerHTML = theme.Currency.getBaseUnit(variant);
          this.container.querySelector(this.selectors.unitWrapper).classList.remove(classes.hidden);
        } else {
          this.container.querySelector(this.selectors.unitWrapper).classList.add(classes.hidden);
        }
      },
  
      imageSetArguments: function(variant) {
        var variant = variant ? variant : (this.variants ? this.variants.currentVariant : null);
        if (!variant) return;
  
        var setValue = this.settings.currentImageSet = this.getImageSetName(variant[this.settings.imageSetIndex]);
        var set = this.settings.imageSetName + '_' + setValue;
  
        // Always start on index 0
        this.settings.currentSlideIndex = 0;
  
        // Return object that adds cellSelector to mainSliderArgs
        return {
          cellSelector: '[data-group="'+set+'"]',
          imageSet: set,
          initialIndex: this.settings.currentSlideIndex
        }
      },
  
      updateImageSet: function(evt) {
        // If called directly, use current variant
        var variant = evt ? evt.detail.variant : (this.variants ? this.variants.currentVariant : null);
        if (!variant) {
          return;
        }
  
        var setValue = this.getImageSetName(variant[this.settings.imageSetIndex]);
  
        // Already on the current image group
        if (this.settings.currentImageSet === setValue) {
          return;
        }
  
        this.initProductSlider(variant);
      },
  
      // Show/hide thumbnails based on current image set
      updateImageSetThumbs: function(set) {
        this.cache.thumbSlider.querySelectorAll('.product__thumb-item').forEach(thumb => {
          thumb.classList.toggle(classes.hidden, thumb.dataset.group !== set);
        });
      },
  
      getImageSetName: function(string) {
        return string.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/-$/, '').replace(/^-/, '');
      },
  
      updateSku: function(evt) {
        var variant = evt.detail.variant;
        var newSku = '';
  
        if (variant) {
          if (variant.sku) {
            newSku = variant.sku;
          }
  
          document.getElementById(this.selectors.sku).textContent = newSku;
        }
      },
  
      updateInventory: function(evt) {
        var variant = evt.detail.variant;
  
        // Hide stock if no inventory management or policy is continue
        if (!variant || !variant.inventory_management || variant.inventory_policy === 'continue') {
          this.toggleInventoryQuantity(false);
          this.toggleIncomingInventory(false);
          return;
        }
  
        if (variant.inventory_management === 'shopify' && window.inventories && window.inventories[this.sectionId]) {
          var variantInventoryObject = window.inventories[this.sectionId][variant.id];
          var quantity = variantInventoryObject.quantity;
          var showInventory = true;
          var showIncomingInventory = false;
  
          if (quantity <= 0 || quantity > theme.settings.inventoryThreshold) {
            showInventory = false;
          }
  
          this.toggleInventoryQuantity(showInventory, quantity);
  
          // Only show incoming inventory when:
          // - inventory notice itself is hidden
          // - have incoming inventory
          // - current quantity is below theme setting threshold
          if (!showInventory && variantInventoryObject.incoming === 'true' && quantity <= theme.settings.inventoryThreshold) {
            showIncomingInventory = true;
          }
  
          this.toggleIncomingInventory(showIncomingInventory, variant.available, variantInventoryObject.next_incoming_date);
        }
      },
  
      updateAvailability: function(evt) {
        var variant = evt.detail.variant;
        if (!variant) {
          return;
        }
  
        this.storeAvailability.updateContent(variant.id);
      },
  
      toggleInventoryQuantity: function(show, qty) {
        if (!this.settings.inventory) {
          show = false;
        }
  
        var el = document.getElementById(this.selectors.inventory);
  
        if (show) {
          el.classList.remove(classes.hidden);
          el.textContent = theme.strings.stockLabel.replace('[count]', qty);
        } else {
          el.classList.add(classes.hidden);
        }
      },
  
      toggleIncomingInventory: function(show, available, date) {
        if (!this.settings.incomingInventory) {
          show = false;
        }
  
        var el = document.getElementById(this.selectors.incomingInventory);
  
        if (!el) {
          return;
        }
  
        if (show) {
          var string = available ?
                       theme.strings.willNotShipUntil.replace('[date]', date) :
                       theme.strings.willBeInStockAfter.replace('[date]', date);
  
          if (!date) {
            string = theme.strings.waitingForStock;
          }
  
          el.classList.remove(classes.hidden);
          el.textContent = string;
        } else {
          el.classList.add(classes.hidden);
        }
      },
  
      /*============================================================================
        Product videos
      ==============================================================================*/
      videoSetup: function() {
        var productVideos = this.cache.mainSlider.querySelectorAll(selectors.productVideo);
  
        if (!productVideos.length) {
          return false;
        }
  
        productVideos.forEach(vid => {
          var type = vid.dataset.videoType;
          if (type === 'youtube') {
            this.initYoutubeVideo(vid);
          } else if (type === 'mp4') {
            this.initMp4Video(vid);
          }
        });
      },
  
      initYoutubeVideo: function(div) {
        videoObjects[div.id] = new theme.YouTube(
          div.id,
          {
            videoId: div.dataset.youtubeId,
            videoParent: selectors.videoParent,
            autoplay: false, // will handle this in callback
            style: div.dataset.videoStyle,
            loop: div.dataset.videoLoop,
            events: {
              onReady: this.youtubePlayerReady.bind(this),
              onStateChange: this.youtubePlayerStateChange.bind(this)
            }
          }
        );
      },
  
      // Comes from YouTube SDK
      // Get iframe ID with evt.target.getIframe().id
      // Then access product video players with videoObjects[id]
      youtubePlayerReady: function(evt) {
        var iframeId = evt.target.getIframe().id;
  
        if (!videoObjects[iframeId]) {
          // No youtube player data
          return;
        }
  
        var obj = videoObjects[iframeId];
        var player = obj.videoPlayer;
  
        if (obj.options.style !== 'sound') {
          player.mute();
        }
  
        obj.parent.classList.remove('loading');
        obj.parent.classList.add('loaded');
  
        // If we have an element, it is in the visible/first slide,
        // and is muted, play it
        if (this._isFirstSlide(iframeId) && obj.options.style !== 'sound') {
          player.playVideo();
        }
      },
  
      _isFirstSlide: function(id) {
        return this.cache.mainSlider.querySelector(selectors.startingSlide + ' ' + '#' + id);
      },
  
      youtubePlayerStateChange: function(evt) {
        var iframeId = evt.target.getIframe().id;
        var obj = videoObjects[iframeId];
  
        switch (evt.data) {
          case -1: // unstarted
            // Handle low power state on iOS by checking if
            // video is reset to unplayed after attempting to buffer
            if (obj.attemptedToPlay) {
              obj.parent.classList.add('video-interactable');
            }
            break;
          case 0: // ended
            if (obj && obj.options.loop === 'true') {
              obj.videoPlayer.playVideo();
            }
            break;
          case 3: // buffering
            obj.attemptedToPlay = true;
            break;
        }
      },
  
      initMp4Video: function(div) {
        videoObjects[div.id] = {
          id: div.id,
          type: 'mp4'
        };
  
        if (this._isFirstSlide(div.id)) {
          this.playMp4Video(div.id);
        }
      },
  
      stopVideos: function() {
        for (var [id, vid] of Object.entries(videoObjects)) {
          if (vid.videoPlayer) {
            if (typeof vid.videoPlayer.stopVideo === 'function') {
              vid.videoPlayer.stopVideo(); // YouTube player
            }
          } else if (vid.type === 'mp4') {
            this.stopMp4Video(vid.id); // MP4 player
          }
        }
      },
  
      _getVideoType: function(video) {
        return video.getAttribute('data-video-type');
      },
  
      _getVideoDivId: function(video) {
        return video.id;
      },
  
      playMp4Video: function(id) {
        var player = this.container.querySelector('#' + id);
        var playPromise = player.play();
  
        if (playPromise !== undefined) {
          playPromise.then(function() {
            // Playing as expected
          })
          .catch(function(error) {
            // Likely low power mode on iOS, show controls
            player.setAttribute('controls', '');
            player.closest(selectors.videoParent).setAttribute('data-video-style', 'unmuted');
          });
        }
      },
  
      stopMp4Video: function(id) {
        var player = this.container.querySelector('#' + id);
        if (player && typeof player.pause === 'function') {
          player.pause();
        }
      },
  
      /*============================================================================
        Product images
      ==============================================================================*/
      initImageZoom: function() {
        var container = this.container.querySelector(this.selectors.imageContainer);
        if (!container) {
          return;
        }
        var imageZoom = new theme.Photoswipe(container, this.sectionId);
        container.addEventListener('photoswipe:afterChange', function(evt) {
          if (this.flickity) {
            this.flickity.goToSlide(evt.detail.index);
          }
        }.bind(this));
      },
  
      getThumbIndex: function(target) {
        return target.dataset.index;
      },
  
      updateVariantImage: function(evt) {
        var variant = evt.detail.variant;
        var sizedImgUrl = theme.Images.getSizedImageUrl(variant.featured_media.preview_image.src, this.settings.imageSize);
  
        var newImage = this.container.querySelector('.product__thumb[data-id="' + variant.featured_media.id + '"]');
        var imageIndex = this.getThumbIndex(newImage);
  
        // If there is no index, slider is not initalized
        if (typeof imageIndex === 'undefined') {
          return;
        }
  
        // Go to that variant image's slide
        if (this.flickity) {
          this.flickity.goToSlide(imageIndex);
        }
      },
  
      initProductSlider: function(variant) {
        // Stop if only a single image, but add active class to first slide
        if (this.cache.mainSlider.querySelectorAll(selectors.slide).length <= 1) {
          var slide = this.cache.mainSlider.querySelector(selectors.slide);
          if (slide) {
            slide.classList.add('is-selected');
          }
          return;
        }
  
        // Destroy slider in preparation of new initialization
        if (this.flickity && typeof this.flickity.destroy === 'function') {
          this.flickity.destroy();
        }
  
        // If variant argument exists, slideshow is reinitializing because of the
        // image set feature enabled and switching to a new group.
        // currentSlideIndex
        if (!variant) {
          var activeSlide = this.cache.mainSlider.querySelector(selectors.startingSlide);
          this.settings.currentSlideIndex = this._slideIndex(activeSlide);
        }
  
        var mainSliderArgs = {
          adaptiveHeight: true,
          avoidReflow: true,
          initialIndex: this.settings.currentSlideIndex,
          childNav: this.cache.thumbSlider,
          childNavScroller: this.cache.thumbScroller,
          childVertical: this.cache.thumbSlider.dataset.position === 'beside',
          pageDots: true, // mobile only with CSS
          wrapAround: true,
          callbacks: {
            onChange: this.onSlideChange.bind(this)
          }
        };
  
        // Override default settings if image set feature enabled
        if (this.settings.imageSetName) {
          var imageSetArgs = this.imageSetArguments(variant);
          mainSliderArgs = Object.assign({}, mainSliderArgs, imageSetArgs);
          this.updateImageSetThumbs(mainSliderArgs.imageSet);
        }
  
        this.flickity = new theme.Slideshow(this.cache.mainSlider, mainSliderArgs);
      },
  
      onSlideChange: function(index) {
        if (!this.flickity) return;
  
        var prevSlide = this.cache.mainSlider.querySelector('.product-main-slide[data-index="'+this.settings.currentSlideIndex+'"]');
        var nextSlide = this.cache.mainSlider.querySelector('.product-main-slide[data-index="'+index+'"]');
  
        prevSlide.setAttribute('tabindex', '-1');
        nextSlide.setAttribute('tabindex', 0);
  
        // Pause any existing slide video/media
        this.stopMediaOnSlide(prevSlide);
  
        // Prep next slide video/media
        this.prepMediaOnSlide(nextSlide);
  
        // Update current slider index
        this.settings.currentSlideIndex = index;
      },
  
      stopMediaOnSlide(slide) {
        // Stop existing video
        var video = slide.querySelector(selectors.productVideo);
        if (video) {
          var videoType = this._getVideoType(video);
          var videoId = this._getVideoDivId(video);
          if (videoType === 'youtube') {
            if (videoObjects[videoId].videoPlayer) {
              videoObjects[videoId].videoPlayer.stopVideo();
              return;
            }
          } else if (videoType === 'mp4') {
            this.stopMp4Video(videoId);
            return;
          }
        }
  
        // Stop existing media
        var currentMedia = slide.querySelector(this.selectors.media);
        if (currentMedia) {
          currentMedia.dispatchEvent(
            new CustomEvent('mediaHidden', {
              bubbles: true,
              cancelable: true
            })
          );
        }
      },
  
      prepMediaOnSlide(slide) {
        var video = slide.querySelector(selectors.productVideo);
        if (video) {
          var videoType = this._getVideoType(video);
          var videoId = this._getVideoDivId(video);
          if (videoType === 'youtube') {
            if (videoObjects[videoId].videoPlayer && videoObjects[videoId].options.style !== 'sound') {
              videoObjects[videoId].videoPlayer.playVideo();
              return;
            }
          } else if (videoType === 'mp4') {
            this.playMp4Video(videoId);
          }
        }
  
        var nextMedia = slide.querySelector(this.selectors.media);
        if (nextMedia) {
          nextMedia.dispatchEvent(
            new CustomEvent('mediaVisible', {
              bubbles: true,
              cancelable: true
            })
          );
          slide.querySelector('.shopify-model-viewer-ui__button').setAttribute('tabindex', 0);
          slide.querySelector('.product-single__close-media').setAttribute('tabindex', 0);
        }
      },
  
      _slideIndex: function(el) {
        return el.getAttribute('data-index');
      },
  
      /*============================================================================
        Products when in quick view modal
      ==============================================================================*/
      openModalProduct: function() {
        var initialized = false;
  
        if (!this.settings.modalInit) {
          var formHolder = this.container.querySelector(this.selectors.modalFormHolder);
          var url = formHolder.dataset.url;
          var template = formHolder.dataset.template;
  
          // Use stripped down ajax version for faster loading,
          // unless preorder template is used so we show right button
          if (template !== 'preorder') {
            url = url + '?view=ajax';
          }
  
          fetch(url).then(function(response) {
            return response.text();
          }).then(function(html) {
            var parser = new DOMParser();
            var doc = parser.parseFromString(html, 'text/html');
            this.cache.form = doc.querySelector('#AddToCartForm-' + this.sectionId);
  
            formHolder.innerHTML = '';
            formHolder.append(this.cache.form);
            formHolder.classList.add('product-form-holder--loaded');
  
            this.formSetup();
  
            if (Shopify && Shopify.PaymentButton) {
              Shopify.PaymentButton.init();
            }
  
            document.dispatchEvent(new CustomEvent('quickview:loaded', {
              detail: {
                productId: this.sectionId
              }
            }));
          }.bind(this));
  
          this.productSetup();
          this.videoSetup();
  
          // Setup product inventory data
          this.updateModalProductInventory();
  
          // Enable product slider in quick view
          // 1. with image sets enabled, make sure we have this.variants before initializing
          // 2. initialize normally, form data not required
          if (this.settings.imageSetName) {
            if (this.variants) {
              this.initProductSlider();
            } else {
              document.addEventListener('quickview:loaded', function(evt) {
                if (evt.detail.productId === this.sectionId) {
                  this.initProductSlider();
                }
              }.bind(this));
            }
          } else {
            this.initProductSlider();
          }
          this.customMediaListners();
          this.addIdToRecentlyViewed();
          this.settings.modalInit = true;
        } else {
          initialized = true;
        }
  
        AOS.refreshHard();
  
        document.dispatchEvent(new CustomEvent('quickview:open', {
          detail: {
            initialized: initialized,
            productId: this.sectionId
          }
        }));
      },
  
      // Recommended products load via JS and don't add variant inventory to the
      // global variable that we later check. This function scrapes a data div
      // to get that info and manually add the values.
      updateModalProductInventory: function() {
        window.inventories = window.inventories || {};
        this.container.querySelectorAll('.js-product-inventory-data').forEach(el => {
          var sectionId = el.dataset.sectionId;
          window.inventories[sectionId] = {};
  
          el.querySelectorAll('.js-variant-inventory-data').forEach(el => {
            window.inventories[sectionId][el.dataset.id] = {
              'quantity': el.dataset.quantity,
              'incoming': el.dataset.incoming,
              'next_incoming_date': el.dataset.date
            }
          });
        });
      },
  
      closeModalProduct: function() {
        this.stopVideos();
      },
  
      /*============================================================================
        Product media (3D)
      ==============================================================================*/
      initModelViewerLibraries: function() {
        var modelViewerElements = this.container.querySelectorAll(this.selectors.media);
        if (modelViewerElements.length < 1) return;
  
        theme.ProductMedia.init(modelViewerElements, this.sectionId);
      },
  
      initShopifyXrLaunch: function() {
        document.addEventListener(
          'shopify_xr_launch',
          function() {
            var currentMedia = this.container.querySelector(
              this.selectors.productMediaWrapper +
                ':not(.' +
                self.classes.hidden +
                ')'
            );
            currentMedia.dispatchEvent(
              new CustomEvent('xrLaunch', {
                bubbles: true,
                cancelable: true
              })
            );
          }.bind(this)
        );
      },
  
      customMediaListners: function() {
        document.querySelectorAll(this.selectors.closeMedia).forEach(el => {
          el.addEventListener('click', function() {
            var slide = this.cache.mainSlider.querySelector(selectors.currentSlide);
            var media = slide.querySelector(this.selectors.media);
            if (media) {
              media.dispatchEvent(
                new CustomEvent('mediaHidden', {
                  bubbles: true,
                  cancelable: true
                })
              );
            }
          }.bind(this))
        });
  
        var modelViewer = this.container.querySelector('model-viewer');
        if (modelViewer) {
          modelViewer.addEventListener('shopify_model_viewer_ui_toggle_play', function(evt) {
            this.mediaLoaded(evt);
          }.bind(this));
  
          modelViewer.addEventListener('shopify_model_viewer_ui_toggle_pause', function(evt) {
            this.mediaUnloaded(evt);
          }.bind(this));
        }
      },
  
      mediaLoaded: function(evt) {
        this.container.querySelectorAll(this.selectors.closeMedia).forEach(el => {
          el.classList.remove(classes.hidden);
        });
  
        if (this.flickity) {
          this.flickity.setDraggable(false);
        }
      },
  
      mediaUnloaded: function(evt) {
        this.container.querySelectorAll(this.selectors.closeMedia).forEach(el => {
          el.classList.add(classes.hidden);
        });
  
        if (this.flickity) {
          this.flickity.setDraggable(true);
        }
      },
  
      onUnload: function() {
        theme.ProductMedia.removeSectionModels(this.sectionId);
  
        if (this.flickity && typeof this.flickity.destroy === 'function') {
          this.flickity.destroy();
        }
      }
    });
  
    return Product;
  })();
  
  theme.RecentlyViewed = (function() {
    var init = false;
  
    function RecentlyViewed(container) {
      if (!container) {
        return;
      }
  
      this.container = container;
      this.sectionId = this.container.getAttribute('data-section-id');
      this.namespace = '.recently-viewed' + this.sectionId;
      this.gridItemWidth = this.container.getAttribute('data-grid-item-class');
      this.rowOf = this.container.getAttribute('data-row-of');
  
      theme.initWhenVisible({
        element: this.container,
        callback: this.init.bind(this),
        threshold: 600
      });
    };
  
    RecentlyViewed.prototype = Object.assign({}, RecentlyViewed.prototype, {
      init: function() {
        if (init) {
          return;
        }
  
        init = true;
  
        if (Object.keys(theme.recentlyViewed.recent).length === 0 && theme.recentlyViewed.recent.constructor === Object) {
          // No previous history on page load, so bail
          this.container.classList.add('hide');
          return;
        }
  
        this.outputContainer = document.getElementById('RecentlyViewed-' + this.sectionId);
        this.handle = this.container.getAttribute('data-product-handle');
  
        // Request new product info via JS API
        var promises = [];
        Object.keys(theme.recentlyViewed.recent).forEach(function (handle) {
          if (handle !== 'undefined') {
            promises.push(this.getProductInfo(handle));
          }
        }.bind(this));
  
        Promise.all(promises).then(function(result) {
          this.setupOutput(result);
          this.captureProductDetails(result);
        }.bind(this));
      },
  
      getProductInfo: function(handle) {
        return new Promise(function(resolve, reject) {
          if (theme.recentlyViewed.productInfo.hasOwnProperty(handle)) {
            resolve(theme.recentlyViewed.productInfo[handle]);
          } else {
            fetch('/products/'+ handle +'.js').then(function(response) {
              return response.text();
            }).then(function(product) {
              resolve(product);
            });
          }
        });
      },
  
      setupOutput: function(products) {
        var allProducts = [];
        var data = {};
        var limit = this.container.getAttribute('data-recent-count');
  
        var i = 0;
  
        Object.keys(products).forEach(function (key) {
          if (!products[key]) {
            return;
          }
          var product = JSON.parse(products[key]);
  
          // Ignore current product
          if (product.handle === this.handle) {
            return;
          }
  
          // Ignore undefined key
          if (typeof product.handle == 'undefined') {
            return;
          }
  
          i++;
  
          // New or formatted properties
          product.url = theme.recentlyViewed.recent[product.handle] ? theme.recentlyViewed.recent[product.handle].url : product.url;
          product.image_responsive_url = theme.recentlyViewed.recent[product.handle].featuredImage;
          product.image_aspect_ratio = theme.recentlyViewed.recent[product.handle].aspectRatio;
  
          // Unit pricing checks first variant
          var firstVariant = product.variants[0];
          if (firstVariant && firstVariant.unit_price) {
            var baseUnit = '';
  
            if (firstVariant.unit_price_measurement) {
              if (firstVariant.unit_price_measurement.reference_value != 1) {
                baseUnit += firstVariant.unit_price_measurement.reference_value + ' ';
              }
              baseUnit += firstVariant.unit_price_measurement.reference_unit;
            }
  
            product.unit_price = theme.Currency.formatMoney(firstVariant.unit_price);
            if (baseUnit != '') {
              product.unit_price += '/' + baseUnit;
            }
          }
  
          allProducts.unshift(product);
        }.bind(this));
  
        if (allProducts.length === 0) {
          this.container.classList.add('hide');
          return;
        }
  
        var productMarkup = theme.buildProductGridItem(allProducts.slice(0, limit), this.gridItemWidth, this.rowOf);
  
        this.outputContainer.innerHTML = productMarkup;
  
        if (AOS) {
          AOS.refreshHard();
        }
      },
  
      captureProductDetails: function(products) {
        for (var i = 0; i < products.length; i++) {
          var product = products[i];
          theme.recentlyViewed.productInfo[product.handle] = product;
        }
  
        // Add data to session storage to reduce API requests later
        if (theme.config.hasSessionStorage) {
          sessionStorage.setItem('recent-products', JSON.stringify(theme.recentlyViewed.productInfo));
        }
      },
  
      onUnload: function() {
        init = false;
      }
    });
  
    return RecentlyViewed;
  })();
  
  theme.Testimonials = (function() {
    var defaults = {
      adaptiveHeight: true,
      avoidReflow: true,
      pageDots: true,
      prevNextButtons: false
    };
  
    function Testimonials(container) {
      this.container = container;
      this.timeout;
      var sectionId = container.getAttribute('data-section-id');
      this.slideshow = container.querySelector('#Testimonials-' + sectionId);
      this.namespace = '.testimonial-' + sectionId;
  
      if (!this.slideshow) { return }
  
      theme.initWhenVisible({
        element: this.container,
        callback: this.init.bind(this),
        threshold: 600
      });
    }
  
    Testimonials.prototype = Object.assign({}, Testimonials.prototype, {
      init: function() {
        // Do not wrap when only a few blocks
        if (this.slideshow.dataset.count <= 3) {
          defaults.wrapAround = false;
        }
  
        this.flickity = new theme.Slideshow(this.slideshow, defaults);
  
        // Autoscroll to next slide on load to indicate more blocks
        if (this.slideshow.dataset.count > 2) {
          this.timeout = setTimeout(function() {
            this.flickity.goToSlide(1);
          }.bind(this), 1000);
        }
      },
  
      onUnload: function() {
        if (this.flickity && typeof this.flickity.destroy === 'function') {
          this.flickity.destroy();
        }
      },
  
      onDeselect: function() {
        if (this.flickity && typeof this.flickity.play === 'function') {
          this.flickity.play();
        }
      },
  
      onBlockSelect: function(evt) {
        var slide = this.slideshow.querySelector('.testimonials-slide--' + evt.detail.blockId)
        var index = parseInt(slide.dataset.index);
  
        clearTimeout(this.timeout);
  
        if (this.flickity && typeof this.flickity.pause === 'function') {
          this.flickity.goToSlide(index);
          this.flickity.pause();
        }
      },
  
      onBlockDeselect: function() {
        if (this.flickity && typeof this.flickity.play === 'function') {
          this.flickity.play();
        }
      }
    });
  
    return Testimonials;
  })();
  

  theme.isStorageSupported = function(type) {
    // Return false if we are in an iframe without access to sessionStorage
    if (window.self !== window.top) {
      return false;
    }

    var testKey = 'test';
    var storage;
    if (type === 'session') {
      storage = window.sessionStorage;
    }
    if (type === 'local') {
      storage = window.localStorage;
    }

    try {
      storage.setItem(testKey, '1');
      storage.removeItem(testKey);
      return true;
    } catch (error) {
      return false;
    }
  };

  theme.reinitProductGridItem = function(scope) {
    if (AOS) {AOS.refreshHard()}

    theme.initQuickShop();

    // Refresh reviews app
    if (window.SPR) {SPR.initDomEls();SPR.loadBadges()}

    // Re-hook up collapsible box triggers
    theme.collapsibles.init();
  };

  /*============================================================================
    Things that don't require DOM to be ready
  ==============================================================================*/
  theme.config.hasSessionStorage = theme.isStorageSupported('session');
  theme.config.hasLocalStorage = theme.isStorageSupported('local');
  AOS.init({
    easing: 'ease-out-quad',
    once: true,
    offset: 60,
    disableMutationObserver: true
  });

  if (theme.config.hasLocalStorage) {
    theme.recentlyViewed.localStorage = window.localStorage.getItem('theme-recent');

    if (theme.recentlyViewed.localStorage) {
      theme.recentlyViewed.recent = JSON.parse(theme.recentlyViewed.localStorage);
    }
  }

  theme.recentlyViewed.productInfo = theme.config.hasSessionStorage && sessionStorage['recent-products'] ? JSON.parse(sessionStorage['recent-products']) : {};

  // Trigger events when going between breakpoints
  theme.config.bpSmall = matchMedia(theme.config.mediaQuerySmall).matches;
  matchMedia(theme.config.mediaQuerySmall).addListener(function(mql) {
    if (mql.matches) {
      theme.config.bpSmall = true;
      document.dispatchEvent(new CustomEvent('matchSmall'));
    }
    else {
      theme.config.bpSmall = false;
      document.dispatchEvent(new CustomEvent('unmatchSmall'));
    }
  });

  /*============================================================================
    Things that require DOM to be ready
  ==============================================================================*/
  function DOMready(callback) {
    if (document.readyState != 'loading') callback();
    else document.addEventListener('DOMContentLoaded', callback);
  }

  // Load generic JS. Also reinitializes when sections are
  // added, edited, or removed in Shopify's editor
  theme.initGlobals = function() {
    theme.collapsibles.init();
    theme.videoModal();
  }

  DOMready(function(){
    theme.sections = new theme.Sections();

    // sections
    theme.sections.register('header', theme.HeaderSection);
    theme.sections.register('product', theme.Product);
    theme.sections.register('blog', theme.Blog);
    theme.sections.register('password-header', theme.PasswordHeader);
    theme.sections.register('photoswipe', theme.Photoswipe);
    theme.sections.register('product-recommendations', theme.Recommendations);
    theme.sections.register('slideshow-section', theme.SlideshowSection);
    theme.sections.register('background-image', theme.BackgroundImage);
    theme.sections.register('testimonials', theme.Testimonials);
    theme.sections.register('video-section', theme.VideoSection);
    theme.sections.register('map', theme.Maps);
    theme.sections.register('footer-section', theme.FooterSection);
    theme.sections.register('store-availability', theme.StoreAvailability);
    theme.sections.register('recently-viewed', theme.RecentlyViewed);
    theme.sections.register('newsletter-popup', theme.NewsletterPopup);
    theme.sections.register('collection-header', theme.CollectionHeader);
    theme.sections.register('collection-sidebar', theme.CollectionSidebar);
    theme.sections.register('collection-template', theme.Collection);

    theme.initGlobals();
    theme.initQuickShop();
    theme.rteInit();

    if (document.body.classList.contains('template-cart')) {
      var cartPageForm = document.getElementById('CartPageForm');
      if (cartPageForm) {
        new theme.CartForm(cartPageForm);
      }
    }

    if (theme.settings.predictiveSearch) {
      theme.predictiveSearch.init();
    }

    if (theme.settings.isCustomerTemplate) {
      theme.customerTemplates();
    }

    document.dispatchEvent(new CustomEvent('page:loaded'));
  });

})();
